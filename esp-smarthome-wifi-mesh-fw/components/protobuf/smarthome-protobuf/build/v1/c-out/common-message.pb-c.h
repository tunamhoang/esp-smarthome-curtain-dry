/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: common-message.proto */

#ifndef PROTOBUF_C_common_2dmessage_2eproto__INCLUDED
#define PROTOBUF_C_common_2dmessage_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct DateTime DateTime;
typedef struct Project Project;
typedef struct Building Building;
typedef struct Floor Floor;
typedef struct Apartment Apartment;
typedef struct ImageNetwork ImageNetwork;
typedef struct GroupControl GroupControl;
typedef struct Device Device;
typedef struct Switcher Switcher;
typedef struct LedItem LedItem;
typedef struct LedDriver LedDriver;
typedef struct BridgeInfo BridgeInfo;
typedef struct CurtainSwitcher CurtainSwitcher;
typedef struct Curtain Curtain;
typedef struct Motion Motion;
typedef struct Homekit Homekit;
typedef struct Remote Remote;
typedef struct Button Button;
typedef struct TouchPanel TouchPanel;
typedef struct RemoteLibrary RemoteLibrary;
typedef struct RemoteBrand RemoteBrand;
typedef struct RemoteMulti RemoteMulti;
typedef struct RemoteMultiLibraryCmd RemoteMultiLibraryCmd;
typedef struct AirConditionerState AirConditionerState;
typedef struct ControlState ControlState;
typedef struct RemoteACState RemoteACState;
typedef struct Home Home;
typedef struct User User;
typedef struct UserHome UserHome;
typedef struct Citizen Citizen;
typedef struct Room Room;
typedef struct Schedule Schedule;
typedef struct RemoteScheduleAction RemoteScheduleAction;
typedef struct AirConditionerScheduleAction AirConditionerScheduleAction;
typedef struct RemoteSchedule RemoteSchedule;
typedef struct SwitcherSchedule SwitcherSchedule;
typedef struct CurtainSwitcherSchedule CurtainSwitcherSchedule;
typedef struct CurtainSchedule CurtainSchedule;
typedef struct LightSensor LightSensor;
typedef struct Meter Meter;
typedef struct MeterIndex MeterIndex;
typedef struct MeterEstimate MeterEstimate;
typedef struct ActiveTime ActiveTime;
typedef struct Scene Scene;
typedef struct SceneSwitcherAction SceneSwitcherAction;
typedef struct SceneAirConditionerAction SceneAirConditionerAction;
typedef struct SceneCurtainSwitcherAction SceneCurtainSwitcherAction;
typedef struct SceneCurtainAction SceneCurtainAction;
typedef struct SceneRemoteAction SceneRemoteAction;
typedef struct SceneMotionAction SceneMotionAction;
typedef struct SceneLedDriverAction SceneLedDriverAction;
typedef struct SceneButtonAction SceneButtonAction;
typedef struct RemoteCommand RemoteCommand;
typedef struct StatusCode StatusCode;
typedef struct DeviceInScene DeviceInScene;
typedef struct CurtainSwitcherState CurtainSwitcherState;
typedef struct CurtainState CurtainState;
typedef struct DeviceTriggerScene DeviceTriggerScene;
typedef struct EnvironmentSensorReport EnvironmentSensorReport;
typedef struct EnvironmentSensor EnvironmentSensor;
typedef struct SmartPlug SmartPlug;
typedef struct UserSetting UserSetting;
typedef struct FileUploadForm FileUploadForm;


/* --- enums --- */

/*
 * Enum nhóm điều hòa, quạt, rèm cửa, đa năng
 */
typedef enum _GroupRemote {
  /*
   * Điều hòa
   */
  GROUP_REMOTE__AirConditioner = 0,
  /*
   * Quạt
   */
  GROUP_REMOTE__Fan = 1,
  /*
   * Đa năng
   */
  GROUP_REMOTE__Multi = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(GROUP_REMOTE)
} GroupRemote;
typedef enum _RemoteCategory {
  REMOTE_CATEGORY__CategoryAuto = 0,
  REMOTE_CATEGORY__CategoryAC = 1,
  REMOTE_CATEGORY__CategoryTV = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(REMOTE_CATEGORY)
} RemoteCategory;
/*
 * Enum nhóm thiết bị
 * SWITCH,SWCURTAIN,CURTAIN,IRRF,METTER
 */
typedef enum _GroupDevice {
  /*
   * Công tắc, Bình nóng lạnh
   */
  GROUP_DEVICE__SwitcherGroup = 0,
  /*
   * Rèm cửa điều khiển qua công tắc
   */
  GROUP_DEVICE__CurtainSwitcherGroup = 1,
  /*
   * Rèm cửa điều khiển qua thiết bị wifi
   */
  GROUP_DEVICE__CurtainGroup = 2,
  /*
   * Bộ thu phát sóng IrRf
   */
  GROUP_DEVICE__IrRfGroup = 3,
  /*
   * Đồng hồ điện
   */
  GROUP_DEVICE__MeterGroup = 4,
  /*
   * Thiết bị chuyển động
   */
  GROUP_DEVICE__MotionGroup = 5,
  /*
   * Homekit
   */
  GROUP_DEVICE__HomekitGroup = 6,
  /*
   * Nút nhấn
   */
  GROUP_DEVICE__ButtonGroup = 7,
  /*
   * Nhóm điều hòa
   */
  GROUP_DEVICE__ACGroup = 8,
  GROUP_DEVICE__LedDriverGroup = 9,
  GROUP_DEVICE__EnvironmentSensorGroup = 10,
  /*
   * Touch Panel
   */
  GROUP_DEVICE__TouchPanelGroup = 11,
  /*
   * Không xác định
   */
  GROUP_DEVICE__UnknowGroup = 1000
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(GROUP_DEVICE)
} GroupDevice;
/*
 * Enum điều kiện kịch bản
 */
typedef enum _ConditionScene {
  /*
   * Tự động
   */
  CONDITION_SCENE__AutoCondition = 0,
  /*
   * Bằng tay
   */
  CONDITION_SCENE__ManualCondition = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CONDITION_SCENE)
} ConditionScene;
/*
 * Enum trạng thái công tắc
 */
typedef enum _PowerState {
  /*
   * Tắt
   */
  POWER_STATE__Off = 0,
  /*
   * Mở
   */
  POWER_STATE__On = 1,
  /*
   * Nháy kép
   */
  POWER_STATE__DoubleTap = 2,
  /*
   * Trigger ngữ cảnh
   */
  POWER_STATE__SceneTrigger = 3,
  POWER_STATE__None = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(POWER_STATE)
} PowerState;
/*
 * Enum trạng thái điều khiển động cơ rèm
 */
typedef enum _CurtainControlState {
  CURTAIN_CONTROL_STATE__CurtainControlUnknown = 0,
  /*
   * Đóng
   */
  CURTAIN_CONTROL_STATE__CurtainControlClose = 1,
  /*
   * Dừng
   */
  CURTAIN_CONTROL_STATE__CurtainControlStop = 2,
  /*
   * Mở
   */
  CURTAIN_CONTROL_STATE__CurtainControlOpen = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CURTAIN_CONTROL_STATE)
} CurtainControlState;
/*
 * Enum trạng thái nút nhấn
 */
typedef enum _ButtonState {
  /*
   * Không làm gì
   */
  BUTTON_STATE__Nothing = 0,
  /*
   * Nhấn 1 lần
   */
  BUTTON_STATE__OneClick = 1,
  /*
   * Nhấn 2 lần
   */
  BUTTON_STATE__DoubleClick = 2,
  /*
   * Nhấn giữ
   */
  BUTTON_STATE__LongClick = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(BUTTON_STATE)
} ButtonState;
/*
 * Enum trạng thái kết nối ConnectionState
 */
typedef enum _ConnectionState {
  /*
   * Offline
   */
  CONNECTION_STATE__Offline = 0,
  /*
   * Online
   */
  CONNECTION_STATE__Online = 1,
  /*
   * Disconnect
   */
  CONNECTION_STATE__Disconnect = 2,
  /*
   * Add new device
   */
  CONNECTION_STATE__AddNew = 3,
  /*
   * Remove device
   */
  CONNECTION_STATE__Delete = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(CONNECTION_STATE)
} ConnectionState;
/*
 * Enum Mode
 */
typedef enum _ModeAc {
  MODE_AC__AutoMode = 0,
  MODE_AC__CoolMode = 1,
  MODE_AC__HeatMode = 2,
  MODE_AC__DryMode = 3,
  MODE_AC__FanMode = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(MODE_AC)
} ModeAc;
/*
 * Enum Swing
 */
typedef enum _SwingAc {
  SWING_AC__AutoSwing = 0,
  SWING_AC__LowSwing = 1,
  SWING_AC__MediumSwing = 2,
  SWING_AC__HighSwing = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(SWING_AC)
} SwingAc;
/*
 * Enum Fan
 */
typedef enum _FanAc {
  FAN_AC__AutoFan = 0,
  FAN_AC__LowFan = 1,
  FAN_AC__MediumFan = 2,
  FAN_AC__HighFan = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(FAN_AC)
} FanAc;
/*
 * Enum Type Meter
 */
typedef enum _TypeMeter {
  TYPE_METER__ElectricMeter = 0,
  TYPE_METER__WaterMeter = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TYPE_METER)
} TypeMeter;
/*
 * Enum for learn IR or RF remote
 */
typedef enum _TypeLearn {
  TYPE_LEARN__IR = 0,
  TYPE_LEARN__RF = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TYPE_LEARN)
} TypeLearn;
/*
 * Enum loại thiết bị
 */
typedef enum _TypeDevice {
  /*
   * Đèn
   */
  TYPE_DEVICE__SwitchLight = 0,
  /*
   * Công tắc
   */
  TYPE_DEVICE__SwitchSwitcher = 1,
  /*
   * Ổ cắm
   */
  TYPE_DEVICE__SwitchOutlet = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TYPE_DEVICE)
} TypeDevice;
/*
 * Enum trạng thái cảm biến chuyển động
 */
typedef enum _MotionState {
  /*
   * Không có chuyển động
   */
  MOTION_STATE__MotionNone = 0,
  /*
   * Có chuyển động
   */
  MOTION_STATE__MotionDetected = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(MOTION_STATE)
} MotionState;
/*
 * Enum thiết bị đăng ký cho touch panel
 */
typedef enum _TouchPanelComponentType {
  TOUCH_PANEL_COMPONENT_TYPE__TouchPanelComponentUnknown = 0,
  TOUCH_PANEL_COMPONENT_TYPE__TouchPanelComponentSwitcher = 1,
  TOUCH_PANEL_COMPONENT_TYPE__TouchPanelComponentCurtainSwitcher = 2,
  TOUCH_PANEL_COMPONENT_TYPE__TouchPanelComponentCurtain = 3,
  TOUCH_PANEL_COMPONENT_TYPE__TouchPanelComponentAirConditioner = 4,
  TOUCH_PANEL_COMPONENT_TYPE__TouchPanelComponentLedDriver = 5,
  TOUCH_PANEL_COMPONENT_TYPE__TouchPanelComponentScene = 6
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TOUCH_PANEL_COMPONENT_TYPE)
} TouchPanelComponentType;
typedef enum _HomekitMode {
  HOMEKIT_MODE__HomekitNormalMode = 0,
  HOMEKIT_MODE__HomekitProvisioningMode = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(HOMEKIT_MODE)
} HomekitMode;
/*
 * Enum nhóm điều hòa, quạt, rèm cửa
 */
typedef enum _TypeEcho {
  /*
   * Phản hồi bình thường
   */
  TYPE_ECHO__Echo = 0,
  /*
   * Login của thiết bị
   */
  TYPE_ECHO__DeviceLogin = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(TYPE_ECHO)
} TypeEcho;
typedef enum _DataType {
  DATA_TYPE__BINARIES = 0,
  DATA_TYPE__BASE64 = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(DATA_TYPE)
} DataType;
typedef enum _UserRole {
  USER_ROLE__NormalUser = 0,
  USER_ROLE__OperationalUser = 1,
  USER_ROLE__UserRoleMax = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(USER_ROLE)
} UserRole;
typedef enum _MotionSensorType {
  MOTION_SENSOR_TYPE__MotionSensor = 0,
  MOTION_SENSOR_TYPE__DoorSensor = 1,
  MOTION_SENSOR_TYPE__LeakSensor = 2,
  MOTION_SENSOR_TYPE__SmokeSensor = 3,
  MOTION_SENSOR_TYPE__GasSensor = 4,
  MOTION_SENSOR_TYPE__Temperature_Humidity_Pressure = 5,
  MOTION_SENSOR_TYPE__Motion_Light = 6,
  MOTION_SENSOR_TYPE__Motion_Vibrate = 7
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(MOTION_SENSOR_TYPE)
} MotionSensorType;
typedef enum _EnvironmentSensorType {
  ENVIRONMENT_SENSOR_TYPE__Unknow = 0,
  ENVIRONMENT_SENSOR_TYPE__Temperature = 1,
  ENVIRONMENT_SENSOR_TYPE__Humidity = 2,
  ENVIRONMENT_SENSOR_TYPE__Pressure = 3,
  ENVIRONMENT_SENSOR_TYPE__Light = 4,
  ENVIRONMENT_SENSOR_TYPE__Vibrate = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ENVIRONMENT_SENSOR_TYPE)
} EnvironmentSensorType;

/* --- messages --- */

/*
 * Ngày giờ
 */
struct  DateTime
{
  ProtobufCMessage base;
  uint32_t day;
  uint32_t month;
  uint32_t year;
  uint32_t hour;
  uint32_t minute;
  uint32_t second;
};
#define DATE_TIME__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&date_time__descriptor) \
, 0, 0, 0, 0, 0, 0 }


struct  Project
{
  ProtobufCMessage base;
  char *id;
  char *code;
  char *name;
};
#define PROJECT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&project__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  Building
{
  ProtobufCMessage base;
  char *id;
  char *code;
  char *name;
};
#define BUILDING__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&building__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  Floor
{
  ProtobufCMessage base;
  char *id;
  char *code;
  char *name;
};
#define FLOOR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&floor__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  Apartment
{
  ProtobufCMessage base;
  char *id;
  char *code;
  char *name;
};
#define APARTMENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&apartment__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  ImageNetwork
{
  ProtobufCMessage base;
  char *thumb;
  char *url;
};
#define IMAGE_NETWORK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&image_network__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/*
 * Nhóm thiết bị
 */
struct  GroupControl
{
  ProtobufCMessage base;
  /*
   * Id nhóm
   */
  char *id;
  /*
   * Tên tiếng việt
   */
  char *name;
  /*
   * Tên tiếng anh
   */
  char *nameen;
  /*
   * Tên tiếng anh
   */
  char *icon;
  /*
   * Nhóm
   */
  GroupDevice group;
  /*
   * Phòng
   */
  Room *room;
  /*
   * Số lượng thiết bị trong Nhóm
   */
  uint32_t count;
  /*
   * Ưu thích
   */
  protobuf_c_boolean favorite;
  /*
   * Hiển thị trạng thái trang nhà
   */
  protobuf_c_boolean showhome;
  /*
   * Số phút tự động tắt
   */
  uint32_t autooff;
  /*
   * Device ảo DeviceId = GroupControlId để cho đồng bộ với thiết bị thật
   */
  Device *device;
  /*
   * Trạng thái hiện tại của nhóm
   */
  ControlState *state;
  /*
   * Công tắc
   */
  size_t n_switchers;
  Switcher **switchers;
  /*
   *  Rèm cửa
   */
  size_t n_curtainswitchers;
  CurtainSwitcher **curtainswitchers;
  /*
   * Điều hòa
   */
  size_t n_remotes;
  Remote **remotes;
  /*
   * Động cơ rèm cửa
   */
  size_t n_curtains;
  Curtain **curtains;
};
#define GROUP_CONTROL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&group_control__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, GROUP_DEVICE__SwitcherGroup, NULL, 0, 0, 0, 0, NULL, NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL }


/*
 * Thông tin về thiết bị kết nối wifi
 */
struct  Device
{
  ProtobufCMessage base;
  /*
   * Id của thiết bị kết nối wifi
   */
  char *deviceid;
  /*
   * Id của room
   */
  char *roomid;
  /*
   * DeviceToken
   */
  char *devicetoken;
  /*
   * Tên thiết bị
   */
  char *devicename;
  /*
   * Tên hãng
   */
  char *brandname;
  /*
   * Tên của room
   */
  char *roomname;
  char *icon;
  /*
   * IP local của thiết bị
   */
  char *ip;
  /*
   * IP local của thiết bị
   */
  char *mdns;
  /*
   * Mẫu thiết bị (1 Công tắc, 2 Công tắc, 3 Công tắc...)
   */
  char *model;
  /*
   * Tín hiệu sóng, Lưu trên server?
   */
  int32_t signal;
  /*
   * Phiên bản firmware phần mềm
   */
  char *firmwareversion;
  /*
   * Phiên bản hardware phần cứng
   */
  char *hardwareversion;
  /*
   * HardwareId
   */
  char *hardwareid;
  /*
   * Access key để đăng nhập websocket server
   */
  char *accesskey;
  /*
   * Online/Offline/Disconnect
   */
  ConnectionState connectionstate;
  /*
   * Nhóm thiết bị
   */
  GroupDevice group;
  /*
   * Chế độ update firmware
   */
  uint32_t updatemode;
  /*
   * gatewayId root
   */
  char *gatewayid;
  /*
   * Độ nhạy của thiết bị
   */
  uint32_t reactivity;
  /*
   * Độ sáng của thiết bị
   */
  uint32_t brightness;
  /*
   * Thời gian chờ để tắt PIR
   */
  uint32_t timedelay;
  /*
   * |0000|0000|0000|0000|0000|0000|0000|0000|,
   */
  uint32_t sceneactivemap;
  /*
   * Cho phép chế độ kích hoạt kịch bản được lưu trong 4 bit, từ thấp đến cao với
   * 1: Mode double tap, 2: Mode scene switcher
   * Ví dụ sceneActiveMap = 0x21 tức là nút nhấn số 2 được kích hoạt nút kịch bản và nút số
   * 1 kích hoạt double tap.
   */
  protobuf_c_boolean notification;
};
#define DEVICE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&device__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, CONNECTION_STATE__Offline, GROUP_DEVICE__SwitcherGroup, 0, (char *)protobuf_c_empty_string, 0, 0, 0, 0, 0 }


/*
 * Thông tin thiết bị switcher công tắc
 */
struct  Switcher
{
  ProtobufCMessage base;
  char *id;
  char *name;
  /*
   * Tên tiếng anh
   */
  char *nameen;
  char *icon;
  /*
   * 1/2/3/4
   */
  uint32_t switcher;
  /*
   * Trạng thái On/Off
   */
  PowerState powerstate;
  /*
   * 0: Off, 1: On, 2: Keep giữ trạng thái cũ
   */
  uint32_t keepstate;
  /*
   * Ưu thích
   */
  protobuf_c_boolean favorite;
  uint32_t order;
  Device *device;
  /*
   * Phòng
   */
  Room *room;
  /*
   * Loại thiết bị
   */
  TypeDevice type;
  /*
   * Hiển thị trạng thái trang nhà
   */
  protobuf_c_boolean showhome;
  /*
   * Số phút tự động tắt
   */
  uint32_t autooff;
  /*
   * Nhóm điều khiển
   */
  GroupControl *groupcontrol;
};
#define SWITCHER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&switcher__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, POWER_STATE__Off, 0, 0, 0, NULL, NULL, TYPE_DEVICE__SwitchLight, 0, 0, NULL }


/*
 * Thông tin thiết bị switcher công tắc
 */
struct  LedItem
{
  ProtobufCMessage base;
  char *id;
  char *name;
  /*
   * Tên tiếng anh
   */
  char *nameen;
  char *icon;
  /*
   * 1/8/10
   */
  uint32_t index;
  int32_t brightnesspercent;
  PowerState powerstate;
  /*
   * 0: Off, 1: On, 2: Keep giữ trạng thái cũ
   */
  uint32_t keepstate;
  /*
   * Ưu thích
   */
  protobuf_c_boolean favorite;
  uint32_t order;
  Device *device;
  /*
   * Phòng
   */
  Room *room;
  /*
   * Hiển thị trạng thái trang nhà
   */
  protobuf_c_boolean showhome;
  /*
   * Số phút tự động tắt
   */
  uint32_t autooff;
  /*
   * Nhóm điều khiển
   */
  GroupControl *groupcontrol;
};
#define LED_ITEM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&led_item__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, 0, POWER_STATE__Off, 0, 0, 0, NULL, NULL, 0, 0, NULL }


struct  LedDriver
{
  ProtobufCMessage base;
  char *id;
  char *name;
  char *nameen;
  char *icon;
  size_t n_leditems;
  LedItem **leditems;
  Device *device;
  Room *room;
  PowerState powerstate;
  int32_t brightnesspercent;
  /*
   * Nhóm điều khiển
   */
  GroupControl *groupcontrol;
};
#define LED_DRIVER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&led_driver__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0,NULL, NULL, NULL, POWER_STATE__Off, 0, NULL }


/*
 * Thông tin về thiết bị bắc cầu để root gửi thông tin đến thiết bị đấy
 */
struct  BridgeInfo
{
  ProtobufCMessage base;
  uint32_t targetswitcher;
  char *targethardwareid;
  /*
   * 1: Cùng On/Off, 2: Đảo ngược
   */
  uint32_t bridgetype;
  /*
   * phân loại device
   */
  GroupDevice devicetype;
  /*
   * Xác nhận đã điều khiển offline.
   */
  protobuf_c_boolean executed;
};
#define BRIDGE_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&bridge_info__descriptor) \
, 0, (char *)protobuf_c_empty_string, 0, GROUP_DEVICE__SwitcherGroup, 0 }


/*
 * Thông tin thiết bị rèm cửa
 */
struct  CurtainSwitcher
{
  ProtobufCMessage base;
  char *id;
  char *name;
  char *icon;
  protobuf_c_boolean favorite;
  uint32_t order;
  Device *device;
  /*
   * Phần trăm hướng trong
   */
  uint32_t percentin;
  /*
   * Phần trăm hướng ngoài
   */
  uint32_t percentout;
  /*
   * Tên tiếng anh
   */
  char *nameen;
  /*
   * Phòng
   */
  Room *room;
  /*
   * Hiển thị trạng thái trang nhà
   */
  protobuf_c_boolean showhome;
  /*
   * Số phút tự động tắt
   */
  uint32_t autooff;
  /*
   * Nhóm điều khiển
   */
  GroupControl *groupcontrol;
};
#define CURTAIN_SWITCHER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&curtain_switcher__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, 0, NULL, 0, 0, (char *)protobuf_c_empty_string, NULL, 0, 0, NULL }


/*
 * Thông tin động cơ rèm cửa
 */
struct  Curtain
{
  ProtobufCMessage base;
  char *id;
  char *name;
  char *icon;
  protobuf_c_boolean favorite;
  uint32_t order;
  Device *device;
  /*
   * Phần trăm hướng trong
   */
  uint32_t percent;
  /*
   * Tên tiếng anh
   */
  char *nameen;
  /*
   * Phòng
   */
  Room *room;
  /*
   * Hiển thị trạng thái trang nhà
   */
  protobuf_c_boolean showhome;
  /*
   * Nhóm điều khiển
   */
  GroupControl *groupcontrol;
};
#define CURTAIN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&curtain__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, 0, NULL, 0, (char *)protobuf_c_empty_string, NULL, 0, NULL }


/*
 * Thông tin thiết bị chuyển động
 */
struct  Motion
{
  ProtobufCMessage base;
  char *id;
  char *name;
  char *icon;
  MotionState state;
  protobuf_c_boolean favorite;
  uint32_t order;
  Device *device;
  char *nameen;
  MotionSensorType type;
  uint32_t battery;
  protobuf_c_boolean notification;
};
#define MOTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&motion__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, MOTION_STATE__MotionNone, 0, 0, NULL, (char *)protobuf_c_empty_string, MOTION_SENSOR_TYPE__MotionSensor, 0, 0 }


/*
 * Thông tin thiết bị chuyển động
 */
struct  Homekit
{
  ProtobufCMessage base;
  char *id;
  char *icon;
  char *name;
  char *nameen;
  /*
   * Bật|Tắt or On|Off
   */
  HomekitMode mode;
  protobuf_c_boolean favorite;
  uint32_t order;
  Device *device;
};
#define HOMEKIT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&homekit__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, HOMEKIT_MODE__HomekitNormalMode, 0, 0, NULL }


/*
 * Thông tin thiết bị remote chung
 */
struct  Remote
{
  ProtobufCMessage base;
  char *id;
  /*
   * id của thư viện remote
   */
  char *remotelibraryid;
  /*
   * Id của thiết bị thu phát của remote
   */
  char *deviceid;
  char *name;
  char *icon;
  protobuf_c_boolean favorite;
  uint32_t order;
  /*
   * Thư viện remote
   */
  RemoteLibrary *library;
  /*
   * Thiết bị thu phát của remote
   */
  Device *device;
  /*
   * State của điều hòa
   */
  AirConditionerState *state;
  /*
   * Tên tiếng anh
   */
  char *nameen;
  char *roomid;
  char *roomname;
  /*
   * Hiển thị trạng thái trang nhà
   */
  protobuf_c_boolean showhome;
};
#define REMOTE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&remote__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, 0, NULL, NULL, NULL, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0 }


struct  Button
{
  ProtobufCMessage base;
  char *id;
  char *icon;
  char *name;
  char *nameen;
  ButtonState buttonstate;
  protobuf_c_boolean favorite;
  uint32_t order;
  Device *device;
  uint32_t index;
  uint32_t battery;
  char *roomid;
  char *roomname;
  protobuf_c_boolean showhome;
};
#define BUTTON__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&button__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, BUTTON_STATE__Nothing, 0, 0, NULL, 0, 0, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0 }


/*
 * Thông tin Touch Panel
 */
struct  TouchPanel
{
  ProtobufCMessage base;
  char *id;
  Device *device;
  char *icon;
  char *name;
  /*
   * Tên tiếng anh
   */
  char *nameen;
  protobuf_c_boolean favorite;
  /*
   * Phòng
   */
  Room *room;
  /*
   * Hiển thị trạng thái trang nhà
   */
  protobuf_c_boolean showhome;
  uint32_t autooff;
};
#define TOUCH_PANEL__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&touch_panel__descriptor) \
, (char *)protobuf_c_empty_string, NULL, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, NULL, 0, 0 }


/*
 * Thông tin thư viện remote
 */
struct  RemoteLibrary
{
  ProtobufCMessage base;
  char *id;
  char *name;
  char *icon;
  char *model;
  /*
   * UI Remote Template
   */
  uint32_t uiremotetemplate;
  /*
   * Version của app
   */
  char *appversion;
  /*
   * Nhóm remote
   */
  GroupRemote group;
  RemoteBrand *brand;
};
#define REMOTE_LIBRARY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&remote_library__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, (char *)protobuf_c_empty_string, GROUP_REMOTE__AirConditioner, NULL }


struct  RemoteBrand
{
  ProtobufCMessage base;
  char *id;
  char *name;
  RemoteCategory category;
};
#define REMOTE_BRAND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&remote_brand__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, REMOTE_CATEGORY__CategoryAuto }


/*
 * Remote đa năng
 */
struct  RemoteMulti
{
  ProtobufCMessage base;
  char *id;
  char *remoteid;
  char *name;
  size_t n_remotemultilibrarycmds;
  RemoteMultiLibraryCmd **remotemultilibrarycmds;
};
#define REMOTE_MULTI__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&remote_multi__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0,NULL }


/*
 * Remote nút lệnh đa năng
 */
struct  RemoteMultiLibraryCmd
{
  ProtobufCMessage base;
  char *id;
  char *remotemultiid;
  char *name;
  uint32_t order;
  /*
   * IR or RF
   */
  TypeLearn type;
};
#define REMOTE_MULTI_LIBRARY_CMD__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&remote_multi_library_cmd__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, TYPE_LEARN__IR }


/*
 * Thông tin state remote điều hòa, trạng thái phòng trong điều hòa
 */
struct  AirConditionerState
{
  ProtobufCMessage base;
  /*
   * Id của remote
   */
  char *remoteid;
  PowerState powerstate;
  /*
   * Nhiệt độ Cool/Heat
   */
  float temperature;
  ModeAc mode;
  SwingAc swing;
  FanAc fan;
  /*
   * Nhiệt độ Phòng
   */
  float temperatureroom;
  /*
   * Độ ẩm phòng
   */
  float humidityroom;
  /*
   * DeviceId để cập nhật trạng thái nhiệt độ phòng
   */
  char *deviceid;
  /*
   * Điều hòa online/offline
   */
  ConnectionState connectionstate;
  /*
   * Id của dàn lạnh
   */
  uint32_t indoorid;
};
#define AIR_CONDITIONER_STATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&air_conditioner_state__descriptor) \
, (char *)protobuf_c_empty_string, POWER_STATE__Off, 0, MODE_AC__AutoMode, SWING_AC__AutoSwing, FAN_AC__AutoFan, 0, 0, (char *)protobuf_c_empty_string, CONNECTION_STATE__Offline, 0 }


/*
 * Thông tin state remote điều hòa, trạng thái phòng trong điều hòa
 */
struct  ControlState
{
  ProtobufCMessage base;
  /*
   * Id của điều khiển
   */
  char *controlid;
  /*
   * Nhóm nào
   */
  GroupDevice group;
  PowerState powerstate;
  /*
   * Nhiệt độ Cool/Heat
   */
  float temperature;
  ModeAc mode;
  SwingAc swing;
  FanAc fan;
  /*
   * Online/offline
   */
  ConnectionState connectionstate;
  /*
   * Phần trăm hướng trong
   */
  uint32_t percentin;
  /*
   * Phần trăm hướng ngoài
   */
  uint32_t percentout;
};
#define CONTROL_STATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&control_state__descriptor) \
, (char *)protobuf_c_empty_string, GROUP_DEVICE__SwitcherGroup, POWER_STATE__Off, 0, MODE_AC__AutoMode, SWING_AC__AutoSwing, FAN_AC__AutoFan, CONNECTION_STATE__Offline, 0, 0 }


struct  RemoteACState
{
  ProtobufCMessage base;
  protobuf_c_boolean power;
  uint32_t temperature;
  ModeAc mode;
  FanAc fan;
  protobuf_c_boolean swinghorizontal;
  protobuf_c_boolean swingvertical;
};
#define REMOTE_ACSTATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&remote_acstate__descriptor) \
, 0, 0, MODE_AC__AutoMode, FAN_AC__AutoFan, 0, 0 }


/*
 * Thông tin nhà
 */
struct  Home
{
  ProtobufCMessage base;
  char *id;
  char *name;
  char *nameen;
  char *backgroundname;
  float longitude;
  float latitude;
  protobuf_c_boolean isowner;
  protobuf_c_boolean isdefault;
  char *fullnamesharer;
  size_t n_users;
  UserHome **users;
  uint32_t featurecode;
  char *securitycode;
  uint32_t securitymode;
};
#define HOME__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&home__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, 0, 0, 0, (char *)protobuf_c_empty_string, 0,NULL, 0, (char *)protobuf_c_empty_string, 0 }


struct  User
{
  ProtobufCMessage base;
  char *userid;
  ProtobufCBinaryData avatar;
  char *fullname;
  char *email;
  char *phonenumber;
  char *language;
  protobuf_c_boolean autoswitchgps;
  /*
   * Số thứ tự của user
   */
  uint64_t order;
};
#define USER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&user__descriptor) \
, (char *)protobuf_c_empty_string, {0,NULL}, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, 0 }


/*
 * Thành viên trong nhà
 */
struct  UserHome
{
  ProtobufCMessage base;
  char *id;
  char *userid;
  char *homeid;
  ProtobufCBinaryData avatar;
  char *fullname;
  protobuf_c_boolean isowner;
  /*
   * Ngày chấp nhận thành viên
   */
  uint64_t accepteddate;
};
#define USER_HOME__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&user_home__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, {0,NULL}, (char *)protobuf_c_empty_string, 0, 0 }


/*
 * Công dân
 */
struct  Citizen
{
  ProtobufCMessage base;
  char *homeid;
  Project *project;
  Building *building;
  Floor *floor;
  Apartment *apartment;
  /*
   * Ngày đã nhận unixtime
   */
  uint64_t receiveddate;
  /*
   * Ngày đã duyệt nếu chưa có thì đang chờ phê duyệt ngược lại thì đã duyệt
   */
  uint64_t approveddate;
};
#define CITIZEN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&citizen__descriptor) \
, (char *)protobuf_c_empty_string, NULL, NULL, NULL, NULL, 0, 0 }


/*
 * Thông tin phòng
 */
struct  Room
{
  ProtobufCMessage base;
  char *id;
  char *name;
  Home *home;
  /*
   * Thiết bị kết nối wifi
   */
  size_t n_devices;
  Device **devices;
  /*
   * Nút Công tắc
   */
  size_t n_switchers;
  Switcher **switchers;
  /*
   * Nút Rèm cửa
   */
  size_t n_curtainswitchers;
  CurtainSwitcher **curtainswitchers;
  /*
   * Remote
   */
  size_t n_remotes;
  Remote **remotes;
  /*
   * Motion
   */
  size_t n_motions;
  Motion **motions;
  /*
   * Homekit - Gateway
   */
  size_t n_homekits;
  Homekit **homekits;
  char *nameen;
  char *backgroundname;
  /*
   * Nút nhấn
   */
  size_t n_buttons;
  Button **buttons;
  /*
   * Thiết bị nhóm
   */
  size_t n_groupcontrols;
  GroupControl **groupcontrols;
  size_t n_leditem;
  LedItem **leditem;
  size_t n_leddriver;
  LedDriver **leddriver;
  size_t n_lightsensors;
  LightSensor **lightsensors;
  size_t n_environmentsensors;
  EnvironmentSensor **environmentsensors;
  size_t n_smartplugs;
  SmartPlug **smartplugs;
  size_t n_curtains;
  Curtain **curtains;
  size_t n_touchpanels;
  TouchPanel **touchpanels;
};
#define ROOM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&room__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL }


/*
 * Thông tin về lịch
 */
struct  Schedule
{
  ProtobufCMessage base;
  DateTime *datetime;
  protobuf_c_boolean repeat;
  /*
   * Thứ 2
   */
  protobuf_c_boolean mon;
  /*
   * Thứ 3
   */
  protobuf_c_boolean tue;
  /*
   * Thứ 4
   */
  protobuf_c_boolean wed;
  /*
   * Thứ 5
   */
  protobuf_c_boolean thu;
  /*
   * Thứ 6
   */
  protobuf_c_boolean fri;
  /*
   * Thứ 7
   */
  protobuf_c_boolean sat;
  /*
   * CN
   */
  protobuf_c_boolean sun;
};
#define SCHEDULE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&schedule__descriptor) \
, NULL, 0, 0, 0, 0, 0, 0, 0, 0 }


/*
 * Thông tin thực thi remote chung
 */
struct  RemoteScheduleAction
{
  ProtobufCMessage base;
  char *id;
  char *remotescheduleid;
  char *remotelibrarycmdid;
  char *remotemultilibrarycmdid;
  uint32_t delay;
  uint32_t order;
  char *name;
};
#define REMOTE_SCHEDULE_ACTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&remote_schedule_action__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, 0, (char *)protobuf_c_empty_string }


/*
 * Thông tin thực thi remote điều hòa
 */
struct  AirConditionerScheduleAction
{
  ProtobufCMessage base;
  /*
   * Id của remote
   */
  char *remotescheduleid;
  PowerState powerstate;
  float temperature;
  ModeAc mode;
  SwingAc swing;
  FanAc fan;
};
#define AIR_CONDITIONER_SCHEDULE_ACTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&air_conditioner_schedule_action__descriptor) \
, (char *)protobuf_c_empty_string, POWER_STATE__Off, 0, MODE_AC__AutoMode, SWING_AC__AutoSwing, FAN_AC__AutoFan }


/*
 * Thông tin về RemoteSchedule
 */
struct  RemoteSchedule
{
  ProtobufCMessage base;
  char *id;
  Remote *remote;
  Schedule *schedule;
  /*
   * Thực thi hẹn lịch điều hòa
   */
  AirConditionerScheduleAction *airconditioneraction;
  /*
   * Thực thi hẹn lịch remote
   */
  size_t n_remoteactions;
  RemoteScheduleAction **remoteactions;
  protobuf_c_boolean active;
};
#define REMOTE_SCHEDULE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&remote_schedule__descriptor) \
, (char *)protobuf_c_empty_string, NULL, NULL, NULL, 0,NULL, 0 }


/*
 * Thông tin về SwitcherSchedule
 */
struct  SwitcherSchedule
{
  ProtobufCMessage base;
  char *id;
  /*
   * ON/OFF
   */
  PowerState powerstate;
  Switcher *switcher;
  Schedule *schedule;
  protobuf_c_boolean active;
};
#define SWITCHER_SCHEDULE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&switcher_schedule__descriptor) \
, (char *)protobuf_c_empty_string, POWER_STATE__Off, NULL, NULL, 0 }


/*
 * Thông tin về CurtainSwitcherSchedule hẹn lịch rèm cửa
 */
struct  CurtainSwitcherSchedule
{
  ProtobufCMessage base;
  char *id;
  CurtainSwitcher *curtainswitcher;
  Schedule *schedule;
  /*
   * Phần trăm hướng trong
   */
  uint32_t percentin;
  /*
   * Phần trăm hướng ngoài
   */
  uint32_t percentout;
  protobuf_c_boolean active;
};
#define CURTAIN_SWITCHER_SCHEDULE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&curtain_switcher_schedule__descriptor) \
, (char *)protobuf_c_empty_string, NULL, NULL, 0, 0, 0 }


/*
 * Thông tin về CurtainSchedule hẹn lịch rèm cửa
 */
struct  CurtainSchedule
{
  ProtobufCMessage base;
  char *id;
  Curtain *curtain;
  Schedule *schedule;
  /*
   * Phần trăm
   */
  uint32_t percent;
  protobuf_c_boolean active;
};
#define CURTAIN_SCHEDULE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&curtain_schedule__descriptor) \
, (char *)protobuf_c_empty_string, NULL, NULL, 0, 0 }


struct  LightSensor
{
  ProtobufCMessage base;
  char *id;
  char *icon;
  char *name;
  char *nameen;
  ButtonState buttonstate;
  protobuf_c_boolean favorite;
  uint32_t order;
  Device *device;
};
#define LIGHT_SENSOR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&light_sensor__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, BUTTON_STATE__Nothing, 0, 0, NULL }


/*
 * Đồng hồ do điện/nước
 */
struct  Meter
{
  ProtobufCMessage base;
  char *id;
  char *serialnumber;
  TypeMeter typemeter;
  /*
   * DeviceId, HardwareId giống nhau cho điện/nước
   */
  char *deviceid;
  char *icon;
  /*
   * [Deprecated]
   */
  /*
   * Tháng hiện tại|Tháng đã chọn
   */
  uint32_t month;
  /*
   * Tổng chỉ số điện|nước của tháng hiện tại
   */
  float metric;
  /*
   * Tổng tiền điện|nước của tháng hiện tại
   */
  uint32_t estimate;
  /*
   * [Deprecated]
   */
  /*
   * Chỉ số 1 ngày
   */
  size_t n_indexs;
  MeterIndex **indexs;
  /*
   * [Deprecated]
   */
  /*
   * Ước tính số lượng tiêu thụ + tiền điện|nước 6 tháng gần nhất
   */
  size_t n_estimates;
  MeterEstimate **estimates;
  /*
   * Offline/Online/Disconect
   */
  ConnectionState connectionstate;
  /*
   * Giới hạn mức tiền/tháng
   */
  uint32_t limitmoney;
  /*
   * Cảnh báo vượt mức tiêu thụ 0: Không | 1:Tức thời | 2:Hàng ngày | 3:Hàng tuần
   */
  uint32_t alertoverconsume;
  /*
   * Thời gian cập nhật chỉ số lần cuối Unix Timestamp
   */
  uint64_t lastupdateindex;
  /*
   * Đã mất kết nối cập nhật chỉ số mặc định quá 10'
   */
  protobuf_c_boolean lostupdateindex;
  /*
   * Ngày bắt đầu chốt của thàng gần nhất
   */
  uint64_t lastfromdate;
  /*
   * Ước tính số lượng tiêu thụ + tiền điện|nước 7 tháng gần nhất
   */
  size_t n_estimatemonths;
  MeterEstimate **estimatemonths;
  /*
   * Ước tính số lượng tiêu thụ các ngày trong 1 tháng
   */
  size_t n_estimatedays;
  MeterEstimate **estimatedays;
  /*
   * Thông tin về thiết bị của đồng hồ
   */
  Device *device;
  /*
   * Chỉ số điện|nước cuối cùng nhận được
   */
  float lastmetricindex;
};
#define METER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&meter__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, TYPE_METER__ElectricMeter, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, 0, 0, 0,NULL, 0,NULL, CONNECTION_STATE__Offline, 0, 0, 0, 0, 0, 0,NULL, 0,NULL, NULL, 0 }


/*
 * Chỉ số điện/nước
 */
struct  MeterIndex
{
  ProtobufCMessage base;
  /*
   * Số serial number của thiết bị
   */
  char *serialnumber;
  /*
   * 0: Điện, 1: Nước
   */
  TypeMeter type;
  /*
   * Chỉ số điện|nước
   */
  float metric;
  /*
   * Giờ cập nhật
   */
  int32_t hour;
};
#define METER_INDEX__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&meter_index__descriptor) \
, (char *)protobuf_c_empty_string, TYPE_METER__ElectricMeter, 0, 0 }


/*
 * Ước tính tiền điện/nước theo tháng
 */
struct  MeterEstimate
{
  ProtobufCMessage base;
  /*
   * Số serial number của thiết bị
   */
  char *serialnumber;
  /*
   * 0: Điện, 1: Nước
   */
  TypeMeter type;
  /*
   * Tháng
   */
  uint32_t month;
  /*
   * Tiền điện|nước
   */
  uint32_t estimate;
  /*
   * Số lượng tiêu thụ điện|nước
   */
  float consume;
  /*
   * Năm
   */
  uint32_t year;
  /*
   * Ngày
   */
  uint32_t day;
  /*
   * Giờ
   */
  uint32_t hour;
};
#define METER_ESTIMATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&meter_estimate__descriptor) \
, (char *)protobuf_c_empty_string, TYPE_METER__ElectricMeter, 0, 0, 0, 0, 0, 0 }


struct  ActiveTime
{
  ProtobufCMessage base;
  /*
   * Cho phép toàn thời gian
   */
  protobuf_c_boolean enablefulltime;
  /*
   * Thời gian bắt đầu kích hoạt kịch bản, quy thành phút VD: 13h10 -> 13*60+10,
   */
  uint32_t enablestart;
  /*
   * Thời gian kết thúc cho phép kịch bản hoạt động, quy thành phút.
   */
  uint32_t enableend;
  /*
   * Những ngày cho phép ngữ cảnh hoạt động trong tuần: bit thấp nhất tương ứng với enable/disable cho thứ 2,...
   */
  uint32_t enabledaymap;
};
#define ACTIVE_TIME__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&active_time__descriptor) \
, 0, 0, 0, 0 }


/*
 * Thông tin kịch bản
 */
struct  Scene
{
  ProtobufCMessage base;
  /*
   * Id
   */
  char *id;
  /*
   * HomeId
   */
  char *homeid;
  /*
   * Tên
   */
  char *name;
  /*
   * Tên tiếng anh
   */
  char *nameen;
  /*
   * Icon
   */
  char *icon;
  /*
   * Yêu thích
   */
  protobuf_c_boolean favorite;
  /*
   * AUTO/MANUAL/Timeline enum
   */
  ConditionScene condition;
  /*
   * Công tắc thực hiện điều kiện
   */
  Switcher *switchercondition;
  /*
   * Điều kiệu công tắc là Đóng hay Mở
   */
  PowerState powerstate;
  /*
   * Thực thi Công tắc
   */
  size_t n_sceneswitcheractions;
  SceneSwitcherAction **sceneswitcheractions;
  /*
   * Thực thi rèm cửa
   */
  size_t n_curtainswitcheractions;
  SceneCurtainSwitcherAction **curtainswitcheractions;
  /*
   * Thực thi Điều hòa
   */
  size_t n_airconditioneractions;
  SceneAirConditionerAction **airconditioneractions;
  /*
   * Thực thi Remote chung
   */
  size_t n_sceneremoteactions;
  SceneRemoteAction **sceneremoteactions;
  /*
   * Thực thi PIR
   */
  size_t n_scenemotionactions;
  SceneMotionAction **scenemotionactions;
  /*
   * 0: Kịch bản thường, 1: Công tắc cùng On/Off, 2: Công tắc đảo ngược, 3: Cảm biến điều khiển, 4: Timeline, 5: Smart button, 6: Thiết bị điều khiển
   */
  uint32_t type;
  /*
   * Thiết bị đã xác nhận việc Bridge đã xong
   */
  protobuf_c_boolean confirmed;
  /*
   * Điều khiện khi motion sensor active
   */
  Motion *motioncondition;
  /*
   * Khoảng thời gian active ngữ cảnh.
   */
  ActiveTime *activetime;
  /*
   * Disable/Enable kịch bản, mặc định là enable để tương thích với version cũ.
   */
  protobuf_c_boolean isdisable;
  /*
   * Danh sách icon thiết bị thực thi.
   */
  char *actionlisticon;
  /*
   * Điều khiển theo lịch
   */
  Schedule *schedule;
  /*
   * Thực thi channel của led driver
   */
  size_t n_sceneleddriveractions;
  SceneLedDriverAction **sceneleddriveractions;
  Button *buttoncondition;
  /*
   * Bổ sung Điều kiện khi device trigger trong kịch bản thiết bị điều khiển
   */
  LedDriver *leddrivercondition;
  EnvironmentSensor *environmentsensorscondition;
  /*
   * Thực thi động cơ rèm cửa
   */
  size_t n_curtainactions;
  SceneCurtainAction **curtainactions;
};
#define SCENE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&scene__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, CONDITION_SCENE__AutoCondition, NULL, POWER_STATE__Off, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0, 0, NULL, NULL, 0, (char *)protobuf_c_empty_string, NULL, 0,NULL, NULL, NULL, NULL, 0,NULL }


/*
 * Thông tin kịch bản thực thi công tắc
 */
struct  SceneSwitcherAction
{
  ProtobufCMessage base;
  char *id;
  char *sceneid;
  /*
   * Công tắc
   */
  Switcher *switcher;
  /*
   * Trạng thái On/Off
   */
  PowerState powerstate;
  uint32_t order;
};
#define SCENE_SWITCHER_ACTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&scene_switcher_action__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, NULL, POWER_STATE__Off, 0 }


/*
 * Thông tin kịch bản thực thi điều hòa
 */
struct  SceneAirConditionerAction
{
  ProtobufCMessage base;
  char *id;
  char *sceneid;
  Remote *remote;
  /*
   * Trạng thái On/Off enum
   */
  PowerState powerstate;
  /*
   * Nhiệt độ cool
   */
  float temperature;
  /*
   * Enum
   */
  ModeAc mode;
  /*
   * Enum
   */
  SwingAc swing;
  /*
   * Enum
   */
  FanAc fan;
  uint32_t order;
};
#define SCENE_AIR_CONDITIONER_ACTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&scene_air_conditioner_action__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, NULL, POWER_STATE__Off, 0, MODE_AC__AutoMode, SWING_AC__AutoSwing, FAN_AC__AutoFan, 0 }


/*
 * Thông tin kịch bản thực thi công tắc rèm cửa
 */
struct  SceneCurtainSwitcherAction
{
  ProtobufCMessage base;
  char *id;
  char *sceneid;
  CurtainSwitcher *curtainswitcher;
  /*
   * Phần trăm hướng trong
   */
  uint32_t percentin;
  /*
   * Phần trăm hướng ngoài
   */
  uint32_t percentout;
};
#define SCENE_CURTAIN_SWITCHER_ACTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&scene_curtain_switcher_action__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, NULL, 0, 0 }


/*
 * Thông tin kịch bản thực thi công tắc rèm cửa
 */
struct  SceneCurtainAction
{
  ProtobufCMessage base;
  char *id;
  char *sceneid;
  Curtain *curtain;
  uint32_t percent;
};
#define SCENE_CURTAIN_ACTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&scene_curtain_action__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, NULL, 0 }


/*
 * Thông tin thực thi remote chung remote đơn năng/đa năng trừ công tắc/điều hòa
 */
struct  SceneRemoteAction
{
  ProtobufCMessage base;
  char *id;
  char *sceneid;
  Remote *remote;
  char *remotelibrarycmdid;
  char *remotemultilibrarycmdid;
  uint32_t delay;
  uint32_t order;
  char *name;
};
#define SCENE_REMOTE_ACTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&scene_remote_action__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, NULL, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, 0, (char *)protobuf_c_empty_string }


/*
 * Thông tin kịch bản thực thi motion
 */
struct  SceneMotionAction
{
  ProtobufCMessage base;
  char *id;
  char *sceneid;
  /*
   * Công tắc
   */
  Motion *motion;
  /*
   * Trạng thái PIR
   */
  MotionState state;
  uint32_t order;
};
#define SCENE_MOTION_ACTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&scene_motion_action__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, NULL, MOTION_STATE__MotionNone, 0 }


/*
 * Thông tin kịch bản thực thi led driver
 */
struct  SceneLedDriverAction
{
  ProtobufCMessage base;
  char *id;
  char *sceneid;
  LedDriver *leddriver;
  PowerState powerstate;
  int32_t brightnesspercent;
  char *icon;
  uint32_t order;
};
#define SCENE_LED_DRIVER_ACTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&scene_led_driver_action__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, NULL, POWER_STATE__Off, 0, (char *)protobuf_c_empty_string, 0 }


struct  SceneButtonAction
{
  ProtobufCMessage base;
  char *id;
  char *sceneid;
  Button *button;
  ButtonState buttonstate;
  uint32_t order;
};
#define SCENE_BUTTON_ACTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&scene_button_action__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, NULL, BUTTON_STATE__Nothing, 0 }


/*
 * Thông tin nút lệnh điều khiển remote
 */
struct  RemoteCommand
{
  ProtobufCMessage base;
  /*
   * Tên nút lệnh, khớp ở app
   */
  char *name;
  /*
   * Id của nút lệnh
   */
  char *remotelibrarycmdid;
  /*
   * Id của nút lệnh đa năng
   */
  char *remotemultilibrarycmdid;
};
#define REMOTE_COMMAND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&remote_command__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/*
 * Thông tin phản hồi mã lỗi từ server
 */
struct  StatusCode
{
  ProtobufCMessage base;
  /*
   * Mã lỗi trả về 0: Thành công, <>0: Lỗi
   */
  uint32_t code;
  /*
   * Thông báo lỗi nếu có
   */
  char *message;
};
#define STATUS_CODE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&status_code__descriptor) \
, 0, (char *)protobuf_c_empty_string }


/*
 * Thiết bị sử dụng trong kịch bản bắt cầu
 */
struct  DeviceInScene
{
  ProtobufCMessage base;
  Switcher *switcher;
  Motion *motion;
  LedDriver *leddriver;
};
#define DEVICE_IN_SCENE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&device_in_scene__descriptor) \
, NULL, NULL, NULL }


/*
 * State của rèm cửa (hiện tại chỉ dùng để gửi xuống device trong kịch bản trigger)
 */
struct  CurtainSwitcherState
{
  ProtobufCMessage base;
  /*
   * Phần trăm hướng trong
   */
  uint32_t percentin;
  /*
   * Phần trăm hướng ngoài
   */
  uint32_t percentout;
};
#define CURTAIN_SWITCHER_STATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&curtain_switcher_state__descriptor) \
, 0, 0 }


/*
 * State của động cơ rèm cửa (hiện tại chỉ dùng để gửi xuống device trong kịch bản trigger)
 */
struct  CurtainState
{
  ProtobufCMessage base;
  /*
   * Phần trăm
   */
  uint32_t percent;
};
#define CURTAIN_STATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&curtain_state__descriptor) \
, 0 }


typedef enum {
  DEVICE_TRIGGER_SCENE__CONTROL_STATE__NOT_SET = 0,
  DEVICE_TRIGGER_SCENE__CONTROL_STATE_POWER_STATE = 4,
  DEVICE_TRIGGER_SCENE__CONTROL_STATE_MOTION_STATE = 5,
  DEVICE_TRIGGER_SCENE__CONTROL_STATE_BUTTON_STATE = 6,
  DEVICE_TRIGGER_SCENE__CONTROL_STATE_BRIGHTNESS_PERCENT = 7,
  DEVICE_TRIGGER_SCENE__CONTROL_STATE_ENVIRONMENT_VALUE = 8,
  DEVICE_TRIGGER_SCENE__CONTROL_STATE_CURTAIN_SWITCHER_STATE = 9,
  DEVICE_TRIGGER_SCENE__CONTROL_STATE_AIR_CONDITIONER_STATE = 10,
  DEVICE_TRIGGER_SCENE__CONTROL_STATE_CURTAIN_STATE = 11
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(DEVICE_TRIGGER_SCENE__CONTROL_STATE__CASE)
} DeviceTriggerScene__ControlStateCase;

/*
 * Thiết bị sử dụng trong kịch bản Trigger
 */
struct  DeviceTriggerScene
{
  ProtobufCMessage base;
  char *hardwareid;
  /*
   * Vị trí
   */
  uint32_t deviceindex;
  /*
   * Nhóm điều khiển
   */
  uint32_t groupcontrol;
  DeviceTriggerScene__ControlStateCase control_state_case;
  union {
    PowerState powerstate;
    MotionState motionstate;
    ButtonState buttonstate;
    int32_t brightnesspercent;
    float environmentvalue;
    CurtainSwitcherState *curtainswitcherstate;
    AirConditionerState *airconditionerstate;
    CurtainState *curtainstate;
  };
};
#define DEVICE_TRIGGER_SCENE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&device_trigger_scene__descriptor) \
, (char *)protobuf_c_empty_string, 0, 0, DEVICE_TRIGGER_SCENE__CONTROL_STATE__NOT_SET, {0} }


struct  EnvironmentSensorReport
{
  ProtobufCMessage base;
  EnvironmentSensorType type;
  float value;
};
#define ENVIRONMENT_SENSOR_REPORT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&environment_sensor_report__descriptor) \
, ENVIRONMENT_SENSOR_TYPE__Unknow, 0 }


struct  EnvironmentSensor
{
  ProtobufCMessage base;
  char *id;
  char *icon;
  char *name;
  char *nameen;
  size_t n_report;
  EnvironmentSensorReport **report;
  protobuf_c_boolean favorite;
  uint32_t order;
  Device *device;
  uint32_t index;
  uint32_t battery;
  Room *room;
  protobuf_c_boolean showhome;
  MotionSensorType type;
};
#define ENVIRONMENT_SENSOR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&environment_sensor__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0,NULL, 0, 0, NULL, 0, 0, NULL, 0, MOTION_SENSOR_TYPE__MotionSensor }


struct  SmartPlug
{
  ProtobufCMessage base;
  char *id;
  char *icon;
  char *name;
  char *nameen;
  uint32_t index;
  protobuf_c_boolean favorite;
  uint32_t order;
  Device *device;
  float amp;
  float power;
  float volt;
  Room *room;
  protobuf_c_boolean showhome;
};
#define SMART_PLUG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&smart_plug__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, 0, 0, NULL, 0, 0, 0, NULL, 0 }


struct  UserSetting
{
  ProtobufCMessage base;
  char *defaulthomeid;
};
#define USER_SETTING__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&user_setting__descriptor) \
, (char *)protobuf_c_empty_string }


/*
 * Nhận yêu cầu tìm kiếm user theo key
 */
struct  FileUploadForm
{
  ProtobufCMessage base;
  char *name;
  ProtobufCBinaryData image;
  uint32_t sizeinbyte;
};
#define FILE_UPLOAD_FORM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&file_upload_form__descriptor) \
, (char *)protobuf_c_empty_string, {0,NULL}, 0 }


/* DateTime methods */
void   date_time__init
                     (DateTime         *message);
size_t date_time__get_packed_size
                     (const DateTime   *message);
size_t date_time__pack
                     (const DateTime   *message,
                      uint8_t             *out);
size_t date_time__pack_to_buffer
                     (const DateTime   *message,
                      ProtobufCBuffer     *buffer);
DateTime *
       date_time__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   date_time__free_unpacked
                     (DateTime *message,
                      ProtobufCAllocator *allocator);
/* Project methods */
void   project__init
                     (Project         *message);
size_t project__get_packed_size
                     (const Project   *message);
size_t project__pack
                     (const Project   *message,
                      uint8_t             *out);
size_t project__pack_to_buffer
                     (const Project   *message,
                      ProtobufCBuffer     *buffer);
Project *
       project__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   project__free_unpacked
                     (Project *message,
                      ProtobufCAllocator *allocator);
/* Building methods */
void   building__init
                     (Building         *message);
size_t building__get_packed_size
                     (const Building   *message);
size_t building__pack
                     (const Building   *message,
                      uint8_t             *out);
size_t building__pack_to_buffer
                     (const Building   *message,
                      ProtobufCBuffer     *buffer);
Building *
       building__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   building__free_unpacked
                     (Building *message,
                      ProtobufCAllocator *allocator);
/* Floor methods */
void   floor__init
                     (Floor         *message);
size_t floor__get_packed_size
                     (const Floor   *message);
size_t floor__pack
                     (const Floor   *message,
                      uint8_t             *out);
size_t floor__pack_to_buffer
                     (const Floor   *message,
                      ProtobufCBuffer     *buffer);
Floor *
       floor__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   floor__free_unpacked
                     (Floor *message,
                      ProtobufCAllocator *allocator);
/* Apartment methods */
void   apartment__init
                     (Apartment         *message);
size_t apartment__get_packed_size
                     (const Apartment   *message);
size_t apartment__pack
                     (const Apartment   *message,
                      uint8_t             *out);
size_t apartment__pack_to_buffer
                     (const Apartment   *message,
                      ProtobufCBuffer     *buffer);
Apartment *
       apartment__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   apartment__free_unpacked
                     (Apartment *message,
                      ProtobufCAllocator *allocator);
/* ImageNetwork methods */
void   image_network__init
                     (ImageNetwork         *message);
size_t image_network__get_packed_size
                     (const ImageNetwork   *message);
size_t image_network__pack
                     (const ImageNetwork   *message,
                      uint8_t             *out);
size_t image_network__pack_to_buffer
                     (const ImageNetwork   *message,
                      ProtobufCBuffer     *buffer);
ImageNetwork *
       image_network__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   image_network__free_unpacked
                     (ImageNetwork *message,
                      ProtobufCAllocator *allocator);
/* GroupControl methods */
void   group_control__init
                     (GroupControl         *message);
size_t group_control__get_packed_size
                     (const GroupControl   *message);
size_t group_control__pack
                     (const GroupControl   *message,
                      uint8_t             *out);
size_t group_control__pack_to_buffer
                     (const GroupControl   *message,
                      ProtobufCBuffer     *buffer);
GroupControl *
       group_control__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   group_control__free_unpacked
                     (GroupControl *message,
                      ProtobufCAllocator *allocator);
/* Device methods */
void   device__init
                     (Device         *message);
size_t device__get_packed_size
                     (const Device   *message);
size_t device__pack
                     (const Device   *message,
                      uint8_t             *out);
size_t device__pack_to_buffer
                     (const Device   *message,
                      ProtobufCBuffer     *buffer);
Device *
       device__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   device__free_unpacked
                     (Device *message,
                      ProtobufCAllocator *allocator);
/* Switcher methods */
void   switcher__init
                     (Switcher         *message);
size_t switcher__get_packed_size
                     (const Switcher   *message);
size_t switcher__pack
                     (const Switcher   *message,
                      uint8_t             *out);
size_t switcher__pack_to_buffer
                     (const Switcher   *message,
                      ProtobufCBuffer     *buffer);
Switcher *
       switcher__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   switcher__free_unpacked
                     (Switcher *message,
                      ProtobufCAllocator *allocator);
/* LedItem methods */
void   led_item__init
                     (LedItem         *message);
size_t led_item__get_packed_size
                     (const LedItem   *message);
size_t led_item__pack
                     (const LedItem   *message,
                      uint8_t             *out);
size_t led_item__pack_to_buffer
                     (const LedItem   *message,
                      ProtobufCBuffer     *buffer);
LedItem *
       led_item__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   led_item__free_unpacked
                     (LedItem *message,
                      ProtobufCAllocator *allocator);
/* LedDriver methods */
void   led_driver__init
                     (LedDriver         *message);
size_t led_driver__get_packed_size
                     (const LedDriver   *message);
size_t led_driver__pack
                     (const LedDriver   *message,
                      uint8_t             *out);
size_t led_driver__pack_to_buffer
                     (const LedDriver   *message,
                      ProtobufCBuffer     *buffer);
LedDriver *
       led_driver__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   led_driver__free_unpacked
                     (LedDriver *message,
                      ProtobufCAllocator *allocator);
/* BridgeInfo methods */
void   bridge_info__init
                     (BridgeInfo         *message);
size_t bridge_info__get_packed_size
                     (const BridgeInfo   *message);
size_t bridge_info__pack
                     (const BridgeInfo   *message,
                      uint8_t             *out);
size_t bridge_info__pack_to_buffer
                     (const BridgeInfo   *message,
                      ProtobufCBuffer     *buffer);
BridgeInfo *
       bridge_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   bridge_info__free_unpacked
                     (BridgeInfo *message,
                      ProtobufCAllocator *allocator);
/* CurtainSwitcher methods */
void   curtain_switcher__init
                     (CurtainSwitcher         *message);
size_t curtain_switcher__get_packed_size
                     (const CurtainSwitcher   *message);
size_t curtain_switcher__pack
                     (const CurtainSwitcher   *message,
                      uint8_t             *out);
size_t curtain_switcher__pack_to_buffer
                     (const CurtainSwitcher   *message,
                      ProtobufCBuffer     *buffer);
CurtainSwitcher *
       curtain_switcher__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   curtain_switcher__free_unpacked
                     (CurtainSwitcher *message,
                      ProtobufCAllocator *allocator);
/* Curtain methods */
void   curtain__init
                     (Curtain         *message);
size_t curtain__get_packed_size
                     (const Curtain   *message);
size_t curtain__pack
                     (const Curtain   *message,
                      uint8_t             *out);
size_t curtain__pack_to_buffer
                     (const Curtain   *message,
                      ProtobufCBuffer     *buffer);
Curtain *
       curtain__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   curtain__free_unpacked
                     (Curtain *message,
                      ProtobufCAllocator *allocator);
/* Motion methods */
void   motion__init
                     (Motion         *message);
size_t motion__get_packed_size
                     (const Motion   *message);
size_t motion__pack
                     (const Motion   *message,
                      uint8_t             *out);
size_t motion__pack_to_buffer
                     (const Motion   *message,
                      ProtobufCBuffer     *buffer);
Motion *
       motion__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   motion__free_unpacked
                     (Motion *message,
                      ProtobufCAllocator *allocator);
/* Homekit methods */
void   homekit__init
                     (Homekit         *message);
size_t homekit__get_packed_size
                     (const Homekit   *message);
size_t homekit__pack
                     (const Homekit   *message,
                      uint8_t             *out);
size_t homekit__pack_to_buffer
                     (const Homekit   *message,
                      ProtobufCBuffer     *buffer);
Homekit *
       homekit__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   homekit__free_unpacked
                     (Homekit *message,
                      ProtobufCAllocator *allocator);
/* Remote methods */
void   remote__init
                     (Remote         *message);
size_t remote__get_packed_size
                     (const Remote   *message);
size_t remote__pack
                     (const Remote   *message,
                      uint8_t             *out);
size_t remote__pack_to_buffer
                     (const Remote   *message,
                      ProtobufCBuffer     *buffer);
Remote *
       remote__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   remote__free_unpacked
                     (Remote *message,
                      ProtobufCAllocator *allocator);
/* Button methods */
void   button__init
                     (Button         *message);
size_t button__get_packed_size
                     (const Button   *message);
size_t button__pack
                     (const Button   *message,
                      uint8_t             *out);
size_t button__pack_to_buffer
                     (const Button   *message,
                      ProtobufCBuffer     *buffer);
Button *
       button__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   button__free_unpacked
                     (Button *message,
                      ProtobufCAllocator *allocator);
/* TouchPanel methods */
void   touch_panel__init
                     (TouchPanel         *message);
size_t touch_panel__get_packed_size
                     (const TouchPanel   *message);
size_t touch_panel__pack
                     (const TouchPanel   *message,
                      uint8_t             *out);
size_t touch_panel__pack_to_buffer
                     (const TouchPanel   *message,
                      ProtobufCBuffer     *buffer);
TouchPanel *
       touch_panel__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   touch_panel__free_unpacked
                     (TouchPanel *message,
                      ProtobufCAllocator *allocator);
/* RemoteLibrary methods */
void   remote_library__init
                     (RemoteLibrary         *message);
size_t remote_library__get_packed_size
                     (const RemoteLibrary   *message);
size_t remote_library__pack
                     (const RemoteLibrary   *message,
                      uint8_t             *out);
size_t remote_library__pack_to_buffer
                     (const RemoteLibrary   *message,
                      ProtobufCBuffer     *buffer);
RemoteLibrary *
       remote_library__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   remote_library__free_unpacked
                     (RemoteLibrary *message,
                      ProtobufCAllocator *allocator);
/* RemoteBrand methods */
void   remote_brand__init
                     (RemoteBrand         *message);
size_t remote_brand__get_packed_size
                     (const RemoteBrand   *message);
size_t remote_brand__pack
                     (const RemoteBrand   *message,
                      uint8_t             *out);
size_t remote_brand__pack_to_buffer
                     (const RemoteBrand   *message,
                      ProtobufCBuffer     *buffer);
RemoteBrand *
       remote_brand__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   remote_brand__free_unpacked
                     (RemoteBrand *message,
                      ProtobufCAllocator *allocator);
/* RemoteMulti methods */
void   remote_multi__init
                     (RemoteMulti         *message);
size_t remote_multi__get_packed_size
                     (const RemoteMulti   *message);
size_t remote_multi__pack
                     (const RemoteMulti   *message,
                      uint8_t             *out);
size_t remote_multi__pack_to_buffer
                     (const RemoteMulti   *message,
                      ProtobufCBuffer     *buffer);
RemoteMulti *
       remote_multi__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   remote_multi__free_unpacked
                     (RemoteMulti *message,
                      ProtobufCAllocator *allocator);
/* RemoteMultiLibraryCmd methods */
void   remote_multi_library_cmd__init
                     (RemoteMultiLibraryCmd         *message);
size_t remote_multi_library_cmd__get_packed_size
                     (const RemoteMultiLibraryCmd   *message);
size_t remote_multi_library_cmd__pack
                     (const RemoteMultiLibraryCmd   *message,
                      uint8_t             *out);
size_t remote_multi_library_cmd__pack_to_buffer
                     (const RemoteMultiLibraryCmd   *message,
                      ProtobufCBuffer     *buffer);
RemoteMultiLibraryCmd *
       remote_multi_library_cmd__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   remote_multi_library_cmd__free_unpacked
                     (RemoteMultiLibraryCmd *message,
                      ProtobufCAllocator *allocator);
/* AirConditionerState methods */
void   air_conditioner_state__init
                     (AirConditionerState         *message);
size_t air_conditioner_state__get_packed_size
                     (const AirConditionerState   *message);
size_t air_conditioner_state__pack
                     (const AirConditionerState   *message,
                      uint8_t             *out);
size_t air_conditioner_state__pack_to_buffer
                     (const AirConditionerState   *message,
                      ProtobufCBuffer     *buffer);
AirConditionerState *
       air_conditioner_state__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   air_conditioner_state__free_unpacked
                     (AirConditionerState *message,
                      ProtobufCAllocator *allocator);
/* ControlState methods */
void   control_state__init
                     (ControlState         *message);
size_t control_state__get_packed_size
                     (const ControlState   *message);
size_t control_state__pack
                     (const ControlState   *message,
                      uint8_t             *out);
size_t control_state__pack_to_buffer
                     (const ControlState   *message,
                      ProtobufCBuffer     *buffer);
ControlState *
       control_state__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   control_state__free_unpacked
                     (ControlState *message,
                      ProtobufCAllocator *allocator);
/* RemoteACState methods */
void   remote_acstate__init
                     (RemoteACState         *message);
size_t remote_acstate__get_packed_size
                     (const RemoteACState   *message);
size_t remote_acstate__pack
                     (const RemoteACState   *message,
                      uint8_t             *out);
size_t remote_acstate__pack_to_buffer
                     (const RemoteACState   *message,
                      ProtobufCBuffer     *buffer);
RemoteACState *
       remote_acstate__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   remote_acstate__free_unpacked
                     (RemoteACState *message,
                      ProtobufCAllocator *allocator);
/* Home methods */
void   home__init
                     (Home         *message);
size_t home__get_packed_size
                     (const Home   *message);
size_t home__pack
                     (const Home   *message,
                      uint8_t             *out);
size_t home__pack_to_buffer
                     (const Home   *message,
                      ProtobufCBuffer     *buffer);
Home *
       home__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   home__free_unpacked
                     (Home *message,
                      ProtobufCAllocator *allocator);
/* User methods */
void   user__init
                     (User         *message);
size_t user__get_packed_size
                     (const User   *message);
size_t user__pack
                     (const User   *message,
                      uint8_t             *out);
size_t user__pack_to_buffer
                     (const User   *message,
                      ProtobufCBuffer     *buffer);
User *
       user__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   user__free_unpacked
                     (User *message,
                      ProtobufCAllocator *allocator);
/* UserHome methods */
void   user_home__init
                     (UserHome         *message);
size_t user_home__get_packed_size
                     (const UserHome   *message);
size_t user_home__pack
                     (const UserHome   *message,
                      uint8_t             *out);
size_t user_home__pack_to_buffer
                     (const UserHome   *message,
                      ProtobufCBuffer     *buffer);
UserHome *
       user_home__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   user_home__free_unpacked
                     (UserHome *message,
                      ProtobufCAllocator *allocator);
/* Citizen methods */
void   citizen__init
                     (Citizen         *message);
size_t citizen__get_packed_size
                     (const Citizen   *message);
size_t citizen__pack
                     (const Citizen   *message,
                      uint8_t             *out);
size_t citizen__pack_to_buffer
                     (const Citizen   *message,
                      ProtobufCBuffer     *buffer);
Citizen *
       citizen__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   citizen__free_unpacked
                     (Citizen *message,
                      ProtobufCAllocator *allocator);
/* Room methods */
void   room__init
                     (Room         *message);
size_t room__get_packed_size
                     (const Room   *message);
size_t room__pack
                     (const Room   *message,
                      uint8_t             *out);
size_t room__pack_to_buffer
                     (const Room   *message,
                      ProtobufCBuffer     *buffer);
Room *
       room__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   room__free_unpacked
                     (Room *message,
                      ProtobufCAllocator *allocator);
/* Schedule methods */
void   schedule__init
                     (Schedule         *message);
size_t schedule__get_packed_size
                     (const Schedule   *message);
size_t schedule__pack
                     (const Schedule   *message,
                      uint8_t             *out);
size_t schedule__pack_to_buffer
                     (const Schedule   *message,
                      ProtobufCBuffer     *buffer);
Schedule *
       schedule__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   schedule__free_unpacked
                     (Schedule *message,
                      ProtobufCAllocator *allocator);
/* RemoteScheduleAction methods */
void   remote_schedule_action__init
                     (RemoteScheduleAction         *message);
size_t remote_schedule_action__get_packed_size
                     (const RemoteScheduleAction   *message);
size_t remote_schedule_action__pack
                     (const RemoteScheduleAction   *message,
                      uint8_t             *out);
size_t remote_schedule_action__pack_to_buffer
                     (const RemoteScheduleAction   *message,
                      ProtobufCBuffer     *buffer);
RemoteScheduleAction *
       remote_schedule_action__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   remote_schedule_action__free_unpacked
                     (RemoteScheduleAction *message,
                      ProtobufCAllocator *allocator);
/* AirConditionerScheduleAction methods */
void   air_conditioner_schedule_action__init
                     (AirConditionerScheduleAction         *message);
size_t air_conditioner_schedule_action__get_packed_size
                     (const AirConditionerScheduleAction   *message);
size_t air_conditioner_schedule_action__pack
                     (const AirConditionerScheduleAction   *message,
                      uint8_t             *out);
size_t air_conditioner_schedule_action__pack_to_buffer
                     (const AirConditionerScheduleAction   *message,
                      ProtobufCBuffer     *buffer);
AirConditionerScheduleAction *
       air_conditioner_schedule_action__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   air_conditioner_schedule_action__free_unpacked
                     (AirConditionerScheduleAction *message,
                      ProtobufCAllocator *allocator);
/* RemoteSchedule methods */
void   remote_schedule__init
                     (RemoteSchedule         *message);
size_t remote_schedule__get_packed_size
                     (const RemoteSchedule   *message);
size_t remote_schedule__pack
                     (const RemoteSchedule   *message,
                      uint8_t             *out);
size_t remote_schedule__pack_to_buffer
                     (const RemoteSchedule   *message,
                      ProtobufCBuffer     *buffer);
RemoteSchedule *
       remote_schedule__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   remote_schedule__free_unpacked
                     (RemoteSchedule *message,
                      ProtobufCAllocator *allocator);
/* SwitcherSchedule methods */
void   switcher_schedule__init
                     (SwitcherSchedule         *message);
size_t switcher_schedule__get_packed_size
                     (const SwitcherSchedule   *message);
size_t switcher_schedule__pack
                     (const SwitcherSchedule   *message,
                      uint8_t             *out);
size_t switcher_schedule__pack_to_buffer
                     (const SwitcherSchedule   *message,
                      ProtobufCBuffer     *buffer);
SwitcherSchedule *
       switcher_schedule__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   switcher_schedule__free_unpacked
                     (SwitcherSchedule *message,
                      ProtobufCAllocator *allocator);
/* CurtainSwitcherSchedule methods */
void   curtain_switcher_schedule__init
                     (CurtainSwitcherSchedule         *message);
size_t curtain_switcher_schedule__get_packed_size
                     (const CurtainSwitcherSchedule   *message);
size_t curtain_switcher_schedule__pack
                     (const CurtainSwitcherSchedule   *message,
                      uint8_t             *out);
size_t curtain_switcher_schedule__pack_to_buffer
                     (const CurtainSwitcherSchedule   *message,
                      ProtobufCBuffer     *buffer);
CurtainSwitcherSchedule *
       curtain_switcher_schedule__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   curtain_switcher_schedule__free_unpacked
                     (CurtainSwitcherSchedule *message,
                      ProtobufCAllocator *allocator);
/* CurtainSchedule methods */
void   curtain_schedule__init
                     (CurtainSchedule         *message);
size_t curtain_schedule__get_packed_size
                     (const CurtainSchedule   *message);
size_t curtain_schedule__pack
                     (const CurtainSchedule   *message,
                      uint8_t             *out);
size_t curtain_schedule__pack_to_buffer
                     (const CurtainSchedule   *message,
                      ProtobufCBuffer     *buffer);
CurtainSchedule *
       curtain_schedule__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   curtain_schedule__free_unpacked
                     (CurtainSchedule *message,
                      ProtobufCAllocator *allocator);
/* LightSensor methods */
void   light_sensor__init
                     (LightSensor         *message);
size_t light_sensor__get_packed_size
                     (const LightSensor   *message);
size_t light_sensor__pack
                     (const LightSensor   *message,
                      uint8_t             *out);
size_t light_sensor__pack_to_buffer
                     (const LightSensor   *message,
                      ProtobufCBuffer     *buffer);
LightSensor *
       light_sensor__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   light_sensor__free_unpacked
                     (LightSensor *message,
                      ProtobufCAllocator *allocator);
/* Meter methods */
void   meter__init
                     (Meter         *message);
size_t meter__get_packed_size
                     (const Meter   *message);
size_t meter__pack
                     (const Meter   *message,
                      uint8_t             *out);
size_t meter__pack_to_buffer
                     (const Meter   *message,
                      ProtobufCBuffer     *buffer);
Meter *
       meter__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   meter__free_unpacked
                     (Meter *message,
                      ProtobufCAllocator *allocator);
/* MeterIndex methods */
void   meter_index__init
                     (MeterIndex         *message);
size_t meter_index__get_packed_size
                     (const MeterIndex   *message);
size_t meter_index__pack
                     (const MeterIndex   *message,
                      uint8_t             *out);
size_t meter_index__pack_to_buffer
                     (const MeterIndex   *message,
                      ProtobufCBuffer     *buffer);
MeterIndex *
       meter_index__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   meter_index__free_unpacked
                     (MeterIndex *message,
                      ProtobufCAllocator *allocator);
/* MeterEstimate methods */
void   meter_estimate__init
                     (MeterEstimate         *message);
size_t meter_estimate__get_packed_size
                     (const MeterEstimate   *message);
size_t meter_estimate__pack
                     (const MeterEstimate   *message,
                      uint8_t             *out);
size_t meter_estimate__pack_to_buffer
                     (const MeterEstimate   *message,
                      ProtobufCBuffer     *buffer);
MeterEstimate *
       meter_estimate__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   meter_estimate__free_unpacked
                     (MeterEstimate *message,
                      ProtobufCAllocator *allocator);
/* ActiveTime methods */
void   active_time__init
                     (ActiveTime         *message);
size_t active_time__get_packed_size
                     (const ActiveTime   *message);
size_t active_time__pack
                     (const ActiveTime   *message,
                      uint8_t             *out);
size_t active_time__pack_to_buffer
                     (const ActiveTime   *message,
                      ProtobufCBuffer     *buffer);
ActiveTime *
       active_time__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   active_time__free_unpacked
                     (ActiveTime *message,
                      ProtobufCAllocator *allocator);
/* Scene methods */
void   scene__init
                     (Scene         *message);
size_t scene__get_packed_size
                     (const Scene   *message);
size_t scene__pack
                     (const Scene   *message,
                      uint8_t             *out);
size_t scene__pack_to_buffer
                     (const Scene   *message,
                      ProtobufCBuffer     *buffer);
Scene *
       scene__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   scene__free_unpacked
                     (Scene *message,
                      ProtobufCAllocator *allocator);
/* SceneSwitcherAction methods */
void   scene_switcher_action__init
                     (SceneSwitcherAction         *message);
size_t scene_switcher_action__get_packed_size
                     (const SceneSwitcherAction   *message);
size_t scene_switcher_action__pack
                     (const SceneSwitcherAction   *message,
                      uint8_t             *out);
size_t scene_switcher_action__pack_to_buffer
                     (const SceneSwitcherAction   *message,
                      ProtobufCBuffer     *buffer);
SceneSwitcherAction *
       scene_switcher_action__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   scene_switcher_action__free_unpacked
                     (SceneSwitcherAction *message,
                      ProtobufCAllocator *allocator);
/* SceneAirConditionerAction methods */
void   scene_air_conditioner_action__init
                     (SceneAirConditionerAction         *message);
size_t scene_air_conditioner_action__get_packed_size
                     (const SceneAirConditionerAction   *message);
size_t scene_air_conditioner_action__pack
                     (const SceneAirConditionerAction   *message,
                      uint8_t             *out);
size_t scene_air_conditioner_action__pack_to_buffer
                     (const SceneAirConditionerAction   *message,
                      ProtobufCBuffer     *buffer);
SceneAirConditionerAction *
       scene_air_conditioner_action__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   scene_air_conditioner_action__free_unpacked
                     (SceneAirConditionerAction *message,
                      ProtobufCAllocator *allocator);
/* SceneCurtainSwitcherAction methods */
void   scene_curtain_switcher_action__init
                     (SceneCurtainSwitcherAction         *message);
size_t scene_curtain_switcher_action__get_packed_size
                     (const SceneCurtainSwitcherAction   *message);
size_t scene_curtain_switcher_action__pack
                     (const SceneCurtainSwitcherAction   *message,
                      uint8_t             *out);
size_t scene_curtain_switcher_action__pack_to_buffer
                     (const SceneCurtainSwitcherAction   *message,
                      ProtobufCBuffer     *buffer);
SceneCurtainSwitcherAction *
       scene_curtain_switcher_action__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   scene_curtain_switcher_action__free_unpacked
                     (SceneCurtainSwitcherAction *message,
                      ProtobufCAllocator *allocator);
/* SceneCurtainAction methods */
void   scene_curtain_action__init
                     (SceneCurtainAction         *message);
size_t scene_curtain_action__get_packed_size
                     (const SceneCurtainAction   *message);
size_t scene_curtain_action__pack
                     (const SceneCurtainAction   *message,
                      uint8_t             *out);
size_t scene_curtain_action__pack_to_buffer
                     (const SceneCurtainAction   *message,
                      ProtobufCBuffer     *buffer);
SceneCurtainAction *
       scene_curtain_action__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   scene_curtain_action__free_unpacked
                     (SceneCurtainAction *message,
                      ProtobufCAllocator *allocator);
/* SceneRemoteAction methods */
void   scene_remote_action__init
                     (SceneRemoteAction         *message);
size_t scene_remote_action__get_packed_size
                     (const SceneRemoteAction   *message);
size_t scene_remote_action__pack
                     (const SceneRemoteAction   *message,
                      uint8_t             *out);
size_t scene_remote_action__pack_to_buffer
                     (const SceneRemoteAction   *message,
                      ProtobufCBuffer     *buffer);
SceneRemoteAction *
       scene_remote_action__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   scene_remote_action__free_unpacked
                     (SceneRemoteAction *message,
                      ProtobufCAllocator *allocator);
/* SceneMotionAction methods */
void   scene_motion_action__init
                     (SceneMotionAction         *message);
size_t scene_motion_action__get_packed_size
                     (const SceneMotionAction   *message);
size_t scene_motion_action__pack
                     (const SceneMotionAction   *message,
                      uint8_t             *out);
size_t scene_motion_action__pack_to_buffer
                     (const SceneMotionAction   *message,
                      ProtobufCBuffer     *buffer);
SceneMotionAction *
       scene_motion_action__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   scene_motion_action__free_unpacked
                     (SceneMotionAction *message,
                      ProtobufCAllocator *allocator);
/* SceneLedDriverAction methods */
void   scene_led_driver_action__init
                     (SceneLedDriverAction         *message);
size_t scene_led_driver_action__get_packed_size
                     (const SceneLedDriverAction   *message);
size_t scene_led_driver_action__pack
                     (const SceneLedDriverAction   *message,
                      uint8_t             *out);
size_t scene_led_driver_action__pack_to_buffer
                     (const SceneLedDriverAction   *message,
                      ProtobufCBuffer     *buffer);
SceneLedDriverAction *
       scene_led_driver_action__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   scene_led_driver_action__free_unpacked
                     (SceneLedDriverAction *message,
                      ProtobufCAllocator *allocator);
/* SceneButtonAction methods */
void   scene_button_action__init
                     (SceneButtonAction         *message);
size_t scene_button_action__get_packed_size
                     (const SceneButtonAction   *message);
size_t scene_button_action__pack
                     (const SceneButtonAction   *message,
                      uint8_t             *out);
size_t scene_button_action__pack_to_buffer
                     (const SceneButtonAction   *message,
                      ProtobufCBuffer     *buffer);
SceneButtonAction *
       scene_button_action__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   scene_button_action__free_unpacked
                     (SceneButtonAction *message,
                      ProtobufCAllocator *allocator);
/* RemoteCommand methods */
void   remote_command__init
                     (RemoteCommand         *message);
size_t remote_command__get_packed_size
                     (const RemoteCommand   *message);
size_t remote_command__pack
                     (const RemoteCommand   *message,
                      uint8_t             *out);
size_t remote_command__pack_to_buffer
                     (const RemoteCommand   *message,
                      ProtobufCBuffer     *buffer);
RemoteCommand *
       remote_command__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   remote_command__free_unpacked
                     (RemoteCommand *message,
                      ProtobufCAllocator *allocator);
/* StatusCode methods */
void   status_code__init
                     (StatusCode         *message);
size_t status_code__get_packed_size
                     (const StatusCode   *message);
size_t status_code__pack
                     (const StatusCode   *message,
                      uint8_t             *out);
size_t status_code__pack_to_buffer
                     (const StatusCode   *message,
                      ProtobufCBuffer     *buffer);
StatusCode *
       status_code__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   status_code__free_unpacked
                     (StatusCode *message,
                      ProtobufCAllocator *allocator);
/* DeviceInScene methods */
void   device_in_scene__init
                     (DeviceInScene         *message);
size_t device_in_scene__get_packed_size
                     (const DeviceInScene   *message);
size_t device_in_scene__pack
                     (const DeviceInScene   *message,
                      uint8_t             *out);
size_t device_in_scene__pack_to_buffer
                     (const DeviceInScene   *message,
                      ProtobufCBuffer     *buffer);
DeviceInScene *
       device_in_scene__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   device_in_scene__free_unpacked
                     (DeviceInScene *message,
                      ProtobufCAllocator *allocator);
/* CurtainSwitcherState methods */
void   curtain_switcher_state__init
                     (CurtainSwitcherState         *message);
size_t curtain_switcher_state__get_packed_size
                     (const CurtainSwitcherState   *message);
size_t curtain_switcher_state__pack
                     (const CurtainSwitcherState   *message,
                      uint8_t             *out);
size_t curtain_switcher_state__pack_to_buffer
                     (const CurtainSwitcherState   *message,
                      ProtobufCBuffer     *buffer);
CurtainSwitcherState *
       curtain_switcher_state__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   curtain_switcher_state__free_unpacked
                     (CurtainSwitcherState *message,
                      ProtobufCAllocator *allocator);
/* CurtainState methods */
void   curtain_state__init
                     (CurtainState         *message);
size_t curtain_state__get_packed_size
                     (const CurtainState   *message);
size_t curtain_state__pack
                     (const CurtainState   *message,
                      uint8_t             *out);
size_t curtain_state__pack_to_buffer
                     (const CurtainState   *message,
                      ProtobufCBuffer     *buffer);
CurtainState *
       curtain_state__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   curtain_state__free_unpacked
                     (CurtainState *message,
                      ProtobufCAllocator *allocator);
/* DeviceTriggerScene methods */
void   device_trigger_scene__init
                     (DeviceTriggerScene         *message);
size_t device_trigger_scene__get_packed_size
                     (const DeviceTriggerScene   *message);
size_t device_trigger_scene__pack
                     (const DeviceTriggerScene   *message,
                      uint8_t             *out);
size_t device_trigger_scene__pack_to_buffer
                     (const DeviceTriggerScene   *message,
                      ProtobufCBuffer     *buffer);
DeviceTriggerScene *
       device_trigger_scene__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   device_trigger_scene__free_unpacked
                     (DeviceTriggerScene *message,
                      ProtobufCAllocator *allocator);
/* EnvironmentSensorReport methods */
void   environment_sensor_report__init
                     (EnvironmentSensorReport         *message);
size_t environment_sensor_report__get_packed_size
                     (const EnvironmentSensorReport   *message);
size_t environment_sensor_report__pack
                     (const EnvironmentSensorReport   *message,
                      uint8_t             *out);
size_t environment_sensor_report__pack_to_buffer
                     (const EnvironmentSensorReport   *message,
                      ProtobufCBuffer     *buffer);
EnvironmentSensorReport *
       environment_sensor_report__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   environment_sensor_report__free_unpacked
                     (EnvironmentSensorReport *message,
                      ProtobufCAllocator *allocator);
/* EnvironmentSensor methods */
void   environment_sensor__init
                     (EnvironmentSensor         *message);
size_t environment_sensor__get_packed_size
                     (const EnvironmentSensor   *message);
size_t environment_sensor__pack
                     (const EnvironmentSensor   *message,
                      uint8_t             *out);
size_t environment_sensor__pack_to_buffer
                     (const EnvironmentSensor   *message,
                      ProtobufCBuffer     *buffer);
EnvironmentSensor *
       environment_sensor__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   environment_sensor__free_unpacked
                     (EnvironmentSensor *message,
                      ProtobufCAllocator *allocator);
/* SmartPlug methods */
void   smart_plug__init
                     (SmartPlug         *message);
size_t smart_plug__get_packed_size
                     (const SmartPlug   *message);
size_t smart_plug__pack
                     (const SmartPlug   *message,
                      uint8_t             *out);
size_t smart_plug__pack_to_buffer
                     (const SmartPlug   *message,
                      ProtobufCBuffer     *buffer);
SmartPlug *
       smart_plug__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   smart_plug__free_unpacked
                     (SmartPlug *message,
                      ProtobufCAllocator *allocator);
/* UserSetting methods */
void   user_setting__init
                     (UserSetting         *message);
size_t user_setting__get_packed_size
                     (const UserSetting   *message);
size_t user_setting__pack
                     (const UserSetting   *message,
                      uint8_t             *out);
size_t user_setting__pack_to_buffer
                     (const UserSetting   *message,
                      ProtobufCBuffer     *buffer);
UserSetting *
       user_setting__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   user_setting__free_unpacked
                     (UserSetting *message,
                      ProtobufCAllocator *allocator);
/* FileUploadForm methods */
void   file_upload_form__init
                     (FileUploadForm         *message);
size_t file_upload_form__get_packed_size
                     (const FileUploadForm   *message);
size_t file_upload_form__pack
                     (const FileUploadForm   *message,
                      uint8_t             *out);
size_t file_upload_form__pack_to_buffer
                     (const FileUploadForm   *message,
                      ProtobufCBuffer     *buffer);
FileUploadForm *
       file_upload_form__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   file_upload_form__free_unpacked
                     (FileUploadForm *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*DateTime_Closure)
                 (const DateTime *message,
                  void *closure_data);
typedef void (*Project_Closure)
                 (const Project *message,
                  void *closure_data);
typedef void (*Building_Closure)
                 (const Building *message,
                  void *closure_data);
typedef void (*Floor_Closure)
                 (const Floor *message,
                  void *closure_data);
typedef void (*Apartment_Closure)
                 (const Apartment *message,
                  void *closure_data);
typedef void (*ImageNetwork_Closure)
                 (const ImageNetwork *message,
                  void *closure_data);
typedef void (*GroupControl_Closure)
                 (const GroupControl *message,
                  void *closure_data);
typedef void (*Device_Closure)
                 (const Device *message,
                  void *closure_data);
typedef void (*Switcher_Closure)
                 (const Switcher *message,
                  void *closure_data);
typedef void (*LedItem_Closure)
                 (const LedItem *message,
                  void *closure_data);
typedef void (*LedDriver_Closure)
                 (const LedDriver *message,
                  void *closure_data);
typedef void (*BridgeInfo_Closure)
                 (const BridgeInfo *message,
                  void *closure_data);
typedef void (*CurtainSwitcher_Closure)
                 (const CurtainSwitcher *message,
                  void *closure_data);
typedef void (*Curtain_Closure)
                 (const Curtain *message,
                  void *closure_data);
typedef void (*Motion_Closure)
                 (const Motion *message,
                  void *closure_data);
typedef void (*Homekit_Closure)
                 (const Homekit *message,
                  void *closure_data);
typedef void (*Remote_Closure)
                 (const Remote *message,
                  void *closure_data);
typedef void (*Button_Closure)
                 (const Button *message,
                  void *closure_data);
typedef void (*TouchPanel_Closure)
                 (const TouchPanel *message,
                  void *closure_data);
typedef void (*RemoteLibrary_Closure)
                 (const RemoteLibrary *message,
                  void *closure_data);
typedef void (*RemoteBrand_Closure)
                 (const RemoteBrand *message,
                  void *closure_data);
typedef void (*RemoteMulti_Closure)
                 (const RemoteMulti *message,
                  void *closure_data);
typedef void (*RemoteMultiLibraryCmd_Closure)
                 (const RemoteMultiLibraryCmd *message,
                  void *closure_data);
typedef void (*AirConditionerState_Closure)
                 (const AirConditionerState *message,
                  void *closure_data);
typedef void (*ControlState_Closure)
                 (const ControlState *message,
                  void *closure_data);
typedef void (*RemoteACState_Closure)
                 (const RemoteACState *message,
                  void *closure_data);
typedef void (*Home_Closure)
                 (const Home *message,
                  void *closure_data);
typedef void (*User_Closure)
                 (const User *message,
                  void *closure_data);
typedef void (*UserHome_Closure)
                 (const UserHome *message,
                  void *closure_data);
typedef void (*Citizen_Closure)
                 (const Citizen *message,
                  void *closure_data);
typedef void (*Room_Closure)
                 (const Room *message,
                  void *closure_data);
typedef void (*Schedule_Closure)
                 (const Schedule *message,
                  void *closure_data);
typedef void (*RemoteScheduleAction_Closure)
                 (const RemoteScheduleAction *message,
                  void *closure_data);
typedef void (*AirConditionerScheduleAction_Closure)
                 (const AirConditionerScheduleAction *message,
                  void *closure_data);
typedef void (*RemoteSchedule_Closure)
                 (const RemoteSchedule *message,
                  void *closure_data);
typedef void (*SwitcherSchedule_Closure)
                 (const SwitcherSchedule *message,
                  void *closure_data);
typedef void (*CurtainSwitcherSchedule_Closure)
                 (const CurtainSwitcherSchedule *message,
                  void *closure_data);
typedef void (*CurtainSchedule_Closure)
                 (const CurtainSchedule *message,
                  void *closure_data);
typedef void (*LightSensor_Closure)
                 (const LightSensor *message,
                  void *closure_data);
typedef void (*Meter_Closure)
                 (const Meter *message,
                  void *closure_data);
typedef void (*MeterIndex_Closure)
                 (const MeterIndex *message,
                  void *closure_data);
typedef void (*MeterEstimate_Closure)
                 (const MeterEstimate *message,
                  void *closure_data);
typedef void (*ActiveTime_Closure)
                 (const ActiveTime *message,
                  void *closure_data);
typedef void (*Scene_Closure)
                 (const Scene *message,
                  void *closure_data);
typedef void (*SceneSwitcherAction_Closure)
                 (const SceneSwitcherAction *message,
                  void *closure_data);
typedef void (*SceneAirConditionerAction_Closure)
                 (const SceneAirConditionerAction *message,
                  void *closure_data);
typedef void (*SceneCurtainSwitcherAction_Closure)
                 (const SceneCurtainSwitcherAction *message,
                  void *closure_data);
typedef void (*SceneCurtainAction_Closure)
                 (const SceneCurtainAction *message,
                  void *closure_data);
typedef void (*SceneRemoteAction_Closure)
                 (const SceneRemoteAction *message,
                  void *closure_data);
typedef void (*SceneMotionAction_Closure)
                 (const SceneMotionAction *message,
                  void *closure_data);
typedef void (*SceneLedDriverAction_Closure)
                 (const SceneLedDriverAction *message,
                  void *closure_data);
typedef void (*SceneButtonAction_Closure)
                 (const SceneButtonAction *message,
                  void *closure_data);
typedef void (*RemoteCommand_Closure)
                 (const RemoteCommand *message,
                  void *closure_data);
typedef void (*StatusCode_Closure)
                 (const StatusCode *message,
                  void *closure_data);
typedef void (*DeviceInScene_Closure)
                 (const DeviceInScene *message,
                  void *closure_data);
typedef void (*CurtainSwitcherState_Closure)
                 (const CurtainSwitcherState *message,
                  void *closure_data);
typedef void (*CurtainState_Closure)
                 (const CurtainState *message,
                  void *closure_data);
typedef void (*DeviceTriggerScene_Closure)
                 (const DeviceTriggerScene *message,
                  void *closure_data);
typedef void (*EnvironmentSensorReport_Closure)
                 (const EnvironmentSensorReport *message,
                  void *closure_data);
typedef void (*EnvironmentSensor_Closure)
                 (const EnvironmentSensor *message,
                  void *closure_data);
typedef void (*SmartPlug_Closure)
                 (const SmartPlug *message,
                  void *closure_data);
typedef void (*UserSetting_Closure)
                 (const UserSetting *message,
                  void *closure_data);
typedef void (*FileUploadForm_Closure)
                 (const FileUploadForm *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    group_remote__descriptor;
extern const ProtobufCEnumDescriptor    remote_category__descriptor;
extern const ProtobufCEnumDescriptor    group_device__descriptor;
extern const ProtobufCEnumDescriptor    condition_scene__descriptor;
extern const ProtobufCEnumDescriptor    power_state__descriptor;
extern const ProtobufCEnumDescriptor    curtain_control_state__descriptor;
extern const ProtobufCEnumDescriptor    button_state__descriptor;
extern const ProtobufCEnumDescriptor    connection_state__descriptor;
extern const ProtobufCEnumDescriptor    mode_ac__descriptor;
extern const ProtobufCEnumDescriptor    swing_ac__descriptor;
extern const ProtobufCEnumDescriptor    fan_ac__descriptor;
extern const ProtobufCEnumDescriptor    type_meter__descriptor;
extern const ProtobufCEnumDescriptor    type_learn__descriptor;
extern const ProtobufCEnumDescriptor    type_device__descriptor;
extern const ProtobufCEnumDescriptor    motion_state__descriptor;
extern const ProtobufCEnumDescriptor    touch_panel_component_type__descriptor;
extern const ProtobufCEnumDescriptor    homekit_mode__descriptor;
extern const ProtobufCEnumDescriptor    type_echo__descriptor;
extern const ProtobufCEnumDescriptor    data_type__descriptor;
extern const ProtobufCEnumDescriptor    user_role__descriptor;
extern const ProtobufCEnumDescriptor    motion_sensor_type__descriptor;
extern const ProtobufCEnumDescriptor    environment_sensor_type__descriptor;
extern const ProtobufCMessageDescriptor date_time__descriptor;
extern const ProtobufCMessageDescriptor project__descriptor;
extern const ProtobufCMessageDescriptor building__descriptor;
extern const ProtobufCMessageDescriptor floor__descriptor;
extern const ProtobufCMessageDescriptor apartment__descriptor;
extern const ProtobufCMessageDescriptor image_network__descriptor;
extern const ProtobufCMessageDescriptor group_control__descriptor;
extern const ProtobufCMessageDescriptor device__descriptor;
extern const ProtobufCMessageDescriptor switcher__descriptor;
extern const ProtobufCMessageDescriptor led_item__descriptor;
extern const ProtobufCMessageDescriptor led_driver__descriptor;
extern const ProtobufCMessageDescriptor bridge_info__descriptor;
extern const ProtobufCMessageDescriptor curtain_switcher__descriptor;
extern const ProtobufCMessageDescriptor curtain__descriptor;
extern const ProtobufCMessageDescriptor motion__descriptor;
extern const ProtobufCMessageDescriptor homekit__descriptor;
extern const ProtobufCMessageDescriptor remote__descriptor;
extern const ProtobufCMessageDescriptor button__descriptor;
extern const ProtobufCMessageDescriptor touch_panel__descriptor;
extern const ProtobufCMessageDescriptor remote_library__descriptor;
extern const ProtobufCMessageDescriptor remote_brand__descriptor;
extern const ProtobufCMessageDescriptor remote_multi__descriptor;
extern const ProtobufCMessageDescriptor remote_multi_library_cmd__descriptor;
extern const ProtobufCMessageDescriptor air_conditioner_state__descriptor;
extern const ProtobufCMessageDescriptor control_state__descriptor;
extern const ProtobufCMessageDescriptor remote_acstate__descriptor;
extern const ProtobufCMessageDescriptor home__descriptor;
extern const ProtobufCMessageDescriptor user__descriptor;
extern const ProtobufCMessageDescriptor user_home__descriptor;
extern const ProtobufCMessageDescriptor citizen__descriptor;
extern const ProtobufCMessageDescriptor room__descriptor;
extern const ProtobufCMessageDescriptor schedule__descriptor;
extern const ProtobufCMessageDescriptor remote_schedule_action__descriptor;
extern const ProtobufCMessageDescriptor air_conditioner_schedule_action__descriptor;
extern const ProtobufCMessageDescriptor remote_schedule__descriptor;
extern const ProtobufCMessageDescriptor switcher_schedule__descriptor;
extern const ProtobufCMessageDescriptor curtain_switcher_schedule__descriptor;
extern const ProtobufCMessageDescriptor curtain_schedule__descriptor;
extern const ProtobufCMessageDescriptor light_sensor__descriptor;
extern const ProtobufCMessageDescriptor meter__descriptor;
extern const ProtobufCMessageDescriptor meter_index__descriptor;
extern const ProtobufCMessageDescriptor meter_estimate__descriptor;
extern const ProtobufCMessageDescriptor active_time__descriptor;
extern const ProtobufCMessageDescriptor scene__descriptor;
extern const ProtobufCMessageDescriptor scene_switcher_action__descriptor;
extern const ProtobufCMessageDescriptor scene_air_conditioner_action__descriptor;
extern const ProtobufCMessageDescriptor scene_curtain_switcher_action__descriptor;
extern const ProtobufCMessageDescriptor scene_curtain_action__descriptor;
extern const ProtobufCMessageDescriptor scene_remote_action__descriptor;
extern const ProtobufCMessageDescriptor scene_motion_action__descriptor;
extern const ProtobufCMessageDescriptor scene_led_driver_action__descriptor;
extern const ProtobufCMessageDescriptor scene_button_action__descriptor;
extern const ProtobufCMessageDescriptor remote_command__descriptor;
extern const ProtobufCMessageDescriptor status_code__descriptor;
extern const ProtobufCMessageDescriptor device_in_scene__descriptor;
extern const ProtobufCMessageDescriptor curtain_switcher_state__descriptor;
extern const ProtobufCMessageDescriptor curtain_state__descriptor;
extern const ProtobufCMessageDescriptor device_trigger_scene__descriptor;
extern const ProtobufCMessageDescriptor environment_sensor_report__descriptor;
extern const ProtobufCMessageDescriptor environment_sensor__descriptor;
extern const ProtobufCMessageDescriptor smart_plug__descriptor;
extern const ProtobufCMessageDescriptor user_setting__descriptor;
extern const ProtobufCMessageDescriptor file_upload_form__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_common_2dmessage_2eproto__INCLUDED */
