/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: client-main-message.proto */

#ifndef PROTOBUF_C_client_2dmain_2dmessage_2eproto__INCLUDED
#define PROTOBUF_C_client_2dmain_2dmessage_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "common-message.pb-c.h"
#include "client-message.pb-c.h"
#include "mesh-message.pb-c.h"

typedef struct LoginServerRequest LoginServerRequest;
typedef struct LoginServerResponse LoginServerResponse;
typedef struct AddDevicesServerRequest AddDevicesServerRequest;
typedef struct AddDevicesServerResponse AddDevicesServerResponse;
typedef struct DeleteDeviceServerRequest DeleteDeviceServerRequest;
typedef struct DeleteDeviceServerResponse DeleteDeviceServerResponse;
typedef struct RegisterDeviceServerRequest RegisterDeviceServerRequest;
typedef struct RegisterDeviceServerResponse RegisterDeviceServerResponse;
typedef struct DownloadFirmwareOnChangedDeviceServerResponse DownloadFirmwareOnChangedDeviceServerResponse;
typedef struct AuthServerMessage AuthServerMessage;
typedef struct DeviceServerMessage DeviceServerMessage;
typedef struct OnChangedServerMessage OnChangedServerMessage;
typedef struct ServerMessage ServerMessage;
typedef struct MainMessage MainMessage;


/* --- enums --- */


/* --- messages --- */

/*
 * Nhận được yêu cầu đăng nhập từ App hoặc Client
 */
struct  LoginServerRequest
{
  ProtobufCMessage base;
  /*
   * Dùng để đăng nhập cho App
   */
  char *accesstoken;
  /*
   * Dùng để đăng nhập cho App
   */
  char *facebooktoken;
  /*
   * Dùng để đăng nhập cho App
   */
  char *googletoken;
  /*
   * Dùng để đăng nhập cho Client
   */
  char *accesskey;
  /*
   * DeviceId của thiết bị
   */
  char *deviceid;
  /*
   * Hệ điều hành đăng nhập
   */
  char *loggedos;
  /*
   * Phiên bản hệ điều hành
   */
  char *versionos;
  /*
   * Ip đăng nhập
   */
  char *loggedip;
  /*
   * Domain thiết bị
   */
  char *mdns;
  /*
   * BrandnName
   */
  char *brandname;
  /*
   * Model
   */
  char *model;
  /*
   * Tín hiệu sóng, Lưu trên server?
   */
  int32_t signal;
  /*
   * Firmware Version
   */
  char *firmware;
  /*
   * Hardware Version
   */
  char *hardware;
  /*
   * Nhóm thiết bị công tắc, rèm cửa...
   */
  GroupDevice group;
  /*
   * hardwareId
   */
  char *hardwareid;
  /*
   * deviceToken
   */
  char *devicetoken;
  /*
   * gatewayId root
   */
  char *gatewayid;
  /*
   * Chế độ update của thiết bị
   */
  uint32_t updatemode;
  /*
   * Độ nhạy của thiết bị
   */
  uint32_t reactivity;
  /*
   * Độ sáng của thiết bị
   */
  uint32_t brightness;
  /*
   * Thời gian chờ để tắt PIR
   */
  uint32_t timedelay;
  /*
   * Vĩ độ
   */
  float latitude;
  /*
   * Kinh độ
   */
  float longitude;
  uint32_t sceneactivemap;
  char *gatewaydeviceid;
};
#define LOGIN_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&login_server_request__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, GROUP_DEVICE__SwitcherGroup, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, 0, 0, 0, 0, 0, 0, (char *)protobuf_c_empty_string }


/*
 * Phản hồi thông tin đăng nhập cho App hoặc Client
 */
struct  LoginServerResponse
{
  ProtobufCMessage base;
  char *userid;
  char *deviceid;
  char *accesstoken;
  char *refreshtoken;
  char *accesskey;
  /*
   * IP hoặc Domain Websocket
   */
  char *serverdomain;
  /*
   * Tên của ngôi nhà
   */
  Home *home;
  /*
   * keepalive
   */
  uint32_t keepalive;
  /*
   * Danh sách serialNumbers trả về cho thiết bị, để thiết bị đọc công tơ điện/nước
   */
  size_t n_serialnumbers;
  char **serialnumbers;
  /*
   * hardwareId
   */
  char *hardwareid;
  /*
   * Ngày đăng nhập - Unix Timestamp
   */
  uint64_t loggeddate;
  StatusCode *statuscode;
};
#define LOGIN_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&login_server_response__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, NULL, 0, 0,NULL, (char *)protobuf_c_empty_string, 0, NULL }


/*
 * Nhận được yêu cầu cập nhật danh sách các thiết bị đến DB server
 */
struct  AddDevicesServerRequest
{
  ProtobufCMessage base;
  /*
   * Thiết bị đã cấu hình rồi thì lần sau sẽ không hiển thị ra nữa nên server sẽ không thực hiện update trong db
   */
  size_t n_devices;
  Device **devices;
};
#define ADD_DEVICES_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&add_devices_server_request__descriptor) \
, 0,NULL }


/*
 * Phản hồi thông tin sau khi cập nhật danh sách thiết bị
 */
struct  AddDevicesServerResponse
{
  ProtobufCMessage base;
  size_t n_devices;
  Device **devices;
  StatusCode *statuscode;
};
#define ADD_DEVICES_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&add_devices_server_response__descriptor) \
, 0,NULL, NULL }


/*
 * Nhận được yêu cầu xóa thiết bị sản xuất
 */
struct  DeleteDeviceServerRequest
{
  ProtobufCMessage base;
  char *deviceid;
  char *hardwareid;
};
#define DELETE_DEVICE_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&delete_device_server_request__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/*
 * Phản hồi xóa thiết bị sản xuất
 */
struct  DeleteDeviceServerResponse
{
  ProtobufCMessage base;
  StatusCode *statuscode;
};
#define DELETE_DEVICE_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&delete_device_server_response__descriptor) \
, NULL }


/*
 * Nhận được yêu cầu đăng ký thiết bị sản xuất
 */
struct  RegisterDeviceServerRequest
{
  ProtobufCMessage base;
  /*
   * Mã sản xuất
   */
  char *mantoken;
  /*
   * HardwareId của thiết bị cần đăng ký
   */
  char *hardwareid;
  /*
   * Model
   */
  char *model;
  /*
   * Firmware
   */
  char *firmware;
};
#define REGISTER_DEVICE_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&register_device_server_request__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/*
 * Phản hồi đăng ký thiết bị sản xuất
 */
struct  RegisterDeviceServerResponse
{
  ProtobufCMessage base;
  char *hardwareid;
  char *devicetoken;
  char *wsenpoint;
  DataType datatype;
  StatusCode *statuscode;
};
#define REGISTER_DEVICE_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&register_device_server_response__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, DATA_TYPE__BINARIES, NULL }


/*
 * [Deprecated]
 * Phản hồi content firmware theo packed cho thiết bị
 */
struct  DownloadFirmwareOnChangedDeviceServerResponse
{
  ProtobufCMessage base;
  /*
   * DeviceId cho việc đồng bộ tài khoản nhiều thiết bị
   */
  char *deviceid;
  /*
   * HardwareId thiết bị khi qua Root
   */
  char *hardwareid;
  /*
   * Bytes data
   */
  ProtobufCBinaryData data;
  /*
   *  Kích cỡ thực của dữ liệu trả về
   */
  uint32_t datasize;
  /*
   * Vị trí index hiện tại bắt đầu từ 0
   */
  uint32_t pageindex;
  /*
   * Tổng page
   */
  uint32_t totalpage;
  /*
   * Kích cỡ của array buffer(default = 1024)
   */
  uint32_t pagesize;
  /*
   * Kích cỡ file đơn vị là byte
   */
  uint32_t filesize;
  StatusCode *statuscode;
};
#define DOWNLOAD_FIRMWARE_ON_CHANGED_DEVICE_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&download_firmware_on_changed_device_server_response__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, {0,NULL}, 0, 0, 0, 0, 0, NULL }


/*
 ***** Đóng gói ServerMessage ****
 */
struct  AuthServerMessage
{
  ProtobufCMessage base;
  LoginServerRequest *loginserverrequest;
  LoginServerResponse *loginserverresponse;
};
#define AUTH_SERVER_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&auth_server_message__descriptor) \
, NULL, NULL }


/*
 * Thiết bị đăng ký WiFi 
 */
struct  DeviceServerMessage
{
  ProtobufCMessage base;
  AddDevicesServerRequest *adddevicesserverrequest;
  AddDevicesServerResponse *adddevicesserverresponse;
  DeleteDeviceServerRequest *deletedeviceserverrequest;
  DeleteDeviceServerResponse *deletedeviceserverresponse;
  RegisterDeviceServerRequest *registerdeviceserverrequest;
  RegisterDeviceServerResponse *registerdeviceserverresponse;
};
#define DEVICE_SERVER_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&device_server_message__descriptor) \
, NULL, NULL, NULL, NULL, NULL, NULL }


/*
 * Events runtime từ server gửi về 
 */
struct  OnChangedServerMessage
{
  ProtobufCMessage base;
  /*
   * [Deprecated]
   */
  DownloadFirmwareOnChangedDeviceServerResponse *downloadfirmwareonchangeddeviceserverresponse;
};
#define ON_CHANGED_SERVER_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&on_changed_server_message__descriptor) \
, NULL }


struct  ServerMessage
{
  ProtobufCMessage base;
  AuthServerMessage *authservermessage;
  DeviceServerMessage *deviceservermessage;
  OnChangedServerMessage *onchangedservermessage;
};
#define SERVER_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&server_message__descriptor) \
, NULL, NULL, NULL }


/*
 ***** MainMessage ****
 */
struct  MainMessage
{
  ProtobufCMessage base;
  ServerMessage *servermessage;
  ClientMessage *clientmessage;
  MeshMessage *meshmessage;
};
#define MAIN_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&main_message__descriptor) \
, NULL, NULL, NULL }


/* LoginServerRequest methods */
void   login_server_request__init
                     (LoginServerRequest         *message);
size_t login_server_request__get_packed_size
                     (const LoginServerRequest   *message);
size_t login_server_request__pack
                     (const LoginServerRequest   *message,
                      uint8_t             *out);
size_t login_server_request__pack_to_buffer
                     (const LoginServerRequest   *message,
                      ProtobufCBuffer     *buffer);
LoginServerRequest *
       login_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   login_server_request__free_unpacked
                     (LoginServerRequest *message,
                      ProtobufCAllocator *allocator);
/* LoginServerResponse methods */
void   login_server_response__init
                     (LoginServerResponse         *message);
size_t login_server_response__get_packed_size
                     (const LoginServerResponse   *message);
size_t login_server_response__pack
                     (const LoginServerResponse   *message,
                      uint8_t             *out);
size_t login_server_response__pack_to_buffer
                     (const LoginServerResponse   *message,
                      ProtobufCBuffer     *buffer);
LoginServerResponse *
       login_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   login_server_response__free_unpacked
                     (LoginServerResponse *message,
                      ProtobufCAllocator *allocator);
/* AddDevicesServerRequest methods */
void   add_devices_server_request__init
                     (AddDevicesServerRequest         *message);
size_t add_devices_server_request__get_packed_size
                     (const AddDevicesServerRequest   *message);
size_t add_devices_server_request__pack
                     (const AddDevicesServerRequest   *message,
                      uint8_t             *out);
size_t add_devices_server_request__pack_to_buffer
                     (const AddDevicesServerRequest   *message,
                      ProtobufCBuffer     *buffer);
AddDevicesServerRequest *
       add_devices_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   add_devices_server_request__free_unpacked
                     (AddDevicesServerRequest *message,
                      ProtobufCAllocator *allocator);
/* AddDevicesServerResponse methods */
void   add_devices_server_response__init
                     (AddDevicesServerResponse         *message);
size_t add_devices_server_response__get_packed_size
                     (const AddDevicesServerResponse   *message);
size_t add_devices_server_response__pack
                     (const AddDevicesServerResponse   *message,
                      uint8_t             *out);
size_t add_devices_server_response__pack_to_buffer
                     (const AddDevicesServerResponse   *message,
                      ProtobufCBuffer     *buffer);
AddDevicesServerResponse *
       add_devices_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   add_devices_server_response__free_unpacked
                     (AddDevicesServerResponse *message,
                      ProtobufCAllocator *allocator);
/* DeleteDeviceServerRequest methods */
void   delete_device_server_request__init
                     (DeleteDeviceServerRequest         *message);
size_t delete_device_server_request__get_packed_size
                     (const DeleteDeviceServerRequest   *message);
size_t delete_device_server_request__pack
                     (const DeleteDeviceServerRequest   *message,
                      uint8_t             *out);
size_t delete_device_server_request__pack_to_buffer
                     (const DeleteDeviceServerRequest   *message,
                      ProtobufCBuffer     *buffer);
DeleteDeviceServerRequest *
       delete_device_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   delete_device_server_request__free_unpacked
                     (DeleteDeviceServerRequest *message,
                      ProtobufCAllocator *allocator);
/* DeleteDeviceServerResponse methods */
void   delete_device_server_response__init
                     (DeleteDeviceServerResponse         *message);
size_t delete_device_server_response__get_packed_size
                     (const DeleteDeviceServerResponse   *message);
size_t delete_device_server_response__pack
                     (const DeleteDeviceServerResponse   *message,
                      uint8_t             *out);
size_t delete_device_server_response__pack_to_buffer
                     (const DeleteDeviceServerResponse   *message,
                      ProtobufCBuffer     *buffer);
DeleteDeviceServerResponse *
       delete_device_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   delete_device_server_response__free_unpacked
                     (DeleteDeviceServerResponse *message,
                      ProtobufCAllocator *allocator);
/* RegisterDeviceServerRequest methods */
void   register_device_server_request__init
                     (RegisterDeviceServerRequest         *message);
size_t register_device_server_request__get_packed_size
                     (const RegisterDeviceServerRequest   *message);
size_t register_device_server_request__pack
                     (const RegisterDeviceServerRequest   *message,
                      uint8_t             *out);
size_t register_device_server_request__pack_to_buffer
                     (const RegisterDeviceServerRequest   *message,
                      ProtobufCBuffer     *buffer);
RegisterDeviceServerRequest *
       register_device_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   register_device_server_request__free_unpacked
                     (RegisterDeviceServerRequest *message,
                      ProtobufCAllocator *allocator);
/* RegisterDeviceServerResponse methods */
void   register_device_server_response__init
                     (RegisterDeviceServerResponse         *message);
size_t register_device_server_response__get_packed_size
                     (const RegisterDeviceServerResponse   *message);
size_t register_device_server_response__pack
                     (const RegisterDeviceServerResponse   *message,
                      uint8_t             *out);
size_t register_device_server_response__pack_to_buffer
                     (const RegisterDeviceServerResponse   *message,
                      ProtobufCBuffer     *buffer);
RegisterDeviceServerResponse *
       register_device_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   register_device_server_response__free_unpacked
                     (RegisterDeviceServerResponse *message,
                      ProtobufCAllocator *allocator);
/* DownloadFirmwareOnChangedDeviceServerResponse methods */
void   download_firmware_on_changed_device_server_response__init
                     (DownloadFirmwareOnChangedDeviceServerResponse         *message);
size_t download_firmware_on_changed_device_server_response__get_packed_size
                     (const DownloadFirmwareOnChangedDeviceServerResponse   *message);
size_t download_firmware_on_changed_device_server_response__pack
                     (const DownloadFirmwareOnChangedDeviceServerResponse   *message,
                      uint8_t             *out);
size_t download_firmware_on_changed_device_server_response__pack_to_buffer
                     (const DownloadFirmwareOnChangedDeviceServerResponse   *message,
                      ProtobufCBuffer     *buffer);
DownloadFirmwareOnChangedDeviceServerResponse *
       download_firmware_on_changed_device_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   download_firmware_on_changed_device_server_response__free_unpacked
                     (DownloadFirmwareOnChangedDeviceServerResponse *message,
                      ProtobufCAllocator *allocator);
/* AuthServerMessage methods */
void   auth_server_message__init
                     (AuthServerMessage         *message);
size_t auth_server_message__get_packed_size
                     (const AuthServerMessage   *message);
size_t auth_server_message__pack
                     (const AuthServerMessage   *message,
                      uint8_t             *out);
size_t auth_server_message__pack_to_buffer
                     (const AuthServerMessage   *message,
                      ProtobufCBuffer     *buffer);
AuthServerMessage *
       auth_server_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   auth_server_message__free_unpacked
                     (AuthServerMessage *message,
                      ProtobufCAllocator *allocator);
/* DeviceServerMessage methods */
void   device_server_message__init
                     (DeviceServerMessage         *message);
size_t device_server_message__get_packed_size
                     (const DeviceServerMessage   *message);
size_t device_server_message__pack
                     (const DeviceServerMessage   *message,
                      uint8_t             *out);
size_t device_server_message__pack_to_buffer
                     (const DeviceServerMessage   *message,
                      ProtobufCBuffer     *buffer);
DeviceServerMessage *
       device_server_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   device_server_message__free_unpacked
                     (DeviceServerMessage *message,
                      ProtobufCAllocator *allocator);
/* OnChangedServerMessage methods */
void   on_changed_server_message__init
                     (OnChangedServerMessage         *message);
size_t on_changed_server_message__get_packed_size
                     (const OnChangedServerMessage   *message);
size_t on_changed_server_message__pack
                     (const OnChangedServerMessage   *message,
                      uint8_t             *out);
size_t on_changed_server_message__pack_to_buffer
                     (const OnChangedServerMessage   *message,
                      ProtobufCBuffer     *buffer);
OnChangedServerMessage *
       on_changed_server_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   on_changed_server_message__free_unpacked
                     (OnChangedServerMessage *message,
                      ProtobufCAllocator *allocator);
/* ServerMessage methods */
void   server_message__init
                     (ServerMessage         *message);
size_t server_message__get_packed_size
                     (const ServerMessage   *message);
size_t server_message__pack
                     (const ServerMessage   *message,
                      uint8_t             *out);
size_t server_message__pack_to_buffer
                     (const ServerMessage   *message,
                      ProtobufCBuffer     *buffer);
ServerMessage *
       server_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   server_message__free_unpacked
                     (ServerMessage *message,
                      ProtobufCAllocator *allocator);
/* MainMessage methods */
void   main_message__init
                     (MainMessage         *message);
size_t main_message__get_packed_size
                     (const MainMessage   *message);
size_t main_message__pack
                     (const MainMessage   *message,
                      uint8_t             *out);
size_t main_message__pack_to_buffer
                     (const MainMessage   *message,
                      ProtobufCBuffer     *buffer);
MainMessage *
       main_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   main_message__free_unpacked
                     (MainMessage *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*LoginServerRequest_Closure)
                 (const LoginServerRequest *message,
                  void *closure_data);
typedef void (*LoginServerResponse_Closure)
                 (const LoginServerResponse *message,
                  void *closure_data);
typedef void (*AddDevicesServerRequest_Closure)
                 (const AddDevicesServerRequest *message,
                  void *closure_data);
typedef void (*AddDevicesServerResponse_Closure)
                 (const AddDevicesServerResponse *message,
                  void *closure_data);
typedef void (*DeleteDeviceServerRequest_Closure)
                 (const DeleteDeviceServerRequest *message,
                  void *closure_data);
typedef void (*DeleteDeviceServerResponse_Closure)
                 (const DeleteDeviceServerResponse *message,
                  void *closure_data);
typedef void (*RegisterDeviceServerRequest_Closure)
                 (const RegisterDeviceServerRequest *message,
                  void *closure_data);
typedef void (*RegisterDeviceServerResponse_Closure)
                 (const RegisterDeviceServerResponse *message,
                  void *closure_data);
typedef void (*DownloadFirmwareOnChangedDeviceServerResponse_Closure)
                 (const DownloadFirmwareOnChangedDeviceServerResponse *message,
                  void *closure_data);
typedef void (*AuthServerMessage_Closure)
                 (const AuthServerMessage *message,
                  void *closure_data);
typedef void (*DeviceServerMessage_Closure)
                 (const DeviceServerMessage *message,
                  void *closure_data);
typedef void (*OnChangedServerMessage_Closure)
                 (const OnChangedServerMessage *message,
                  void *closure_data);
typedef void (*ServerMessage_Closure)
                 (const ServerMessage *message,
                  void *closure_data);
typedef void (*MainMessage_Closure)
                 (const MainMessage *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor login_server_request__descriptor;
extern const ProtobufCMessageDescriptor login_server_response__descriptor;
extern const ProtobufCMessageDescriptor add_devices_server_request__descriptor;
extern const ProtobufCMessageDescriptor add_devices_server_response__descriptor;
extern const ProtobufCMessageDescriptor delete_device_server_request__descriptor;
extern const ProtobufCMessageDescriptor delete_device_server_response__descriptor;
extern const ProtobufCMessageDescriptor register_device_server_request__descriptor;
extern const ProtobufCMessageDescriptor register_device_server_response__descriptor;
extern const ProtobufCMessageDescriptor download_firmware_on_changed_device_server_response__descriptor;
extern const ProtobufCMessageDescriptor auth_server_message__descriptor;
extern const ProtobufCMessageDescriptor device_server_message__descriptor;
extern const ProtobufCMessageDescriptor on_changed_server_message__descriptor;
extern const ProtobufCMessageDescriptor server_message__descriptor;
extern const ProtobufCMessageDescriptor main_message__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_client_2dmain_2dmessage_2eproto__INCLUDED */
