/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: server-message.proto */

#ifndef PROTOBUF_C_server_2dmessage_2eproto__INCLUDED
#define PROTOBUF_C_server_2dmessage_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "common-message.pb-c.h"
#include "client-message.pb-c.h"

typedef struct LoginServerRequest LoginServerRequest;
typedef struct LoginServerResponse LoginServerResponse;
typedef struct RefreshTokenServerRequest RefreshTokenServerRequest;
typedef struct RefreshTokenServerResponse RefreshTokenServerResponse;
typedef struct SendCodeServerRequest SendCodeServerRequest;
typedef struct SendCodeServerResponse SendCodeServerResponse;
typedef struct VerifyCodeServerRequest VerifyCodeServerRequest;
typedef struct VerifyCodeServerResponse VerifyCodeServerResponse;
typedef struct GetUserInfoServerRequest GetUserInfoServerRequest;
typedef struct GetUserInfoServerResponse GetUserInfoServerResponse;
typedef struct UpdateUserInfoServerRequest UpdateUserInfoServerRequest;
typedef struct UpdateUserInfoServerResponse UpdateUserInfoServerResponse;
typedef struct SetOnesignalForUserServerRequest SetOnesignalForUserServerRequest;
typedef struct SetOnesignalForUserServerResponse SetOnesignalForUserServerResponse;
typedef struct ChangedHomeForUserServerRequest ChangedHomeForUserServerRequest;
typedef struct ChangedHomeForUserServerResponse ChangedHomeForUserServerResponse;
typedef struct GetUsersServerRequest GetUsersServerRequest;
typedef struct GetUsersServerResponse GetUsersServerResponse;
typedef struct SearchUserServerRequest SearchUserServerRequest;
typedef struct SearchUserServerResponse SearchUserServerResponse;
typedef struct AvatarUploadServerRequest AvatarUploadServerRequest;
typedef struct AvatarUploadServerResponse AvatarUploadServerResponse;
typedef struct GetUserOtpServerRequest GetUserOtpServerRequest;
typedef struct GetUserOtpServerResponse GetUserOtpServerResponse;
typedef struct GetHomesServerRequest GetHomesServerRequest;
typedef struct GetHomesServerResponse GetHomesServerResponse;
typedef struct AddHomeServerRequest AddHomeServerRequest;
typedef struct AddHomeServerResponse AddHomeServerResponse;
typedef struct UpdateHomeServerRequest UpdateHomeServerRequest;
typedef struct UpdateHomeServerResponse UpdateHomeServerResponse;
typedef struct DeleteHomeServerRequest DeleteHomeServerRequest;
typedef struct DeleteHomeServerResponse DeleteHomeServerResponse;
typedef struct GetCitizenInfoServerRequest GetCitizenInfoServerRequest;
typedef struct GetCitizenInfoServerResponse GetCitizenInfoServerResponse;
typedef struct SetCitizenServerRequest SetCitizenServerRequest;
typedef struct SetCitizenServerResponse SetCitizenServerResponse;
typedef struct SetGpsForHomeServerRequest SetGpsForHomeServerRequest;
typedef struct SetGpsForHomeServerResponse SetGpsForHomeServerResponse;
typedef struct GetHomeInfoServerRequest GetHomeInfoServerRequest;
typedef struct GetHomeInfoServerResponse GetHomeInfoServerResponse;
typedef struct GetHomesByPhoneServerRequest GetHomesByPhoneServerRequest;
typedef struct GetHomesByPhoneServerResponse GetHomesByPhoneServerResponse;
typedef struct UploadHomeBackgroundServerRequest UploadHomeBackgroundServerRequest;
typedef struct UploadHomeBackgroundServerResponse UploadHomeBackgroundServerResponse;
typedef struct GetRoomsServerRequest GetRoomsServerRequest;
typedef struct GetRoomsServerResponse GetRoomsServerResponse;
typedef struct AddRoomServerRequest AddRoomServerRequest;
typedef struct AddRoomServerResponse AddRoomServerResponse;
typedef struct DeleteRoomServerRequest DeleteRoomServerRequest;
typedef struct DeleteRoomServerResponse DeleteRoomServerResponse;
typedef struct UpdateRoomServerRequest UpdateRoomServerRequest;
typedef struct UpdateRoomServerResponse UpdateRoomServerResponse;
typedef struct UploadRoomBackgroundServerRequest UploadRoomBackgroundServerRequest;
typedef struct UploadRoomBackgroundServerResponse UploadRoomBackgroundServerResponse;
typedef struct GetDevicesServerRequest GetDevicesServerRequest;
typedef struct GetDevicesServerResponse GetDevicesServerResponse;
typedef struct GetDeviceServerRequest GetDeviceServerRequest;
typedef struct GetDeviceServerResponse GetDeviceServerResponse;
typedef struct AddDevicesServerRequest AddDevicesServerRequest;
typedef struct AddDevicesServerResponse AddDevicesServerResponse;
typedef struct UpdateDeviceServerRequest UpdateDeviceServerRequest;
typedef struct UpdateDeviceServerResponse UpdateDeviceServerResponse;
typedef struct DeleteDeviceServerRequest DeleteDeviceServerRequest;
typedef struct DeleteDeviceServerResponse DeleteDeviceServerResponse;
typedef struct GetFirmwareLatestDeviceServerRequest GetFirmwareLatestDeviceServerRequest;
typedef struct GetFirmwareLatestDeviceServerResponse GetFirmwareLatestDeviceServerResponse;
typedef struct DownloadFirmwareDeviceServerRequest DownloadFirmwareDeviceServerRequest;
typedef struct DownloadFirmwareDeviceServerResponse DownloadFirmwareDeviceServerResponse;
typedef struct ForceUpdateFirmwareDeviceServerRequest ForceUpdateFirmwareDeviceServerRequest;
typedef struct ForceUpdateFirmwareDeviceServerResponse ForceUpdateFirmwareDeviceServerResponse;
typedef struct RegisterDeviceServerRequest RegisterDeviceServerRequest;
typedef struct RegisterDeviceServerResponse RegisterDeviceServerResponse;
typedef struct UpdateWSEndpointDeviceServerRequest UpdateWSEndpointDeviceServerRequest;
typedef struct UpdateWSEndpointDeviceServerResponse UpdateWSEndpointDeviceServerResponse;
typedef struct ForceUpdateFirmwareAllDevicesByPhoneServerRequest ForceUpdateFirmwareAllDevicesByPhoneServerRequest;
typedef struct ForceUpdateFirmwareAllDevicesByPhoneServerResponse ForceUpdateFirmwareAllDevicesByPhoneServerResponse;
typedef struct ListSceneDeviceServerRequest ListSceneDeviceServerRequest;
typedef struct ListSceneDeviceServerResponse ListSceneDeviceServerResponse;
typedef struct GetSwitchersServerRequest GetSwitchersServerRequest;
typedef struct GetSwitchersServerResponse GetSwitchersServerResponse;
typedef struct GetSwitcherServerRequest GetSwitcherServerRequest;
typedef struct GetSwitcherServerResponse GetSwitcherServerResponse;
typedef struct GetLogSwitcherServerRequest GetLogSwitcherServerRequest;
typedef struct GetLogSwitcherServerResponse GetLogSwitcherServerResponse;
typedef struct GetIconSwitchersServerRequest GetIconSwitchersServerRequest;
typedef struct GetIconSwitchersServerResponse GetIconSwitchersServerResponse;
typedef struct UpdateSwitcherServerRequest UpdateSwitcherServerRequest;
typedef struct UpdateSwitcherServerResponse UpdateSwitcherServerResponse;
typedef struct SwitcherServerRequest SwitcherServerRequest;
typedef struct SwitcherServerResponse SwitcherServerResponse;
typedef struct GetSwitcherSchedulesServerRequest GetSwitcherSchedulesServerRequest;
typedef struct GetSwitcherSchedulesServerResponse GetSwitcherSchedulesServerResponse;
typedef struct GetSwitcherScheduleServerRequest GetSwitcherScheduleServerRequest;
typedef struct GetSwitcherScheduleServerResponse GetSwitcherScheduleServerResponse;
typedef struct GetCountSwitcherScheduleServerRequest GetCountSwitcherScheduleServerRequest;
typedef struct GetCountSwitcherScheduleServerResponse GetCountSwitcherScheduleServerResponse;
typedef struct AddSwitcherScheduleServerRequest AddSwitcherScheduleServerRequest;
typedef struct AddSwitcherScheduleServerResponse AddSwitcherScheduleServerResponse;
typedef struct UpdateSwitcherScheduleServerRequest UpdateSwitcherScheduleServerRequest;
typedef struct UpdateSwitcherScheduleServerResponse UpdateSwitcherScheduleServerResponse;
typedef struct DeleteSwitcherScheduleServerRequest DeleteSwitcherScheduleServerRequest;
typedef struct DeleteSwitcherScheduleServerResponse DeleteSwitcherScheduleServerResponse;
typedef struct SetActiveSwitcherScheduleServerRequest SetActiveSwitcherScheduleServerRequest;
typedef struct SetActiveSwitcherScheduleServerResponse SetActiveSwitcherScheduleServerResponse;
typedef struct GetCurtainSwitcherServerRequest GetCurtainSwitcherServerRequest;
typedef struct GetCurtainSwitcherServerResponse GetCurtainSwitcherServerResponse;
typedef struct UpdateCurtainSwitcherServerRequest UpdateCurtainSwitcherServerRequest;
typedef struct UpdateCurtainSwitcherServerResponse UpdateCurtainSwitcherServerResponse;
typedef struct GetCurtainSwitcherStateServerRequest GetCurtainSwitcherStateServerRequest;
typedef struct GetCurtainSwitcherStateServerResponse GetCurtainSwitcherStateServerResponse;
typedef struct CurtainSwitcherServerRequest CurtainSwitcherServerRequest;
typedef struct CurtainSwitcherServerResponse CurtainSwitcherServerResponse;
typedef struct GetCurtainSwitcherSchedulesServerRequest GetCurtainSwitcherSchedulesServerRequest;
typedef struct GetCurtainSwitcherSchedulesServerResponse GetCurtainSwitcherSchedulesServerResponse;
typedef struct GetCurtainSwitcherScheduleServerRequest GetCurtainSwitcherScheduleServerRequest;
typedef struct GetCurtainSwitcherScheduleServerResponse GetCurtainSwitcherScheduleServerResponse;
typedef struct GetCountCurtainSwitcherScheduleServerRequest GetCountCurtainSwitcherScheduleServerRequest;
typedef struct GetCountCurtainSwitcherScheduleServerResponse GetCountCurtainSwitcherScheduleServerResponse;
typedef struct AddCurtainSwitcherScheduleServerRequest AddCurtainSwitcherScheduleServerRequest;
typedef struct AddCurtainSwitcherScheduleServerResponse AddCurtainSwitcherScheduleServerResponse;
typedef struct UpdateCurtainSwitcherScheduleServerRequest UpdateCurtainSwitcherScheduleServerRequest;
typedef struct UpdateCurtainSwitcherScheduleServerResponse UpdateCurtainSwitcherScheduleServerResponse;
typedef struct DeleteCurtainSwitcherScheduleServerRequest DeleteCurtainSwitcherScheduleServerRequest;
typedef struct DeleteCurtainSwitcherScheduleServerResponse DeleteCurtainSwitcherScheduleServerResponse;
typedef struct SetActiveCurtainSwitcherScheduleServerRequest SetActiveCurtainSwitcherScheduleServerRequest;
typedef struct SetActiveCurtainSwitcherScheduleServerResponse SetActiveCurtainSwitcherScheduleServerResponse;
typedef struct GetMeterServerRequest GetMeterServerRequest;
typedef struct GetMeterServerResponse GetMeterServerResponse;
typedef struct UpdateMeterServerRequest UpdateMeterServerRequest;
typedef struct UpdateMeterServerResponse UpdateMeterServerResponse;
typedef struct GetMeterEstimatesDayInMonthServerRequest GetMeterEstimatesDayInMonthServerRequest;
typedef struct GetMeterEstimatesDayInMonthServerResponse GetMeterEstimatesDayInMonthServerResponse;
typedef struct GetMeterEstimatesHourInDayServerRequest GetMeterEstimatesHourInDayServerRequest;
typedef struct GetMeterEstimatesHourInDayServerResponse GetMeterEstimatesHourInDayServerResponse;
typedef struct GetMetersByHomeIdServerRequest GetMetersByHomeIdServerRequest;
typedef struct GetMetersByHomeIdServerResponse GetMetersByHomeIdServerResponse;
typedef struct GetMeterMissingInDayServerRequest GetMeterMissingInDayServerRequest;
typedef struct GetMeterMissingInDayServerResponse GetMeterMissingInDayServerResponse;
typedef struct GetAirConditionerStateServerRequest GetAirConditionerStateServerRequest;
typedef struct GetAirConditionerStateServerResponse GetAirConditionerStateServerResponse;
typedef struct AirConditionerServerRequest AirConditionerServerRequest;
typedef struct AirConditionerServerResponse AirConditionerServerResponse;
typedef struct GetRemotesServerRequest GetRemotesServerRequest;
typedef struct GetRemotesServerResponse GetRemotesServerResponse;
typedef struct GetRemoteServerRequest GetRemoteServerRequest;
typedef struct GetRemoteServerResponse GetRemoteServerResponse;
typedef struct GetRemoteLibrariesServerRequest GetRemoteLibrariesServerRequest;
typedef struct GetRemoteLibrariesServerResponse GetRemoteLibrariesServerResponse;
typedef struct GetCommandsRemoteServerRequest GetCommandsRemoteServerRequest;
typedef struct GetCommandsRemoteServerResponse GetCommandsRemoteServerResponse;
typedef struct SendCommandRemoteServerRequest SendCommandRemoteServerRequest;
typedef struct SendCommandRemoteServerResponse SendCommandRemoteServerResponse;
typedef struct LearnCommandRemoteServerRequest LearnCommandRemoteServerRequest;
typedef struct LearnCommandRemoteServerResponse LearnCommandRemoteServerResponse;
typedef struct RestoreCommandRemoteServerRequest RestoreCommandRemoteServerRequest;
typedef struct RestoreCommandRemoteServerResponse RestoreCommandRemoteServerResponse;
typedef struct AddRemoteServerRequest AddRemoteServerRequest;
typedef struct AddRemoteServerResponse AddRemoteServerResponse;
typedef struct UpdateRemoteServerRequest UpdateRemoteServerRequest;
typedef struct UpdateRemoteServerResponse UpdateRemoteServerResponse;
typedef struct DeleteRemoteServerRequest DeleteRemoteServerRequest;
typedef struct DeleteRemoteServerResponse DeleteRemoteServerResponse;
typedef struct GetRemoteSchedulesServerRequest GetRemoteSchedulesServerRequest;
typedef struct GetRemoteSchedulesServerResponse GetRemoteSchedulesServerResponse;
typedef struct GetCountRemoteScheduleServerRequest GetCountRemoteScheduleServerRequest;
typedef struct GetCountRemoteScheduleServerResponse GetCountRemoteScheduleServerResponse;
typedef struct GetRemoteScheduleServerRequest GetRemoteScheduleServerRequest;
typedef struct GetRemoteScheduleServerResponse GetRemoteScheduleServerResponse;
typedef struct AddRemoteScheduleServerRequest AddRemoteScheduleServerRequest;
typedef struct AddRemoteScheduleServerResponse AddRemoteScheduleServerResponse;
typedef struct UpdateRemoteScheduleServerRequest UpdateRemoteScheduleServerRequest;
typedef struct UpdateRemoteScheduleServerResponse UpdateRemoteScheduleServerResponse;
typedef struct DeleteRemoteScheduleServerRequest DeleteRemoteScheduleServerRequest;
typedef struct DeleteRemoteScheduleServerResponse DeleteRemoteScheduleServerResponse;
typedef struct SetActiveRemoteScheduleServerRequest SetActiveRemoteScheduleServerRequest;
typedef struct SetActiveRemoteScheduleServerResponse SetActiveRemoteScheduleServerResponse;
typedef struct GetRemoteMultisServerRequest GetRemoteMultisServerRequest;
typedef struct GetRemoteMultisServerResponse GetRemoteMultisServerResponse;
typedef struct AddRemoteMultiServerRequest AddRemoteMultiServerRequest;
typedef struct AddRemoteMultiServerResponse AddRemoteMultiServerResponse;
typedef struct DeleteRemoteMultiServerRequest DeleteRemoteMultiServerRequest;
typedef struct DeleteRemoteMultiServerResponse DeleteRemoteMultiServerResponse;
typedef struct AddRemoteMultiLibraryCmdServerRequest AddRemoteMultiLibraryCmdServerRequest;
typedef struct AddRemoteMultiLibraryCmdServerResponse AddRemoteMultiLibraryCmdServerResponse;
typedef struct DeleteRemoteMultiLibraryCmdServerRequest DeleteRemoteMultiLibraryCmdServerRequest;
typedef struct DeleteRemoteMultiLibraryCmdServerResponse DeleteRemoteMultiLibraryCmdServerResponse;
typedef struct UpdateRemoteMultiLibraryCmdServerRequest UpdateRemoteMultiLibraryCmdServerRequest;
typedef struct UpdateRemoteMultiLibraryCmdServerResponse UpdateRemoteMultiLibraryCmdServerResponse;
typedef struct UpdateGroupRemoteMultiLibraryCmdServerRequest UpdateGroupRemoteMultiLibraryCmdServerRequest;
typedef struct UpdateGroupRemoteMultiLibraryCmdServerResponse UpdateGroupRemoteMultiLibraryCmdServerResponse;
typedef struct ChangeRemoteBrandRemoteRequest ChangeRemoteBrandRemoteRequest;
typedef struct ChangeRemoteBrandRemoteResponse ChangeRemoteBrandRemoteResponse;
typedef struct ControlRemoteACCommandRequest ControlRemoteACCommandRequest;
typedef struct ControlRemoteACCommandResponse ControlRemoteACCommandResponse;
typedef struct GetScenesServerRequest GetScenesServerRequest;
typedef struct GetScenesServerResponse GetScenesServerResponse;
typedef struct GetSceneServerRequest GetSceneServerRequest;
typedef struct GetSceneServerResponse GetSceneServerResponse;
typedef struct AddSceneServerRequest AddSceneServerRequest;
typedef struct AddSceneServerResponse AddSceneServerResponse;
typedef struct UpdateSceneServerRequest UpdateSceneServerRequest;
typedef struct UpdateSceneServerResponse UpdateSceneServerResponse;
typedef struct DeleteSceneServerRequest DeleteSceneServerRequest;
typedef struct DeleteSceneServerResponse DeleteSceneServerResponse;
typedef struct DeleteSwitcherConditionServerRequest DeleteSwitcherConditionServerRequest;
typedef struct DeleteSwitcherConditionServerResponse DeleteSwitcherConditionServerResponse;
typedef struct DeleteSceneActionServerRequest DeleteSceneActionServerRequest;
typedef struct DeleteSceneActionServerResponse DeleteSceneActionServerResponse;
typedef struct RunSceneServerRequest RunSceneServerRequest;
typedef struct RunSceneServerResponse RunSceneServerResponse;
typedef struct SceneServerRequest SceneServerRequest;
typedef struct SceneServerResponse SceneServerResponse;
typedef struct SceneRetryConfirmServerRequest SceneRetryConfirmServerRequest;
typedef struct SceneRetryConfirmServerResponse SceneRetryConfirmServerResponse;
typedef struct SetSceneStatusServerRequest SetSceneStatusServerRequest;
typedef struct SetSceneStatusServerResponse SetSceneStatusServerResponse;
typedef struct TestSceneServerRequest TestSceneServerRequest;
typedef struct TestSceneServerResponse TestSceneServerResponse;
typedef struct SceneTriggerServerRequest SceneTriggerServerRequest;
typedef struct SceneTriggerServerResponse SceneTriggerServerResponse;
typedef struct GetHomeTabServerRequest GetHomeTabServerRequest;
typedef struct GetHomeTabServerResponse GetHomeTabServerResponse;
typedef struct GetElectricTabServerRequest GetElectricTabServerRequest;
typedef struct GetElectricTabServerResponse GetElectricTabServerResponse;
typedef struct GetSwitcherTabServerRequest GetSwitcherTabServerRequest;
typedef struct GetSwitcherTabServerResponse GetSwitcherTabServerResponse;
typedef struct SwitcherOnChangedServerResponse SwitcherOnChangedServerResponse;
typedef struct CurtainSwitcherOnChangedServerResponse CurtainSwitcherOnChangedServerResponse;
typedef struct AirConditionerOnChangedServerResponse AirConditionerOnChangedServerResponse;
typedef struct RemoteOnChangedServerResponse RemoteOnChangedServerResponse;
typedef struct MeterOnChangedServerResponse MeterOnChangedServerResponse;
typedef struct DeviceOnChangedDeviceServerResponse DeviceOnChangedDeviceServerResponse;
typedef struct ProgressUpdateFirmwareOnChangedDeviceServerResponse ProgressUpdateFirmwareOnChangedDeviceServerResponse;
typedef struct DownloadFirmwareOnChangedDeviceServerResponse DownloadFirmwareOnChangedDeviceServerResponse;
typedef struct MotionOnChangedServerResponse MotionOnChangedServerResponse;
typedef struct SceneOnChangedServerResponse SceneOnChangedServerResponse;
typedef struct HomekitOnChangedServerResponse HomekitOnChangedServerResponse;
typedef struct ButtonOnChangedServerResponse ButtonOnChangedServerResponse;
typedef struct GroupControlOnChangedServerResponse GroupControlOnChangedServerResponse;
typedef struct LedDriverOnChangedServerResponse LedDriverOnChangedServerResponse;
typedef struct EnvironmentSensorOnChangedServerResponse EnvironmentSensorOnChangedServerResponse;
typedef struct SmartPlugOnChangedServerResponse SmartPlugOnChangedServerResponse;
typedef struct CurtainOnChangedServerResponse CurtainOnChangedServerResponse;
typedef struct EchoServerRequest EchoServerRequest;
typedef struct EchoServerResponse EchoServerResponse;
typedef struct MotionServerRequest MotionServerRequest;
typedef struct MotionServerResponse MotionServerResponse;
typedef struct GetMotionServerRequest GetMotionServerRequest;
typedef struct GetMotionServerResponse GetMotionServerResponse;
typedef struct UpdateMotionServerRequest UpdateMotionServerRequest;
typedef struct UpdateMotionServerResponse UpdateMotionServerResponse;
typedef struct GetHomekitInfoServerRequest GetHomekitInfoServerRequest;
typedef struct GetHomekitInfoServerResponse GetHomekitInfoServerResponse;
typedef struct UpdateHomekitServerRequest UpdateHomekitServerRequest;
typedef struct UpdateHomekitServerResponse UpdateHomekitServerResponse;
typedef struct SetHomekitModeServerRequest SetHomekitModeServerRequest;
typedef struct SetHomekitModeServerResponse SetHomekitModeServerResponse;
typedef struct GetProjectsServerRequest GetProjectsServerRequest;
typedef struct GetProjectsServerResponse GetProjectsServerResponse;
typedef struct GetBuildingsServerRequest GetBuildingsServerRequest;
typedef struct GetBuildingsServerResponse GetBuildingsServerResponse;
typedef struct GetFloorsServerRequest GetFloorsServerRequest;
typedef struct GetFloorsServerResponse GetFloorsServerResponse;
typedef struct GetApartmentsServerRequest GetApartmentsServerRequest;
typedef struct GetApartmentsServerResponse GetApartmentsServerResponse;
typedef struct AddUserHomeServerRequest AddUserHomeServerRequest;
typedef struct AddUserHomeServerResponse AddUserHomeServerResponse;
typedef struct DeleteUserHomeServerRequest DeleteUserHomeServerRequest;
typedef struct DeleteUserHomeServerResponse DeleteUserHomeServerResponse;
typedef struct GetUnreadServerRequest GetUnreadServerRequest;
typedef struct GetUnreadServerResponse GetUnreadServerResponse;
typedef struct SetReadServerRequest SetReadServerRequest;
typedef struct SetReadServerResponse SetReadServerResponse;
typedef struct GetBackgroundsServerRequest GetBackgroundsServerRequest;
typedef struct GetBackgroundsServerResponse GetBackgroundsServerResponse;
typedef struct GetAutoOffsServerRequest GetAutoOffsServerRequest;
typedef struct GetAutoOffsServerResponse GetAutoOffsServerResponse;
typedef struct GetTypeDevicesServerRequest GetTypeDevicesServerRequest;
typedef struct GetTypeDevicesServerResponse GetTypeDevicesServerResponse;
typedef struct GetButtonInfoServerRequest GetButtonInfoServerRequest;
typedef struct GetButtonInfoServerResponse GetButtonInfoServerResponse;
typedef struct UpdateButtonServerRequest UpdateButtonServerRequest;
typedef struct UpdateButtonServerResponse UpdateButtonServerResponse;
typedef struct GroupControlServerRequest GroupControlServerRequest;
typedef struct GroupControlServerResponse GroupControlServerResponse;
typedef struct GetGroupControlInfoServerRequest GetGroupControlInfoServerRequest;
typedef struct GetGroupControlInfoServerResponse GetGroupControlInfoServerResponse;
typedef struct GetControlsServerRequest GetControlsServerRequest;
typedef struct GetControlsServerResponse GetControlsServerResponse;
typedef struct AddGroupControlServerRequest AddGroupControlServerRequest;
typedef struct AddGroupControlServerResponse AddGroupControlServerResponse;
typedef struct UpdateGroupControlServerRequest UpdateGroupControlServerRequest;
typedef struct UpdateGroupControlServerResponse UpdateGroupControlServerResponse;
typedef struct DeleteGroupControlServerRequest DeleteGroupControlServerRequest;
typedef struct DeleteGroupControlServerResponse DeleteGroupControlServerResponse;
typedef struct LedDriverServerRequest LedDriverServerRequest;
typedef struct LedDriverServerResponse LedDriverServerResponse;
typedef struct GetLedDriverServerRequest GetLedDriverServerRequest;
typedef struct GetLedDriverServerResponse GetLedDriverServerResponse;
typedef struct GetLedDriverItemServerRequest GetLedDriverItemServerRequest;
typedef struct GetLedDriverItemServerResponse GetLedDriverItemServerResponse;
typedef struct UpdateLedDriverServerRequest UpdateLedDriverServerRequest;
typedef struct UpdateLedDriverServerResponse UpdateLedDriverServerResponse;
typedef struct UpdateLedDriverItemServerRequest UpdateLedDriverItemServerRequest;
typedef struct UpdateLedDriverItemServerResponse UpdateLedDriverItemServerResponse;
typedef struct TouchPanelChangeComponentServerRequest TouchPanelChangeComponentServerRequest;
typedef struct TouchPanelControlSwitcherServerRequest TouchPanelControlSwitcherServerRequest;
typedef struct TouchPanelUpdateSwitcherServerRequest TouchPanelUpdateSwitcherServerRequest;
typedef struct TouchPanelControlCurtainSwitcherServerRequest TouchPanelControlCurtainSwitcherServerRequest;
typedef struct TouchPanelUpdateCurtainSwitcherServerRequest TouchPanelUpdateCurtainSwitcherServerRequest;
typedef struct TouchPanelUpdateSceneServerRequest TouchPanelUpdateSceneServerRequest;
typedef struct TouchPanelControlLedDriverServerRequest TouchPanelControlLedDriverServerRequest;
typedef struct TouchPanelUpdateLedDriverServerRequest TouchPanelUpdateLedDriverServerRequest;
typedef struct CurtainServerRequest CurtainServerRequest;
typedef struct CurtainServerResponse CurtainServerResponse;
typedef struct AuthServerMessage AuthServerMessage;
typedef struct UserServerMessage UserServerMessage;
typedef struct HomeServerMessage HomeServerMessage;
typedef struct RoomServerMessage RoomServerMessage;
typedef struct DeviceServerMessage DeviceServerMessage;
typedef struct SwitcherServerMessage SwitcherServerMessage;
typedef struct CurtainSwitcherServerMessage CurtainSwitcherServerMessage;
typedef struct MeterServerMessage MeterServerMessage;
typedef struct AirConditionerServerMessage AirConditionerServerMessage;
typedef struct RemoteServerMessage RemoteServerMessage;
typedef struct SceneServerMessage SceneServerMessage;
typedef struct GeneralTabServerMessage GeneralTabServerMessage;
typedef struct OnChangedServerMessage OnChangedServerMessage;
typedef struct SimulatorServerMessage SimulatorServerMessage;
typedef struct MotionServerMessage MotionServerMessage;
typedef struct HomekitServerMessage HomekitServerMessage;
typedef struct ProjectServerMessage ProjectServerMessage;
typedef struct BuildingServerMessage BuildingServerMessage;
typedef struct FloorServerMessage FloorServerMessage;
typedef struct ApartmentServerMessage ApartmentServerMessage;
typedef struct UserHomeServerMessage UserHomeServerMessage;
typedef struct InboxServerMessage InboxServerMessage;
typedef struct SettingServerMessage SettingServerMessage;
typedef struct ButtonServerMessage ButtonServerMessage;
typedef struct GroupControlServerMessage GroupControlServerMessage;
typedef struct LedDriverServerMessage LedDriverServerMessage;
typedef struct TouchPanelServerMessage TouchPanelServerMessage;
typedef struct CurtainServerMessage CurtainServerMessage;
typedef struct ServerMessage ServerMessage;


/* --- enums --- */


/* --- messages --- */

/*
 * Nhận được yêu cầu đăng nhập từ App hoặc Client
 */
struct  LoginServerRequest
{
  ProtobufCMessage base;
  /*
   * Dùng để đăng nhập cho App
   */
  char *accesstoken;
  /*
   * Dùng để đăng nhập cho App
   */
  char *facebooktoken;
  /*
   * Dùng để đăng nhập cho App
   */
  char *googletoken;
  /*
   * Dùng để đăng nhập cho Client
   */
  char *accesskey;
  /*
   * DeviceId của thiết bị
   */
  char *deviceid;
  /*
   * Hệ điều hành đăng nhập
   */
  char *loggedos;
  /*
   * Phiên bản hệ điều hành
   */
  char *versionos;
  /*
   * Ip đăng nhập
   */
  char *loggedip;
  /*
   * Domain thiết bị
   */
  char *mdns;
  /*
   * BrandnName
   */
  char *brandname;
  /*
   * Model
   */
  char *model;
  /*
   * Tín hiệu sóng, Lưu trên server?
   */
  int32_t signal;
  /*
   * Firmware Version
   */
  char *firmware;
  /*
   * Hardware Version
   */
  char *hardware;
  /*
   * Nhóm thiết bị công tắc, rèm cửa...
   */
  GroupDevice group;
  /*
   * hardwareId
   */
  char *hardwareid;
  /*
   * deviceToken
   */
  char *devicetoken;
  /*
   * gatewayId root
   */
  char *gatewayid;
  /*
   * Chế độ update của thiết bị
   */
  uint32_t updatemode;
  /*
   * Độ nhạy của thiết bị
   */
  uint32_t reactivity;
  /*
   * Độ sáng của thiết bị
   */
  uint32_t brightness;
  /*
   * Thời gian chờ để tắt PIR
   */
  uint32_t timedelay;
  /*
   * Vĩ độ
   */
  float latitude;
  /*
   * Kinh độ
   */
  float longitude;
  uint32_t sceneactivemap;
  /*
   * Xử lý điều kiển group device
   */
  uint32_t supportgroupcontrol;
  char *gatewaydeviceid;
};
#define LOGIN_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&login_server_request__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, GROUP_DEVICE__SwitcherGroup, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, 0, 0, 0, 0, 0, 0, 0, (char *)protobuf_c_empty_string }


/*
 * Phản hồi thông tin đăng nhập cho App hoặc Client
 */
struct  LoginServerResponse
{
  ProtobufCMessage base;
  char *userid;
  char *deviceid;
  char *accesstoken;
  char *refreshtoken;
  char *accesskey;
  /*
   * IP hoặc Domain Websocket
   */
  char *serverdomain;
  /*
   * Tên của ngôi nhà
   */
  Home *home;
  /*
   * keepalive
   */
  uint32_t keepalive;
  /*
   * Danh sách serialNumbers trả về cho thiết bị, để thiết bị đọc công tơ điện/nước
   */
  size_t n_serialnumbers;
  char **serialnumbers;
  /*
   * hardwareId
   */
  char *hardwareid;
  /*
   * Ngày đăng nhập - Unix Timestamp
   */
  uint64_t loggeddate;
  StatusCode *statuscode;
};
#define LOGIN_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&login_server_response__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, NULL, 0, 0,NULL, (char *)protobuf_c_empty_string, 0, NULL }


/*
 * Nhận được yêu cầu RefreshToken
 */
struct  RefreshTokenServerRequest
{
  ProtobufCMessage base;
  /*
   * Access Token cũ
   */
  char *accesstoken;
  /*
   * Dùng để RefreshToken cho App, User
   */
  char *refreshtoken;
};
#define REFRESH_TOKEN_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&refresh_token_server_request__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/*
 * Phản hồi RefreshToken
 */
struct  RefreshTokenServerResponse
{
  ProtobufCMessage base;
  char *accesstoken;
  char *refreshtoken;
  StatusCode *statuscode;
};
#define REFRESH_TOKEN_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&refresh_token_server_response__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, NULL }


/*
 * Nhận được yêu cầu gửi lại tin nhắn kích hoạt
 */
struct  SendCodeServerRequest
{
  ProtobufCMessage base;
  /*
   * Số điện thoại
   */
  char *phonenumber;
};
#define SEND_CODE_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&send_code_server_request__descriptor) \
, (char *)protobuf_c_empty_string }


/*
 * Phản hồi thông tin có được gửi mã kích hoạt
 */
struct  SendCodeServerResponse
{
  ProtobufCMessage base;
  /*
   * Mã kích hoạt
   */
  char *code;
  StatusCode *statuscode;
};
#define SEND_CODE_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&send_code_server_response__descriptor) \
, (char *)protobuf_c_empty_string, NULL }


/*
 * Nhận được yêu cầu kiểm tra mã kích hoạt bằng số điện thoại
 */
struct  VerifyCodeServerRequest
{
  ProtobufCMessage base;
  /*
   * Số điện thoại
   */
  char *phonenumber;
  /*
   * Mã kiểm tra
   */
  char *code;
};
#define VERIFY_CODE_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&verify_code_server_request__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/*
 * Phản hồi thông tin kiểm tra mã kích hoạt bằng số điện thoại
 */
struct  VerifyCodeServerResponse
{
  ProtobufCMessage base;
  /*
   * Dùng để đăng nhập cho App
   */
  char *accesstoken;
  StatusCode *statuscode;
};
#define VERIFY_CODE_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&verify_code_server_response__descriptor) \
, (char *)protobuf_c_empty_string, NULL }


/*
 * Nhận được yêu cầu trả về thông tin người dùng đã đăng nhập
 */
struct  GetUserInfoServerRequest
{
  ProtobufCMessage base;
};
#define GET_USER_INFO_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_user_info_server_request__descriptor) \
 }


/*
 * Phản hồi thông tin người dùng
 */
struct  GetUserInfoServerResponse
{
  ProtobufCMessage base;
  char *userid;
  ProtobufCBinaryData avatar;
  char *fullname;
  char *email;
  char *phonenumber;
  char *language;
  protobuf_c_boolean autoswitchgps;
  size_t n_homes;
  Home **homes;
  UserRole userrole;
  UserSetting *usersetting;
  char *appleid;
  char *facebookid;
  char *googleid;
  StatusCode *statuscode;
};
#define GET_USER_INFO_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_user_info_server_response__descriptor) \
, (char *)protobuf_c_empty_string, {0,NULL}, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, 0,NULL, USER_ROLE__NormalUser, NULL, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, NULL }


/*
 * Nhận được yêu cầu cập nhật hồ sơ của tài khoản
 */
struct  UpdateUserInfoServerRequest
{
  ProtobufCMessage base;
  ProtobufCBinaryData avatar;
  char *fullname;
  char *email;
  char *phonenumber;
  /*
   * Đánh dấu khi xóa avatar
   */
  protobuf_c_boolean markeddeleteavatar;
  char *language;
  protobuf_c_boolean autoswitchgps;
};
#define UPDATE_USER_INFO_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&update_user_info_server_request__descriptor) \
, {0,NULL}, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, (char *)protobuf_c_empty_string, 0 }


/*
 * Phản hồi thông tin cập nhật hồ sơ của tài khoản
 */
struct  UpdateUserInfoServerResponse
{
  ProtobufCMessage base;
  StatusCode *statuscode;
};
#define UPDATE_USER_INFO_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&update_user_info_server_response__descriptor) \
, NULL }


/*
 * Cập nhật thông báo Onesignal cho người dùng
 */
struct  SetOnesignalForUserServerRequest
{
  ProtobufCMessage base;
  char *onesignalid;
};
#define SET_ONESIGNAL_FOR_USER_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&set_onesignal_for_user_server_request__descriptor) \
, (char *)protobuf_c_empty_string }


/*
 * Phản hồi cập nhật thông báo Onesignal cho người dùng
 */
struct  SetOnesignalForUserServerResponse
{
  ProtobufCMessage base;
  StatusCode *statuscode;
};
#define SET_ONESIGNAL_FOR_USER_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&set_onesignal_for_user_server_response__descriptor) \
, NULL }


/*
 * Nhận được yêu cầu thay đổi nhà đã chọn
 */
struct  ChangedHomeForUserServerRequest
{
  ProtobufCMessage base;
  char *homeid;
};
#define CHANGED_HOME_FOR_USER_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&changed_home_for_user_server_request__descriptor) \
, (char *)protobuf_c_empty_string }


/*
 * Phản hồi thay đổi nhà đã chọn
 */
struct  ChangedHomeForUserServerResponse
{
  ProtobufCMessage base;
  char *homeid;
  StatusCode *statuscode;
};
#define CHANGED_HOME_FOR_USER_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&changed_home_for_user_server_response__descriptor) \
, (char *)protobuf_c_empty_string, NULL }


/*
 * Nhận được yêu cầu lấy danh sách người dùng
 */
struct  GetUsersServerRequest
{
  ProtobufCMessage base;
  char *search;
  uint64_t order;
  uint32_t pagesize;
};
#define GET_USERS_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_users_server_request__descriptor) \
, (char *)protobuf_c_empty_string, 0, 0 }


/*
 * Phản hồi danh sách người dùng
 */
struct  GetUsersServerResponse
{
  ProtobufCMessage base;
  size_t n_users;
  User **users;
  StatusCode *statuscode;
};
#define GET_USERS_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_users_server_response__descriptor) \
, 0,NULL, NULL }


/*
 * Nhận yêu cầu tìm kiếm user theo key
 */
struct  SearchUserServerRequest
{
  ProtobufCMessage base;
  char *search;
};
#define SEARCH_USER_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&search_user_server_request__descriptor) \
, (char *)protobuf_c_empty_string }


/*
 * Phản hồi yêu cầu tìm kiếm user theo key
 */
struct  SearchUserServerResponse
{
  ProtobufCMessage base;
  User *user;
  StatusCode *statuscode;
};
#define SEARCH_USER_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&search_user_server_response__descriptor) \
, NULL, NULL }


/*
 * Nhận yêu cầu tìm kiếm user theo key
 */
struct  AvatarUploadServerRequest
{
  ProtobufCMessage base;
  FileUploadForm *fileuploadform;
};
#define AVATAR_UPLOAD_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&avatar_upload_server_request__descriptor) \
, NULL }


/*
 * Phản hồi yêu cầu tìm kiếm user theo key
 */
struct  AvatarUploadServerResponse
{
  ProtobufCMessage base;
  char *imageurl;
  StatusCode *statuscode;
};
#define AVATAR_UPLOAD_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&avatar_upload_server_response__descriptor) \
, (char *)protobuf_c_empty_string, NULL }


struct  GetUserOtpServerRequest
{
  ProtobufCMessage base;
  char *phone;
};
#define GET_USER_OTP_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_user_otp_server_request__descriptor) \
, (char *)protobuf_c_empty_string }


struct  GetUserOtpServerResponse
{
  ProtobufCMessage base;
  char *id;
  char *phone;
  char *code;
  int32_t active;
  uint32_t senddate;
  StatusCode *statuscode;
};
#define GET_USER_OTP_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_user_otp_server_response__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, 0, NULL }


/*
 * Nhận được yêu cầu trả về danh sách nhà của tài khoản
 */
struct  GetHomesServerRequest
{
  ProtobufCMessage base;
};
#define GET_HOMES_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_homes_server_request__descriptor) \
 }


/*
 * Phản hồi thông tin danh sách nhà cần trả về
 */
struct  GetHomesServerResponse
{
  ProtobufCMessage base;
  size_t n_homes;
  Home **homes;
  char *defaulthomeid;
  StatusCode *statuscode;
};
#define GET_HOMES_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_homes_server_response__descriptor) \
, 0,NULL, (char *)protobuf_c_empty_string, NULL }


/*
 * Nhận được yêu cầu thêm nhà mới
 */
struct  AddHomeServerRequest
{
  ProtobufCMessage base;
  char *homename;
  char *homenameen;
  char *backgroundname;
};
#define ADD_HOME_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&add_home_server_request__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/*
 * Phản hồi thông tin thêm nhà mới
 */
struct  AddHomeServerResponse
{
  ProtobufCMessage base;
  Home *home;
  StatusCode *statuscode;
};
#define ADD_HOME_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&add_home_server_response__descriptor) \
, NULL, NULL }


/*
 * Nhận được yêu cầu update nhà mới
 */
struct  UpdateHomeServerRequest
{
  ProtobufCMessage base;
  Home *home;
};
#define UPDATE_HOME_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&update_home_server_request__descriptor) \
, NULL }


/*
 * Phản hồi thông tin update nhà mới
 */
struct  UpdateHomeServerResponse
{
  ProtobufCMessage base;
  Home *home;
  StatusCode *statuscode;
};
#define UPDATE_HOME_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&update_home_server_response__descriptor) \
, NULL, NULL }


/*
 * Nhận được yêu cầu xóa nhà mới
 */
struct  DeleteHomeServerRequest
{
  ProtobufCMessage base;
  char *homeid;
};
#define DELETE_HOME_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&delete_home_server_request__descriptor) \
, (char *)protobuf_c_empty_string }


/*
 * Phản hồi thông tin xóa nhà mới
 */
struct  DeleteHomeServerResponse
{
  ProtobufCMessage base;
  StatusCode *statuscode;
};
#define DELETE_HOME_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&delete_home_server_response__descriptor) \
, NULL }


/*
 * Nhận yêu cầu lấy thông tin cư dân
 */
struct  GetCitizenInfoServerRequest
{
  ProtobufCMessage base;
  char *homeid;
};
#define GET_CITIZEN_INFO_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_citizen_info_server_request__descriptor) \
, (char *)protobuf_c_empty_string }


/*
 * Phản hồi thông tin cư dân
 */
struct  GetCitizenInfoServerResponse
{
  ProtobufCMessage base;
  Citizen *citizen;
  StatusCode *statuscode;
};
#define GET_CITIZEN_INFO_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_citizen_info_server_response__descriptor) \
, NULL, NULL }


/*
 * Nhận được yêu cầu set thông tin cư dân
 */
struct  SetCitizenServerRequest
{
  ProtobufCMessage base;
  Citizen *citizen;
};
#define SET_CITIZEN_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&set_citizen_server_request__descriptor) \
, NULL }


/*
 * Phản hồi thông tin set thông tin cư dân
 */
struct  SetCitizenServerResponse
{
  ProtobufCMessage base;
  StatusCode *statuscode;
};
#define SET_CITIZEN_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&set_citizen_server_response__descriptor) \
, NULL }


/*
 * Yêu cầu cập nhật GPS cho nhà
 */
struct  SetGpsForHomeServerRequest
{
  ProtobufCMessage base;
  char *id;
  float longitude;
  float latitude;
};
#define SET_GPS_FOR_HOME_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&set_gps_for_home_server_request__descriptor) \
, (char *)protobuf_c_empty_string, 0, 0 }


/*
 * Phản hồi cập nhật GPS cho nhà
 */
struct  SetGpsForHomeServerResponse
{
  ProtobufCMessage base;
  StatusCode *statuscode;
};
#define SET_GPS_FOR_HOME_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&set_gps_for_home_server_response__descriptor) \
, NULL }


/*
 * Nhận được yêu cầu trả về thông tin chi tiết nhà
 */
struct  GetHomeInfoServerRequest
{
  ProtobufCMessage base;
  char *homeid;
};
#define GET_HOME_INFO_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_home_info_server_request__descriptor) \
, (char *)protobuf_c_empty_string }


/*
 * Phản hồi thông tin chi tiết nhà
 */
struct  GetHomeInfoServerResponse
{
  ProtobufCMessage base;
  Home *home;
  StatusCode *statuscode;
};
#define GET_HOME_INFO_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_home_info_server_response__descriptor) \
, NULL, NULL }


struct  GetHomesByPhoneServerRequest
{
  ProtobufCMessage base;
  char *phone;
};
#define GET_HOMES_BY_PHONE_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_homes_by_phone_server_request__descriptor) \
, (char *)protobuf_c_empty_string }


struct  GetHomesByPhoneServerResponse
{
  ProtobufCMessage base;
  size_t n_home;
  Home **home;
  StatusCode *statuscode;
};
#define GET_HOMES_BY_PHONE_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_homes_by_phone_server_response__descriptor) \
, 0,NULL, NULL }


struct  UploadHomeBackgroundServerRequest
{
  ProtobufCMessage base;
  char *homeid;
  FileUploadForm *fileuploadform;
};
#define UPLOAD_HOME_BACKGROUND_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&upload_home_background_server_request__descriptor) \
, (char *)protobuf_c_empty_string, NULL }


struct  UploadHomeBackgroundServerResponse
{
  ProtobufCMessage base;
  char *imageurl;
  StatusCode *statuscode;
};
#define UPLOAD_HOME_BACKGROUND_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&upload_home_background_server_response__descriptor) \
, (char *)protobuf_c_empty_string, NULL }


/*
 * Nhận được yêu cầu trả về danh sách các phòng
 */
struct  GetRoomsServerRequest
{
  ProtobufCMessage base;
  char *homeid;
};
#define GET_ROOMS_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_rooms_server_request__descriptor) \
, (char *)protobuf_c_empty_string }


/*
 * Phản hồi thông tin danh sách nhà cần trả về
 */
struct  GetRoomsServerResponse
{
  ProtobufCMessage base;
  size_t n_rooms;
  Room **rooms;
  StatusCode *statuscode;
};
#define GET_ROOMS_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_rooms_server_response__descriptor) \
, 0,NULL, NULL }


/*
 * Nhận được yêu cầu thêm phòng mới
 */
struct  AddRoomServerRequest
{
  ProtobufCMessage base;
  char *homeid;
  char *roomname;
  char *roomnameen;
  char *backgroundname;
};
#define ADD_ROOM_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&add_room_server_request__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/*
 * Phản hồi thông tin thêm phòng mới
 */
struct  AddRoomServerResponse
{
  ProtobufCMessage base;
  Room *room;
  StatusCode *statuscode;
};
#define ADD_ROOM_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&add_room_server_response__descriptor) \
, NULL, NULL }


/*
 * Nhận được yêu cầu xóa 1 phòng
 */
struct  DeleteRoomServerRequest
{
  ProtobufCMessage base;
  char *roomid;
};
#define DELETE_ROOM_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&delete_room_server_request__descriptor) \
, (char *)protobuf_c_empty_string }


/*
 * Phản hồi xóa một phòng
 */
struct  DeleteRoomServerResponse
{
  ProtobufCMessage base;
  StatusCode *statuscode;
};
#define DELETE_ROOM_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&delete_room_server_response__descriptor) \
, NULL }


struct  UpdateRoomServerRequest
{
  ProtobufCMessage base;
  Room *room;
};
#define UPDATE_ROOM_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&update_room_server_request__descriptor) \
, NULL }


struct  UpdateRoomServerResponse
{
  ProtobufCMessage base;
  Room *room;
  StatusCode *statuscode;
};
#define UPDATE_ROOM_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&update_room_server_response__descriptor) \
, NULL, NULL }


struct  UploadRoomBackgroundServerRequest
{
  ProtobufCMessage base;
  Room *room;
  FileUploadForm *fileuploadform;
};
#define UPLOAD_ROOM_BACKGROUND_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&upload_room_background_server_request__descriptor) \
, NULL, NULL }


struct  UploadRoomBackgroundServerResponse
{
  ProtobufCMessage base;
  char *imageurl;
  StatusCode *statuscode;
};
#define UPLOAD_ROOM_BACKGROUND_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&upload_room_background_server_response__descriptor) \
, (char *)protobuf_c_empty_string, NULL }


/*
 * Nhận được yêu cầu gửi về danh danh thiết bị đã kết nối wifi
 */
struct  GetDevicesServerRequest
{
  ProtobufCMessage base;
  char *homeid;
  /*
   * Nhóm thiết bị
   */
  GroupDevice group;
};
#define GET_DEVICES_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_devices_server_request__descriptor) \
, (char *)protobuf_c_empty_string, GROUP_DEVICE__SwitcherGroup }


/*
 * Phản hồi về danh danh thiết bị đã kết nối wifi
 */
struct  GetDevicesServerResponse
{
  ProtobufCMessage base;
  size_t n_rooms;
  Room **rooms;
  size_t n_devices;
  Device **devices;
  StatusCode *statuscode;
};
#define GET_DEVICES_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_devices_server_response__descriptor) \
, 0,NULL, 0,NULL, NULL }


/*
 * Nhận được yêu cầu gửi 1 thiết bị đã kết nối wifi
 */
struct  GetDeviceServerRequest
{
  ProtobufCMessage base;
  char *deviceid;
};
#define GET_DEVICE_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_device_server_request__descriptor) \
, (char *)protobuf_c_empty_string }


/*
 * Phản hồi 1 thiết bị đã kết nối wifi
 */
struct  GetDeviceServerResponse
{
  ProtobufCMessage base;
  Device *device;
  StatusCode *statuscode;
};
#define GET_DEVICE_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_device_server_response__descriptor) \
, NULL, NULL }


/*
 * Nhận được yêu cầu cập nhật danh sách các thiết bị đến DB server
 */
struct  AddDevicesServerRequest
{
  ProtobufCMessage base;
  /*
   * Thiết bị đã cấu hình rồi thì lần sau sẽ không hiển thị ra nữa nên server sẽ
   * không thực hiện update trong db
   */
  size_t n_devices;
  Device **devices;
};
#define ADD_DEVICES_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&add_devices_server_request__descriptor) \
, 0,NULL }


/*
 * Phản hồi thông tin sau khi cập nhật danh sách thiết bị
 */
struct  AddDevicesServerResponse
{
  ProtobufCMessage base;
  size_t n_devices;
  Device **devices;
  StatusCode *statuscode;
};
#define ADD_DEVICES_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&add_devices_server_response__descriptor) \
, 0,NULL, NULL }


/*
 * Nhận được yêu cầu cập nhật thông tin thiết bị
 */
struct  UpdateDeviceServerRequest
{
  ProtobufCMessage base;
  Device *device;
};
#define UPDATE_DEVICE_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&update_device_server_request__descriptor) \
, NULL }


/*
 * Phản hồi thông tin sau khi cập nhật thiết bị
 */
struct  UpdateDeviceServerResponse
{
  ProtobufCMessage base;
  StatusCode *statuscode;
};
#define UPDATE_DEVICE_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&update_device_server_response__descriptor) \
, NULL }


/*
 * Nhận được yêu cầu xóa thiết bị kết nối wifi
 */
struct  DeleteDeviceServerRequest
{
  ProtobufCMessage base;
  /*
   * Id của thiết bị
   */
  char *deviceid;
  char *hardwareid;
};
#define DELETE_DEVICE_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&delete_device_server_request__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/*
 * Phản hồi xóa thiết bị
 */
struct  DeleteDeviceServerResponse
{
  ProtobufCMessage base;
  StatusCode *statuscode;
};
#define DELETE_DEVICE_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&delete_device_server_response__descriptor) \
, NULL }


/*
 * Nhận được yêu cầu lấy về url firmware mới nhất
 */
struct  GetFirmwareLatestDeviceServerRequest
{
  ProtobufCMessage base;
  /*
   * Model: "M1", "SW-1TOUCH"
   */
  char *model;
  /*
   * Firmware: 1.0.0
   */
  char *firmware;
  /*
   * DeviceToken
   */
  char *devicetoken;
  /*
   * Chỉ cẩn DeviceId của thiết bị là đủ
   */
  char *deviceid;
};
#define GET_FIRMWARE_LATEST_DEVICE_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_firmware_latest_device_server_request__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/*
 * Phản hồi về Firmware mới nhất
 */
struct  GetFirmwareLatestDeviceServerResponse
{
  ProtobufCMessage base;
  /*
   * Firmware: 1.0.1
   */
  char *firmwareversion;
  /*
   * Id cần download
   */
  char *firmwareid;
  protobuf_c_boolean isdownloading;
  StatusCode *statuscode;
};
#define GET_FIRMWARE_LATEST_DEVICE_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_firmware_latest_device_server_response__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, NULL }


/*
 * Nhận được yêu cầu bắt đầu cập nhật Firmware
 */
struct  DownloadFirmwareDeviceServerRequest
{
  ProtobufCMessage base;
  char *deviceid;
  /*
   * Để check lại device session có khớp model gửi lênh hay không?
   */
  char *model;
  char *firmwareid;
};
#define DOWNLOAD_FIRMWARE_DEVICE_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&download_firmware_device_server_request__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/*
 * Phản hồi thông tin bắt đầu cập nhật Firmware mới nhất
 */
struct  DownloadFirmwareDeviceServerResponse
{
  ProtobufCMessage base;
  StatusCode *statuscode;
};
#define DOWNLOAD_FIRMWARE_DEVICE_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&download_firmware_device_server_response__descriptor) \
, NULL }


/*
 * Nhận được yêu cầu cập nhật Firmware
 */
struct  ForceUpdateFirmwareDeviceServerRequest
{
  ProtobufCMessage base;
  char *deviceid;
};
#define FORCE_UPDATE_FIRMWARE_DEVICE_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&force_update_firmware_device_server_request__descriptor) \
, (char *)protobuf_c_empty_string }


/*
 * Phản hồi thông tin cập nhật Firmware
 */
struct  ForceUpdateFirmwareDeviceServerResponse
{
  ProtobufCMessage base;
  StatusCode *statuscode;
};
#define FORCE_UPDATE_FIRMWARE_DEVICE_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&force_update_firmware_device_server_response__descriptor) \
, NULL }


/*
 * Nhận được yêu cầu đăng ký thiết bị sản xuất
 */
struct  RegisterDeviceServerRequest
{
  ProtobufCMessage base;
  /*
   * Mã sản xuất
   */
  char *mantoken;
  /*
   * HardwareId của thiết bị cần đăng ký
   */
  char *hardwareid;
  /*
   * Model
   */
  char *model;
  /*
   * Firmware
   */
  char *firmware;
};
#define REGISTER_DEVICE_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&register_device_server_request__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/*
 * Phản hồi đăng ký thiết bị sản xuất
 */
struct  RegisterDeviceServerResponse
{
  ProtobufCMessage base;
  /*
   * HardwareId của thiết bị đã đăng ký
   */
  char *hardwareid;
  /*
   * deviceToken nhận được sau đăng ký
   */
  char *devicetoken;
  /*
   * return ws endpoint for device
   */
  char *wsenpoint;
  DataType datatype;
  StatusCode *statuscode;
};
#define REGISTER_DEVICE_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&register_device_server_response__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, DATA_TYPE__BINARIES, NULL }


struct  UpdateWSEndpointDeviceServerRequest
{
  ProtobufCMessage base;
  char *deviceid;
  char *wsenpoint;
};
#define UPDATE_WSENDPOINT_DEVICE_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&update_wsendpoint_device_server_request__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  UpdateWSEndpointDeviceServerResponse
{
  ProtobufCMessage base;
  StatusCode *statuscode;
};
#define UPDATE_WSENDPOINT_DEVICE_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&update_wsendpoint_device_server_response__descriptor) \
, NULL }


struct  ForceUpdateFirmwareAllDevicesByPhoneServerRequest
{
  ProtobufCMessage base;
  char *customerphone;
  char *homeid;
};
#define FORCE_UPDATE_FIRMWARE_ALL_DEVICES_BY_PHONE_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&force_update_firmware_all_devices_by_phone_server_request__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  ForceUpdateFirmwareAllDevicesByPhoneServerResponse
{
  ProtobufCMessage base;
  StatusCode *statuscode;
};
#define FORCE_UPDATE_FIRMWARE_ALL_DEVICES_BY_PHONE_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&force_update_firmware_all_devices_by_phone_server_response__descriptor) \
, NULL }


struct  ListSceneDeviceServerRequest
{
  ProtobufCMessage base;
  char *id;
  char *homeid;
};
#define LIST_SCENE_DEVICE_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&list_scene_device_server_request__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  ListSceneDeviceServerResponse
{
  ProtobufCMessage base;
  size_t n_scenes;
  Scene **scenes;
  StatusCode *statuscode;
};
#define LIST_SCENE_DEVICE_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&list_scene_device_server_response__descriptor) \
, 0,NULL, NULL }


/*
 *----- Yêu cầu về thông tin công tắc -----//
 * Nhận được yêu cầu gửi thông tin danh sách công tắc
 */
struct  GetSwitchersServerRequest
{
  ProtobufCMessage base;
  /*
   * Id của deviceId
   */
  char *deviceid;
};
#define GET_SWITCHERS_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_switchers_server_request__descriptor) \
, (char *)protobuf_c_empty_string }


/*
 *----- Phản hồi thông tin công tắc -----//
 * Phản hồi danh sách công tắc của 1 thiết bị
 */
struct  GetSwitchersServerResponse
{
  ProtobufCMessage base;
  size_t n_switchers;
  Switcher **switchers;
  StatusCode *statuscode;
};
#define GET_SWITCHERS_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_switchers_server_response__descriptor) \
, 0,NULL, NULL }


/*
 * Nhận được yêu cầu trả về thông tin của 1 nút công tắc
 */
struct  GetSwitcherServerRequest
{
  ProtobufCMessage base;
  /*
   * Id
   */
  char *switcherid;
};
#define GET_SWITCHER_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_switcher_server_request__descriptor) \
, (char *)protobuf_c_empty_string }


/*
 * Phản hồi trả về thông tin của 1 nút công tắc
 */
struct  GetSwitcherServerResponse
{
  ProtobufCMessage base;
  Switcher *switcher;
  StatusCode *statuscode;
};
#define GET_SWITCHER_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_switcher_server_response__descriptor) \
, NULL, NULL }


/*
 * Nhận được yêu cầu trả về nhật ký của 1 công tắc
 */
struct  GetLogSwitcherServerRequest
{
  ProtobufCMessage base;
  /*
   * Id của thiết bị
   */
  char *deviceid;
  /*
   * Công tắc 1,2,3,4
   */
  uint32_t switcher;
};
#define GET_LOG_SWITCHER_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_log_switcher_server_request__descriptor) \
, (char *)protobuf_c_empty_string, 0 }


/*
 * Phản hồi nhật ký/hành trình của 1 công tắc
 */
struct  GetLogSwitcherServerResponse
{
  ProtobufCMessage base;
  StatusCode *statuscode;
};
#define GET_LOG_SWITCHER_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_log_switcher_server_response__descriptor) \
, NULL }


/*
 * Nhận được yêu cầu trả về danh sách icons của của công tắc
 */
struct  GetIconSwitchersServerRequest
{
  ProtobufCMessage base;
};
#define GET_ICON_SWITCHERS_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_icon_switchers_server_request__descriptor) \
 }


/*
 * Phản hồi danh sách icons của của công tắc
 */
struct  GetIconSwitchersServerResponse
{
  ProtobufCMessage base;
  size_t n_icons;
  char **icons;
  StatusCode *statuscode;
};
#define GET_ICON_SWITCHERS_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_icon_switchers_server_response__descriptor) \
, 0,NULL, NULL }


/*
 * Nhận được yêu cầu cập nhật 1 nút công tắc
 */
struct  UpdateSwitcherServerRequest
{
  ProtobufCMessage base;
  Switcher *switcher;
};
#define UPDATE_SWITCHER_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&update_switcher_server_request__descriptor) \
, NULL }


/*
 * Phản hồi cập nhật 1 nút công tắc
 */
struct  UpdateSwitcherServerResponse
{
  ProtobufCMessage base;
  Switcher *switcher;
  StatusCode *statuscode;
};
#define UPDATE_SWITCHER_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&update_switcher_server_response__descriptor) \
, NULL, NULL }


/*
 * Nhận được yêu cầu thay đổi On/Off thiết bị
 */
struct  SwitcherServerRequest
{
  ProtobufCMessage base;
  /*
   * Id của thiết bị
   */
  char *deviceid;
  /*
   * Công tắc 1,2,3,4
   */
  uint32_t switcher;
  /*
   * Trạng thái ON/OFF
   */
  PowerState powerstate;
};
#define SWITCHER_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&switcher_server_request__descriptor) \
, (char *)protobuf_c_empty_string, 0, POWER_STATE__Off }


/*
 * Phản hồi thay đổi On/Off thiết bị
 */
struct  SwitcherServerResponse
{
  ProtobufCMessage base;
  StatusCode *statuscode;
};
#define SWITCHER_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&switcher_server_response__descriptor) \
, NULL }


/*
 *----- Yêu cầu về lịch hẹn công tắc -----//
 * Nhận được yêu cầu gửi danh sách lịch hẹn giờ của 1 công tắc
 */
struct  GetSwitcherSchedulesServerRequest
{
  ProtobufCMessage base;
  /*
   * Id của switcher
   */
  char *switcherid;
};
#define GET_SWITCHER_SCHEDULES_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_switcher_schedules_server_request__descriptor) \
, (char *)protobuf_c_empty_string }


/*
 *----- Phản hồi về lịch hẹn công tắc -----//
 * Phản hồi thông tin danh sách hẹn giờ công tắc
 */
struct  GetSwitcherSchedulesServerResponse
{
  ProtobufCMessage base;
  size_t n_schedules;
  SwitcherSchedule **schedules;
  StatusCode *statuscode;
};
#define GET_SWITCHER_SCHEDULES_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_switcher_schedules_server_response__descriptor) \
, 0,NULL, NULL }


/*
 * Nhận được yêu cầu gửi thông tin chi tiết 1 lịch của 1 công tắc
 */
struct  GetSwitcherScheduleServerRequest
{
  ProtobufCMessage base;
  /*
   * SwitcherScheduleId
   */
  char *switcherscheduleid;
};
#define GET_SWITCHER_SCHEDULE_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_switcher_schedule_server_request__descriptor) \
, (char *)protobuf_c_empty_string }


/*
 * Phản hồi thông tin chi tiết 1 lịch của 1 công tắc
 */
struct  GetSwitcherScheduleServerResponse
{
  ProtobufCMessage base;
  SwitcherSchedule *schedule;
  StatusCode *statuscode;
};
#define GET_SWITCHER_SCHEDULE_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_switcher_schedule_server_response__descriptor) \
, NULL, NULL }


/*
 * Nhận được yêu cầu gửi số lượng lịch hẹn giờ của 1 công tắc
 */
struct  GetCountSwitcherScheduleServerRequest
{
  ProtobufCMessage base;
  /*
   * Id của switcher
   */
  char *switcherid;
};
#define GET_COUNT_SWITCHER_SCHEDULE_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_count_switcher_schedule_server_request__descriptor) \
, (char *)protobuf_c_empty_string }


/*
 * Phản hồi số lượng lịch hẹn giờ của 1 công tắc
 */
struct  GetCountSwitcherScheduleServerResponse
{
  ProtobufCMessage base;
  uint32_t count;
  StatusCode *statuscode;
};
#define GET_COUNT_SWITCHER_SCHEDULE_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_count_switcher_schedule_server_response__descriptor) \
, 0, NULL }


/*
 * Nhận được yêu cầu thêm mới 1 lịch của 1 công tắc
 */
struct  AddSwitcherScheduleServerRequest
{
  ProtobufCMessage base;
  /*
   * Id của thiết bị
   */
  char *deviceid;
  SwitcherSchedule *schedule;
};
#define ADD_SWITCHER_SCHEDULE_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&add_switcher_schedule_server_request__descriptor) \
, (char *)protobuf_c_empty_string, NULL }


/*
 * Phản hồi thêm mới 1 lịch của 1 công tắc
 */
struct  AddSwitcherScheduleServerResponse
{
  ProtobufCMessage base;
  char *switcherscheduleid;
  StatusCode *statuscode;
};
#define ADD_SWITCHER_SCHEDULE_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&add_switcher_schedule_server_response__descriptor) \
, (char *)protobuf_c_empty_string, NULL }


/*
 * Nhận được yêu cầu update 1 lịch của 1 công tắc
 */
struct  UpdateSwitcherScheduleServerRequest
{
  ProtobufCMessage base;
  /*
   * Id của thiết bị;
   */
  char *deviceid;
  SwitcherSchedule *schedule;
};
#define UPDATE_SWITCHER_SCHEDULE_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&update_switcher_schedule_server_request__descriptor) \
, (char *)protobuf_c_empty_string, NULL }


/*
 * Phản hồi update 1 lịch của 1 công tắc
 */
struct  UpdateSwitcherScheduleServerResponse
{
  ProtobufCMessage base;
  StatusCode *statuscode;
};
#define UPDATE_SWITCHER_SCHEDULE_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&update_switcher_schedule_server_response__descriptor) \
, NULL }


/*
 * Nhận được yêu cầu xóa 1 lịch của 1 công tắc
 */
struct  DeleteSwitcherScheduleServerRequest
{
  ProtobufCMessage base;
  /*
   * Id của thiết bị
   */
  char *deviceid;
  /*
   * Id của switcherScheduleId
   */
  char *switcherscheduleid;
};
#define DELETE_SWITCHER_SCHEDULE_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&delete_switcher_schedule_server_request__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/*
 * Phản hồi xóa 1 lịch của 1 công tắc
 */
struct  DeleteSwitcherScheduleServerResponse
{
  ProtobufCMessage base;
  StatusCode *statuscode;
};
#define DELETE_SWITCHER_SCHEDULE_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&delete_switcher_schedule_server_response__descriptor) \
, NULL }


/*
 * Nhận được yêu cầu thiết lập active 1 lịch của 1 công tắc
 */
struct  SetActiveSwitcherScheduleServerRequest
{
  ProtobufCMessage base;
  /*
   * Id của thiết bị;
   */
  char *deviceid;
  /*
   * Id của switcherScheduleId
   */
  char *switcherscheduleid;
  protobuf_c_boolean active;
};
#define SET_ACTIVE_SWITCHER_SCHEDULE_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&set_active_switcher_schedule_server_request__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0 }


/*
 * Phản hồi yêu cầu thiết lập active 1 lịch của 1 công tắc
 */
struct  SetActiveSwitcherScheduleServerResponse
{
  ProtobufCMessage base;
  /*
   * Id của thiết bị;
   */
  char *deviceid;
  /*
   * Id của switcherScheduleId
   */
  char *switcherscheduleid;
  protobuf_c_boolean active;
  StatusCode *statuscode;
};
#define SET_ACTIVE_SWITCHER_SCHEDULE_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&set_active_switcher_schedule_server_response__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, NULL }


/*
 *----- Yêu cầu thông tin rèm cửa -----//
 * Nhận được yêu cầu trả về thông tin của rèm cửa
 */
struct  GetCurtainSwitcherServerRequest
{
  ProtobufCMessage base;
  /*
   * Id
   */
  char *curtainswitcherid;
};
#define GET_CURTAIN_SWITCHER_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_curtain_switcher_server_request__descriptor) \
, (char *)protobuf_c_empty_string }


/*
 *----- Phản hồi thông tin rèm cửa -----//
 * Phản hồi trả về thông tin rèm cửa
 */
struct  GetCurtainSwitcherServerResponse
{
  ProtobufCMessage base;
  CurtainSwitcher *curtainswitcher;
  StatusCode *statuscode;
};
#define GET_CURTAIN_SWITCHER_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_curtain_switcher_server_response__descriptor) \
, NULL, NULL }


/*
 * Nhận được yêu cầu cập nhật rèm cửa
 */
struct  UpdateCurtainSwitcherServerRequest
{
  ProtobufCMessage base;
  CurtainSwitcher *curtainswitcher;
};
#define UPDATE_CURTAIN_SWITCHER_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&update_curtain_switcher_server_request__descriptor) \
, NULL }


/*
 * Phản hồi cập nhật thông tin rèm cửa
 */
struct  UpdateCurtainSwitcherServerResponse
{
  ProtobufCMessage base;
  StatusCode *statuscode;
};
#define UPDATE_CURTAIN_SWITCHER_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&update_curtain_switcher_server_response__descriptor) \
, NULL }


/*
 * Nhận được yêu cầu trả về state của rèm cửa
 */
struct  GetCurtainSwitcherStateServerRequest
{
  ProtobufCMessage base;
  /*
   * deviceId để lấy trạng thái điều hòa ở session trên server HZ
   */
  char *deviceid;
};
#define GET_CURTAIN_SWITCHER_STATE_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_curtain_switcher_state_server_request__descriptor) \
, (char *)protobuf_c_empty_string }


/*
 * Phản hồi thông tin state của rèm cửa
 */
struct  GetCurtainSwitcherStateServerResponse
{
  ProtobufCMessage base;
  /*
   * Phần trăm hướng trong
   */
  uint32_t percentin;
  /*
   * Phần trăm hướng ngoài
   */
  uint32_t percentout;
  StatusCode *statuscode;
};
#define GET_CURTAIN_SWITCHER_STATE_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_curtain_switcher_state_server_response__descriptor) \
, 0, 0, NULL }


/*
 * Nhận được lệnh điều khiển rèm cửa
 */
struct  CurtainSwitcherServerRequest
{
  ProtobufCMessage base;
  char *deviceid;
  /*
   * Phần trăm hướng trong
   */
  uint32_t percentin;
  /*
   * Phần trăm hướng ngoài
   */
  uint32_t percentout;
};
#define CURTAIN_SWITCHER_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&curtain_switcher_server_request__descriptor) \
, (char *)protobuf_c_empty_string, 0, 0 }


/*
 * Phản hồi lệnh điều khiển rèm cửa
 */
struct  CurtainSwitcherServerResponse
{
  ProtobufCMessage base;
  StatusCode *statuscode;
};
#define CURTAIN_SWITCHER_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&curtain_switcher_server_response__descriptor) \
, NULL }


/*
 *----- Yêu cầu về lịch hẹn rèm cửa -----//
 * Nhận được yêu cầu gửi danh sách lịch hẹn giờ của rèm cửa
 */
struct  GetCurtainSwitcherSchedulesServerRequest
{
  ProtobufCMessage base;
  /*
   * Id của rèm cửa
   */
  char *curtainswitcherid;
};
#define GET_CURTAIN_SWITCHER_SCHEDULES_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_curtain_switcher_schedules_server_request__descriptor) \
, (char *)protobuf_c_empty_string }


/*
 *----- Phản hồi về lịch hẹn rèm cửa -----//
 * Phản hồi thông tin danh sách hẹn giờ rèm cửa
 */
struct  GetCurtainSwitcherSchedulesServerResponse
{
  ProtobufCMessage base;
  size_t n_schedules;
  CurtainSwitcherSchedule **schedules;
  StatusCode *statuscode;
};
#define GET_CURTAIN_SWITCHER_SCHEDULES_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_curtain_switcher_schedules_server_response__descriptor) \
, 0,NULL, NULL }


/*
 * Nhận được yêu cầu gửi thông tin chi tiết 1 lịch hẹn giờ của rèm cửa
 */
struct  GetCurtainSwitcherScheduleServerRequest
{
  ProtobufCMessage base;
  /*
   * curtainSwitcherScheduleId của rèm cửa
   */
  char *curtainswitcherscheduleid;
};
#define GET_CURTAIN_SWITCHER_SCHEDULE_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_curtain_switcher_schedule_server_request__descriptor) \
, (char *)protobuf_c_empty_string }


/*
 * Phản hồi thông tin chi tiết 1 lịch của rèm cửa
 */
struct  GetCurtainSwitcherScheduleServerResponse
{
  ProtobufCMessage base;
  CurtainSwitcherSchedule *schedule;
  StatusCode *statuscode;
};
#define GET_CURTAIN_SWITCHER_SCHEDULE_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_curtain_switcher_schedule_server_response__descriptor) \
, NULL, NULL }


/*
 * Nhận được yêu cầu gửi số lượng lịch hẹn giờ của rèm cửa
 */
struct  GetCountCurtainSwitcherScheduleServerRequest
{
  ProtobufCMessage base;
  /*
   * Id của rèm cửa
   */
  char *curtainswitcherid;
};
#define GET_COUNT_CURTAIN_SWITCHER_SCHEDULE_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_count_curtain_switcher_schedule_server_request__descriptor) \
, (char *)protobuf_c_empty_string }


/*
 * Phản hồi số lượng lịch hẹn giờ của rèm cửa
 */
struct  GetCountCurtainSwitcherScheduleServerResponse
{
  ProtobufCMessage base;
  /*
   * Id của rèm cửa
   */
  uint32_t count;
  StatusCode *statuscode;
};
#define GET_COUNT_CURTAIN_SWITCHER_SCHEDULE_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_count_curtain_switcher_schedule_server_response__descriptor) \
, 0, NULL }


/*
 * Nhận được yêu cầu thêm mới 1 lịch của rèm cửa
 */
struct  AddCurtainSwitcherScheduleServerRequest
{
  ProtobufCMessage base;
  /*
   * Id của thiết bị
   */
  char *deviceid;
  CurtainSwitcherSchedule *schedule;
};
#define ADD_CURTAIN_SWITCHER_SCHEDULE_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&add_curtain_switcher_schedule_server_request__descriptor) \
, (char *)protobuf_c_empty_string, NULL }


/*
 * Phản hồi thêm mới 1 lịch của rèm cửa
 */
struct  AddCurtainSwitcherScheduleServerResponse
{
  ProtobufCMessage base;
  char *curtainswitcherscheduleid;
  StatusCode *statuscode;
};
#define ADD_CURTAIN_SWITCHER_SCHEDULE_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&add_curtain_switcher_schedule_server_response__descriptor) \
, (char *)protobuf_c_empty_string, NULL }


/*
 * Nhận được yêu cầu update 1 lịch của rèm cửa
 */
struct  UpdateCurtainSwitcherScheduleServerRequest
{
  ProtobufCMessage base;
  /*
   * Id của thiết bị;
   */
  char *deviceid;
  CurtainSwitcherSchedule *schedule;
};
#define UPDATE_CURTAIN_SWITCHER_SCHEDULE_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&update_curtain_switcher_schedule_server_request__descriptor) \
, (char *)protobuf_c_empty_string, NULL }


/*
 * Phản hồi update 1 lịch của rèm cửa
 */
struct  UpdateCurtainSwitcherScheduleServerResponse
{
  ProtobufCMessage base;
  StatusCode *statuscode;
};
#define UPDATE_CURTAIN_SWITCHER_SCHEDULE_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&update_curtain_switcher_schedule_server_response__descriptor) \
, NULL }


/*
 * Nhận được yêu cầu xóa 1 lịch của rèm cửa
 */
struct  DeleteCurtainSwitcherScheduleServerRequest
{
  ProtobufCMessage base;
  /*
   * Id của thiết bị
   */
  char *deviceid;
  /*
   * Id của curtainSwitcherScheduleId
   */
  char *curtainswitcherscheduleid;
};
#define DELETE_CURTAIN_SWITCHER_SCHEDULE_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&delete_curtain_switcher_schedule_server_request__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/*
 * Phản hồi xóa 1 lịch của rèm cửa
 */
struct  DeleteCurtainSwitcherScheduleServerResponse
{
  ProtobufCMessage base;
  StatusCode *statuscode;
};
#define DELETE_CURTAIN_SWITCHER_SCHEDULE_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&delete_curtain_switcher_schedule_server_response__descriptor) \
, NULL }


/*
 * Nhận được yêu cầu thiết lập active 1 lịch của 1 rèm cửa
 */
struct  SetActiveCurtainSwitcherScheduleServerRequest
{
  ProtobufCMessage base;
  /*
   * Id của thiết bị;
   */
  char *deviceid;
  /*
   * Id của curtainSwitcherScheduleId
   */
  char *curtainswitcherscheduleid;
  protobuf_c_boolean active;
};
#define SET_ACTIVE_CURTAIN_SWITCHER_SCHEDULE_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&set_active_curtain_switcher_schedule_server_request__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0 }


/*
 * Phản hồi yêu cầu thiết lập active 1 lịch của 1 rèm cửa
 */
struct  SetActiveCurtainSwitcherScheduleServerResponse
{
  ProtobufCMessage base;
  StatusCode *statuscode;
};
#define SET_ACTIVE_CURTAIN_SWITCHER_SCHEDULE_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&set_active_curtain_switcher_schedule_server_response__descriptor) \
, NULL }


/*
 * Nhận được yêu cầu trả về thông tin của đồng hồ điện/nước
 */
struct  GetMeterServerRequest
{
  ProtobufCMessage base;
  /*
   * Id của thiết bị điện/nước
   */
  char *meterid;
  /*
   * [Deprecated]
   */
  /*
   * SerialNumber
   */
  char *serialnumber;
  /*
   * [Deprecated]
   */
  /*
   * Là điện or nước
   */
  TypeMeter type;
  /*
   * [Deprecated]
   */
  /*
   * Tra cứu theo ngày
   */
  DateTime *date;
  int32_t months;
};
#define GET_METER_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_meter_server_request__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, TYPE_METER__ElectricMeter, NULL, 0 }


/*
 * Phản hồi thông tin của đồng hồ điện/nước
 */
struct  GetMeterServerResponse
{
  ProtobufCMessage base;
  /*
   * [Deprecated]
   */
  /*
   * Chi tiết của đồng hồ điện/nước
   */
  Meter *meter;
  size_t n_meterestimate;
  MeterEstimate **meterestimate;
  StatusCode *statuscode;
};
#define GET_METER_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_meter_server_response__descriptor) \
, NULL, 0,NULL, NULL }


/*
 * Nhận yêu cầu cập nhật đồng hồ
 */
struct  UpdateMeterServerRequest
{
  ProtobufCMessage base;
  Meter *meter;
};
#define UPDATE_METER_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&update_meter_server_request__descriptor) \
, NULL }


/*
 * Phản hồi yêu cầu cập nhật đồng hồ
 */
struct  UpdateMeterServerResponse
{
  ProtobufCMessage base;
  Meter *meter;
  StatusCode *statuscode;
};
#define UPDATE_METER_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&update_meter_server_response__descriptor) \
, NULL, NULL }


/*
 * Nhận được yêu cầu trả về thông tin tiêu thụ theo ngày trong tháng
 */
struct  GetMeterEstimatesDayInMonthServerRequest
{
  ProtobufCMessage base;
  /*
   * SerialNumber
   */
  char *serialnumber;
  /*
   * Là điện or nước
   */
  TypeMeter type;
  /*
   * Năm
   */
  uint32_t year;
  /*
   * Tháng
   */
  uint32_t month;
};
#define GET_METER_ESTIMATES_DAY_IN_MONTH_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_meter_estimates_day_in_month_server_request__descriptor) \
, (char *)protobuf_c_empty_string, TYPE_METER__ElectricMeter, 0, 0 }


/*
 * Phản hồi yêu cầu trả về thông tin tiêu thụ theo ngày
 */
struct  GetMeterEstimatesDayInMonthServerResponse
{
  ProtobufCMessage base;
  /*
   * Ước tính số lượng tiêu thụ từng giờ theo các ngày trong 1 tháng
   */
  size_t n_estimates;
  MeterEstimate **estimates;
  StatusCode *statuscode;
};
#define GET_METER_ESTIMATES_DAY_IN_MONTH_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_meter_estimates_day_in_month_server_response__descriptor) \
, 0,NULL, NULL }


/*
 * Nhận được yêu cầu trả về thông tin tiêu thụ theo giờ trong ngày
 */
struct  GetMeterEstimatesHourInDayServerRequest
{
  ProtobufCMessage base;
  /*
   * SerialNumber
   */
  char *serialnumber;
  /*
   * Là điện or nước
   */
  TypeMeter type;
  /*
   * Năm
   */
  uint32_t year;
  /*
   * Tháng
   */
  uint32_t month;
  /*
   * Ngày
   */
  uint32_t day;
};
#define GET_METER_ESTIMATES_HOUR_IN_DAY_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_meter_estimates_hour_in_day_server_request__descriptor) \
, (char *)protobuf_c_empty_string, TYPE_METER__ElectricMeter, 0, 0, 0 }


/*
 * Phản hồi yêu cầu trả về thông tin tiêu thụ theo giờ trong ngày
 */
struct  GetMeterEstimatesHourInDayServerResponse
{
  ProtobufCMessage base;
  /*
   * Ước tính số lượng tiêu thụ theo giờ trong 1 ngày
   */
  size_t n_estimates;
  MeterEstimate **estimates;
  StatusCode *statuscode;
};
#define GET_METER_ESTIMATES_HOUR_IN_DAY_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_meter_estimates_hour_in_day_server_response__descriptor) \
, 0,NULL, NULL }


/*
 * Nhận được yêu cầu trả về danh sách đồng hồ của nhà
 */
struct  GetMetersByHomeIdServerRequest
{
  ProtobufCMessage base;
  /*
   * homeId
   */
  char *homeid;
};
#define GET_METERS_BY_HOME_ID_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_meters_by_home_id_server_request__descriptor) \
, (char *)protobuf_c_empty_string }


/*
 * Phản hồi yêu cầu trả về danh sách đồng hồ của nhà
 */
struct  GetMetersByHomeIdServerResponse
{
  ProtobufCMessage base;
  /*
   * homeId
   */
  char *homeid;
  size_t n_meters;
  Meter **meters;
  StatusCode *statuscode;
};
#define GET_METERS_BY_HOME_ID_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_meters_by_home_id_server_response__descriptor) \
, (char *)protobuf_c_empty_string, 0,NULL, NULL }


/*
 * Nhận được yêu cầu chỉ số đông hồ bị thiếu trong ngày
 */
struct  GetMeterMissingInDayServerRequest
{
  ProtobufCMessage base;
  char *hardwareid;
  int32_t date;
};
#define GET_METER_MISSING_IN_DAY_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_meter_missing_in_day_server_request__descriptor) \
, (char *)protobuf_c_empty_string, 0 }


/*
 * Phản hồi yêu cầu
 */
struct  GetMeterMissingInDayServerResponse
{
  ProtobufCMessage base;
  StatusCode *statuscode;
};
#define GET_METER_MISSING_IN_DAY_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_meter_missing_in_day_server_response__descriptor) \
, NULL }


/*
 * Nhận được yêu cầu trả về state của điều hòa
 */
struct  GetAirConditionerStateServerRequest
{
  ProtobufCMessage base;
  /*
   * deviceId để lấy trạng thái điều hòa ở session trên server HZ
   */
  char *deviceid;
  /*
   * Id của dàn lạnh, 0 hoặc null nếu máy lạnh chỉ quản lý 1 dàn lạnh
   */
  uint32_t indoorid;
  /*
   * [Optional] Sửa dụng remoteId để lấy thông tin remote
   */
  char *remoteid;
};
#define GET_AIR_CONDITIONER_STATE_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_air_conditioner_state_server_request__descriptor) \
, (char *)protobuf_c_empty_string, 0, (char *)protobuf_c_empty_string }


/*
 * Phản hồi thông tin state của điều hòa
 */
struct  GetAirConditionerStateServerResponse
{
  ProtobufCMessage base;
  AirConditionerState *state;
  StatusCode *statuscode;
};
#define GET_AIR_CONDITIONER_STATE_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_air_conditioner_state_server_response__descriptor) \
, NULL, NULL }


/*
 * Nhận được yêu cầu điều khiển điều hòa
 */
struct  AirConditionerServerRequest
{
  ProtobufCMessage base;
  char *deviceid;
  AirConditionerState *state;
};
#define AIR_CONDITIONER_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&air_conditioner_server_request__descriptor) \
, (char *)protobuf_c_empty_string, NULL }


/*
 * Phản hồi thông tin điều khiển điều hòa
 */
struct  AirConditionerServerResponse
{
  ProtobufCMessage base;
  StatusCode *statuscode;
};
#define AIR_CONDITIONER_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&air_conditioner_server_response__descriptor) \
, NULL }


/*
 *----- Yêu cầu thông tin của remote -----//
 * Nhận được yêu cầu trả về  danh sách các remote
 */
struct  GetRemotesServerRequest
{
  ProtobufCMessage base;
  /*
   * HomeId
   */
  char *homeid;
  /*
   * Nhóm thiết bị
   */
  GroupDevice group;
};
#define GET_REMOTES_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_remotes_server_request__descriptor) \
, (char *)protobuf_c_empty_string, GROUP_DEVICE__SwitcherGroup }


/*
 *----- Phản hồi của remote -----//
 * Phản hồi thông tin danh sách các remote
 */
struct  GetRemotesServerResponse
{
  ProtobufCMessage base;
  size_t n_remotes;
  Remote **remotes;
  StatusCode *statuscode;
};
#define GET_REMOTES_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_remotes_server_response__descriptor) \
, 0,NULL, NULL }


/*
 * Nhận được yêu cầu trả về thông tin chi tiết của remote
 */
struct  GetRemoteServerRequest
{
  ProtobufCMessage base;
  /*
   * Id của remote
   */
  char *remoteid;
  /*
   * HomeId để trả về danh sách thiết bị IRRF trong căn hộ
   */
  char *homeid;
};
#define GET_REMOTE_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_remote_server_request__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/*
 * Phản hồi thông tin chi tiết của remote
 */
struct  GetRemoteServerResponse
{
  ProtobufCMessage base;
  /*
   * Remote
   */
  Remote *remote;
  StatusCode *statuscode;
};
#define GET_REMOTE_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_remote_server_response__descriptor) \
, NULL, NULL }


/*
 * Nhận được yêu cầu trả về danh sách các remote library
 */
struct  GetRemoteLibrariesServerRequest
{
  ProtobufCMessage base;
  char *search;
  char *last_name;
  uint32_t size;
};
#define GET_REMOTE_LIBRARIES_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_remote_libraries_server_request__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0 }


/*
 * Phản hồi thông tin về danh sách các remote library
 */
struct  GetRemoteLibrariesServerResponse
{
  ProtobufCMessage base;
  size_t n_libraries;
  RemoteLibrary **libraries;
  StatusCode *statuscode;
};
#define GET_REMOTE_LIBRARIES_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_remote_libraries_server_response__descriptor) \
, 0,NULL, NULL }


/*
 * Nhận được yêu cầu trả về các nút lệnh remote
 */
struct  GetCommandsRemoteServerRequest
{
  ProtobufCMessage base;
  /*
   * Dùng cho đa năng
   */
  char *remoteid;
  /*
   * Dùng cho đơn năng
   */
  char *remotelibraryid;
};
#define GET_COMMANDS_REMOTE_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_commands_remote_server_request__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/*
 * Phản hồi thông tin danh sách các nút điều khiển
 */
struct  GetCommandsRemoteServerResponse
{
  ProtobufCMessage base;
  size_t n_commands;
  RemoteCommand **commands;
  StatusCode *statuscode;
};
#define GET_COMMANDS_REMOTE_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_commands_remote_server_response__descriptor) \
, 0,NULL, NULL }


/*
 * Nhận được yêu cầu thực hiện lệnh remote
 */
struct  SendCommandRemoteServerRequest
{
  ProtobufCMessage base;
  /*
   * Id của deviceId
   */
  char *deviceid;
  /*
   * Id của remote dùng cho thư viện có sẵn
   */
  char *remoteid;
  /*
   * Dùng cho thư viện có sẵn
   */
  char *remotelibrarycmdid;
  /*
   * Id của lệnh từ remote đa năng
   */
  char *remotemultilibrarycmdid;
  /*
   * IR or RF
   */
  TypeLearn type;
};
#define SEND_COMMAND_REMOTE_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&send_command_remote_server_request__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, TYPE_LEARN__IR }


/*
 * Phản hồi thông tin sau khi thực hiện lệnh remote
 */
struct  SendCommandRemoteServerResponse
{
  ProtobufCMessage base;
  StatusCode *statuscode;
};
#define SEND_COMMAND_REMOTE_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&send_command_remote_server_response__descriptor) \
, NULL }


/*
 * Nhận được yêu cầu học lệnh remote
 */
struct  LearnCommandRemoteServerRequest
{
  ProtobufCMessage base;
  /*
   * Id của thiết bị cần học lệnh
   */
  char *deviceid;
  /*
   * Id của remote
   */
  char *remoteid;
  /*
   * Id của lệnh từ thư viện
   */
  char *remotelibrarycmdid;
  /*
   * Id của lệnh từ remote đa năng
   */
  char *remotemultilibrarycmdid;
  /*
   * IR or RF
   */
  TypeLearn type;
};
#define LEARN_COMMAND_REMOTE_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&learn_command_remote_server_request__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, TYPE_LEARN__IR }


/*
 * Phản hồi thông tin sau khi yêu cầu học lệnh remote kết thúc
 */
struct  LearnCommandRemoteServerResponse
{
  ProtobufCMessage base;
  StatusCode *statuscode;
};
#define LEARN_COMMAND_REMOTE_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&learn_command_remote_server_response__descriptor) \
, NULL }


/*
 * Nhận được yêu cầu khôi phục lệnh mặc định
 */
struct  RestoreCommandRemoteServerRequest
{
  ProtobufCMessage base;
  /*
   * Id của remote
   */
  char *remoteid;
  /*
   * Id của lệnh
   */
  char *remotelibrarycmdid;
  /*
   * Id của lệnh từ remote đa năng
   */
  char *remotemultilibrarycmdid;
};
#define RESTORE_COMMAND_REMOTE_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&restore_command_remote_server_request__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/*
 * Phản hồi sau khôi phục lệnh mặc định
 */
struct  RestoreCommandRemoteServerResponse
{
  ProtobufCMessage base;
  StatusCode *statuscode;
};
#define RESTORE_COMMAND_REMOTE_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&restore_command_remote_server_response__descriptor) \
, NULL }


/*
 * Nhận được yêu cầu thêm mới 1 remote
 */
struct  AddRemoteServerRequest
{
  ProtobufCMessage base;
  Remote *remote;
};
#define ADD_REMOTE_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&add_remote_server_request__descriptor) \
, NULL }


/*
 * Phản hồi thông tin thêm mới 1 remote
 */
struct  AddRemoteServerResponse
{
  ProtobufCMessage base;
  Remote *remote;
  StatusCode *statuscode;
};
#define ADD_REMOTE_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&add_remote_server_response__descriptor) \
, NULL, NULL }


/*
 * Nhận được yêu cầu update 1 remote
 */
struct  UpdateRemoteServerRequest
{
  ProtobufCMessage base;
  Remote *remote;
};
#define UPDATE_REMOTE_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&update_remote_server_request__descriptor) \
, NULL }


/*
 * Phản hồi thông tin update 1 remote
 */
struct  UpdateRemoteServerResponse
{
  ProtobufCMessage base;
  Remote *remote;
  StatusCode *statuscode;
};
#define UPDATE_REMOTE_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&update_remote_server_response__descriptor) \
, NULL, NULL }


/*
 * Nhận được yêu cầu xóa 1 remote
 */
struct  DeleteRemoteServerRequest
{
  ProtobufCMessage base;
  /*
   * Id của remote
   */
  char *remoteid;
};
#define DELETE_REMOTE_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&delete_remote_server_request__descriptor) \
, (char *)protobuf_c_empty_string }


/*
 * Phản hồi thông tin xóa 1 remote
 */
struct  DeleteRemoteServerResponse
{
  ProtobufCMessage base;
  StatusCode *statuscode;
};
#define DELETE_REMOTE_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&delete_remote_server_response__descriptor) \
, NULL }


/*
 *----- Yêu cầu hẹn giờ của remote -----//
 * Nhận được yêu cầu gửi danh sách lịch hẹn giờ của 1 remote
 */
struct  GetRemoteSchedulesServerRequest
{
  ProtobufCMessage base;
  /*
   * Id của remote
   */
  char *remoteid;
};
#define GET_REMOTE_SCHEDULES_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_remote_schedules_server_request__descriptor) \
, (char *)protobuf_c_empty_string }


/*
 *----- Phản hồi hẹn giờ remote -----//
 * Phản hồi thông tin danh sách hẹn giờ remote
 */
struct  GetRemoteSchedulesServerResponse
{
  ProtobufCMessage base;
  size_t n_schedules;
  RemoteSchedule **schedules;
  StatusCode *statuscode;
};
#define GET_REMOTE_SCHEDULES_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_remote_schedules_server_response__descriptor) \
, 0,NULL, NULL }


/*
 * Nhận được yêu cầu gửi số lượng lịch hẹn giờ của 1 remote
 */
struct  GetCountRemoteScheduleServerRequest
{
  ProtobufCMessage base;
  /*
   * Id của remote
   */
  char *remoteid;
};
#define GET_COUNT_REMOTE_SCHEDULE_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_count_remote_schedule_server_request__descriptor) \
, (char *)protobuf_c_empty_string }


/*
 * Nhận được yêu cầu gửi số lượng lịch hẹn giờ của 1 remote
 */
struct  GetCountRemoteScheduleServerResponse
{
  ProtobufCMessage base;
  uint32_t count;
  StatusCode *statuscode;
};
#define GET_COUNT_REMOTE_SCHEDULE_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_count_remote_schedule_server_response__descriptor) \
, 0, NULL }


/*
 * Nhận được yêu cầu gửi thông tin chi tiết 1 lịch của 1 remote
 */
struct  GetRemoteScheduleServerRequest
{
  ProtobufCMessage base;
  /*
   * Id của remoteScheduleId
   */
  char *remotescheduleid;
};
#define GET_REMOTE_SCHEDULE_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_remote_schedule_server_request__descriptor) \
, (char *)protobuf_c_empty_string }


/*
 * Phản hồi thông tin chi tiết 1 lịch của 1 remote
 */
struct  GetRemoteScheduleServerResponse
{
  ProtobufCMessage base;
  RemoteSchedule *schedule;
  StatusCode *statuscode;
};
#define GET_REMOTE_SCHEDULE_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_remote_schedule_server_response__descriptor) \
, NULL, NULL }


/*
 * Nhận được yêu cầu thêm mới 1 lịch của 1 remote
 */
struct  AddRemoteScheduleServerRequest
{
  ProtobufCMessage base;
  RemoteSchedule *schedule;
};
#define ADD_REMOTE_SCHEDULE_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&add_remote_schedule_server_request__descriptor) \
, NULL }


/*
 * Phản hồi thêm mới 1 lịch của 1 remote
 */
struct  AddRemoteScheduleServerResponse
{
  ProtobufCMessage base;
  RemoteSchedule *schedule;
  StatusCode *statuscode;
};
#define ADD_REMOTE_SCHEDULE_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&add_remote_schedule_server_response__descriptor) \
, NULL, NULL }


/*
 * Nhận được yêu cầu update 1 lịch của 1 remote
 */
struct  UpdateRemoteScheduleServerRequest
{
  ProtobufCMessage base;
  RemoteSchedule *schedule;
};
#define UPDATE_REMOTE_SCHEDULE_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&update_remote_schedule_server_request__descriptor) \
, NULL }


/*
 * Phản hồi update 1 lịch của 1 remote
 */
struct  UpdateRemoteScheduleServerResponse
{
  ProtobufCMessage base;
  RemoteSchedule *schedule;
  StatusCode *statuscode;
};
#define UPDATE_REMOTE_SCHEDULE_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&update_remote_schedule_server_response__descriptor) \
, NULL, NULL }


/*
 * Nhận được yêu cầu xóa 1 lịch của 1 remote
 */
struct  DeleteRemoteScheduleServerRequest
{
  ProtobufCMessage base;
  /*
   * Id của remoteScheduleId
   */
  char *remotescheduleid;
};
#define DELETE_REMOTE_SCHEDULE_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&delete_remote_schedule_server_request__descriptor) \
, (char *)protobuf_c_empty_string }


/*
 * Phản hồi xóa 1 lịch của 1 remote
 */
struct  DeleteRemoteScheduleServerResponse
{
  ProtobufCMessage base;
  StatusCode *statuscode;
};
#define DELETE_REMOTE_SCHEDULE_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&delete_remote_schedule_server_response__descriptor) \
, NULL }


/*
 * Nhận được yêu cầu set active lịch của 1 remote
 */
struct  SetActiveRemoteScheduleServerRequest
{
  ProtobufCMessage base;
  protobuf_c_boolean active;
  /*
   * Id của remoteScheduleId
   */
  char *remotescheduleid;
};
#define SET_ACTIVE_REMOTE_SCHEDULE_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&set_active_remote_schedule_server_request__descriptor) \
, 0, (char *)protobuf_c_empty_string }


/*
 * Phản hồi set active lịch của 1 remote
 */
struct  SetActiveRemoteScheduleServerResponse
{
  ProtobufCMessage base;
  StatusCode *statuscode;
};
#define SET_ACTIVE_REMOTE_SCHEDULE_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&set_active_remote_schedule_server_response__descriptor) \
, NULL }


/*
 *----- Yêu cầu remote đa năng -----//
 * Nhận được yêu cầu gửi danh sách remote đa năng
 */
struct  GetRemoteMultisServerRequest
{
  ProtobufCMessage base;
  /*
   * Id của remote
   */
  char *remoteid;
};
#define GET_REMOTE_MULTIS_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_remote_multis_server_request__descriptor) \
, (char *)protobuf_c_empty_string }


/*
 *----- Phản hồi remote đa năng -----//
 * Phản hồi thông tin danh sách remote đa năng
 */
struct  GetRemoteMultisServerResponse
{
  ProtobufCMessage base;
  size_t n_remotemultis;
  RemoteMulti **remotemultis;
  RemoteBrand *brand;
  RemoteACState *remoteacstate;
  StatusCode *statuscode;
};
#define GET_REMOTE_MULTIS_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_remote_multis_server_response__descriptor) \
, 0,NULL, NULL, NULL, NULL }


/*
 * Nhận được yêu cầu thêm mới remote đa năng
 */
struct  AddRemoteMultiServerRequest
{
  ProtobufCMessage base;
  RemoteMulti *remotemulti;
};
#define ADD_REMOTE_MULTI_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&add_remote_multi_server_request__descriptor) \
, NULL }


/*
 * Phản hồi thêm mới remote đa năng
 */
struct  AddRemoteMultiServerResponse
{
  ProtobufCMessage base;
  RemoteMulti *remotemulti;
  StatusCode *statuscode;
};
#define ADD_REMOTE_MULTI_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&add_remote_multi_server_response__descriptor) \
, NULL, NULL }


/*
 * Nhận được yêu cầu xóa remote đa năng
 */
struct  DeleteRemoteMultiServerRequest
{
  ProtobufCMessage base;
  /*
   * Id
   */
  char *id;
};
#define DELETE_REMOTE_MULTI_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&delete_remote_multi_server_request__descriptor) \
, (char *)protobuf_c_empty_string }


/*
 * Phản hồi xóa remote đa năng
 */
struct  DeleteRemoteMultiServerResponse
{
  ProtobufCMessage base;
  StatusCode *statuscode;
};
#define DELETE_REMOTE_MULTI_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&delete_remote_multi_server_response__descriptor) \
, NULL }


/*
 * Nhận được yêu cầu thêm nút lệnh cho remote đa năng
 */
struct  AddRemoteMultiLibraryCmdServerRequest
{
  ProtobufCMessage base;
  RemoteMultiLibraryCmd *remotemultilibrarycmd;
};
#define ADD_REMOTE_MULTI_LIBRARY_CMD_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&add_remote_multi_library_cmd_server_request__descriptor) \
, NULL }


/*
 * Phản hồi thêm nút lệnh cho remote đa năng
 */
struct  AddRemoteMultiLibraryCmdServerResponse
{
  ProtobufCMessage base;
  RemoteMultiLibraryCmd *remotemultilibrarycmd;
  StatusCode *statuscode;
};
#define ADD_REMOTE_MULTI_LIBRARY_CMD_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&add_remote_multi_library_cmd_server_response__descriptor) \
, NULL, NULL }


/*
 * Nhận được yêu cầu xóa nút lệnh đa năng
 */
struct  DeleteRemoteMultiLibraryCmdServerRequest
{
  ProtobufCMessage base;
  /*
   * Id
   */
  char *id;
};
#define DELETE_REMOTE_MULTI_LIBRARY_CMD_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&delete_remote_multi_library_cmd_server_request__descriptor) \
, (char *)protobuf_c_empty_string }


/*
 * Phản hồi xóa nút lệnh đa năng
 */
struct  DeleteRemoteMultiLibraryCmdServerResponse
{
  ProtobufCMessage base;
  StatusCode *statuscode;
};
#define DELETE_REMOTE_MULTI_LIBRARY_CMD_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&delete_remote_multi_library_cmd_server_response__descriptor) \
, NULL }


/*
 * Nhận được yêu cầu thêm nút lệnh cho remote đa năng
 */
struct  UpdateRemoteMultiLibraryCmdServerRequest
{
  ProtobufCMessage base;
  RemoteMultiLibraryCmd *remotemultilibrarycmd;
};
#define UPDATE_REMOTE_MULTI_LIBRARY_CMD_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&update_remote_multi_library_cmd_server_request__descriptor) \
, NULL }


/*
 * Phản hồi thêm nút lệnh cho remote đa năng
 */
struct  UpdateRemoteMultiLibraryCmdServerResponse
{
  ProtobufCMessage base;
  RemoteMultiLibraryCmd *remotemultilibrarycmd;
  StatusCode *statuscode;
};
#define UPDATE_REMOTE_MULTI_LIBRARY_CMD_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&update_remote_multi_library_cmd_server_response__descriptor) \
, NULL, NULL }


/*
 * Nhận được yêu cầu thêm nút lệnh cho remote đa năng
 */
struct  UpdateGroupRemoteMultiLibraryCmdServerRequest
{
  ProtobufCMessage base;
  size_t n_remotemultilibrarycmd;
  RemoteMultiLibraryCmd **remotemultilibrarycmd;
};
#define UPDATE_GROUP_REMOTE_MULTI_LIBRARY_CMD_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&update_group_remote_multi_library_cmd_server_request__descriptor) \
, 0,NULL }


/*
 * Phản hồi thêm nút lệnh cho remote đa năng
 */
struct  UpdateGroupRemoteMultiLibraryCmdServerResponse
{
  ProtobufCMessage base;
  size_t n_remotemultilibrarycmd;
  RemoteMultiLibraryCmd **remotemultilibrarycmd;
  StatusCode *statuscode;
};
#define UPDATE_GROUP_REMOTE_MULTI_LIBRARY_CMD_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&update_group_remote_multi_library_cmd_server_response__descriptor) \
, 0,NULL, NULL }


struct  ChangeRemoteBrandRemoteRequest
{
  ProtobufCMessage base;
  char *remoteid;
  char *remotebrandmodelid;
};
#define CHANGE_REMOTE_BRAND_REMOTE_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&change_remote_brand_remote_request__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  ChangeRemoteBrandRemoteResponse
{
  ProtobufCMessage base;
  StatusCode *statuscode;
};
#define CHANGE_REMOTE_BRAND_REMOTE_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&change_remote_brand_remote_response__descriptor) \
, NULL }


struct  ControlRemoteACCommandRequest
{
  ProtobufCMessage base;
  char *remoteid;
  RemoteACState *remoteacstate;
};
#define CONTROL_REMOTE_ACCOMMAND_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&control_remote_accommand_request__descriptor) \
, (char *)protobuf_c_empty_string, NULL }


struct  ControlRemoteACCommandResponse
{
  ProtobufCMessage base;
  StatusCode *statuscode;
};
#define CONTROL_REMOTE_ACCOMMAND_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&control_remote_accommand_response__descriptor) \
, NULL }


/*
 *----- Yêu cầu kịch bản -----//
 * Nhận được yêu cầu gửi danh sách kịch bản
 */
struct  GetScenesServerRequest
{
  ProtobufCMessage base;
  /*
   * Id của home
   */
  char *homeid;
};
#define GET_SCENES_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_scenes_server_request__descriptor) \
, (char *)protobuf_c_empty_string }


/*
 *----- Phản hồi kịch bản -----//
 * Phản hồi thông tin danh sách các kịch bản
 */
struct  GetScenesServerResponse
{
  ProtobufCMessage base;
  size_t n_scenes;
  Scene **scenes;
  StatusCode *statuscode;
};
#define GET_SCENES_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_scenes_server_response__descriptor) \
, 0,NULL, NULL }


/*
 * Nhận được yêu cầu gửi thông tin chi tiết 1 kịch bản
 */
struct  GetSceneServerRequest
{
  ProtobufCMessage base;
  /*
   * Id của Scene
   */
  char *sceneid;
};
#define GET_SCENE_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_scene_server_request__descriptor) \
, (char *)protobuf_c_empty_string }


/*
 * Phản hồi thông tin chi tiết của 1 kịch bản
 */
struct  GetSceneServerResponse
{
  ProtobufCMessage base;
  Scene *scene;
  StatusCode *statuscode;
};
#define GET_SCENE_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_scene_server_response__descriptor) \
, NULL, NULL }


/*
 * Nhận được yêu cầu thêm mới 1 kịch bản
 */
struct  AddSceneServerRequest
{
  ProtobufCMessage base;
  Scene *scene;
};
#define ADD_SCENE_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&add_scene_server_request__descriptor) \
, NULL }


/*
 * Phản hồi thông tin thêm mới 1 kịch bản
 */
struct  AddSceneServerResponse
{
  ProtobufCMessage base;
  Scene *scene;
  StatusCode *statuscode;
};
#define ADD_SCENE_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&add_scene_server_response__descriptor) \
, NULL, NULL }


/*
 * Nhận được yêu cầu update 1 kịch bản
 */
struct  UpdateSceneServerRequest
{
  ProtobufCMessage base;
  Scene *scene;
};
#define UPDATE_SCENE_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&update_scene_server_request__descriptor) \
, NULL }


/*
 * Phản hồi thông tin update 1 kịch bản
 */
struct  UpdateSceneServerResponse
{
  ProtobufCMessage base;
  Scene *scene;
  StatusCode *statuscode;
};
#define UPDATE_SCENE_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&update_scene_server_response__descriptor) \
, NULL, NULL }


/*
 * Nhận được yêu cầu xóa 1 kịch bản
 */
struct  DeleteSceneServerRequest
{
  ProtobufCMessage base;
  /*
   * Id của Scene
   */
  char *sceneid;
};
#define DELETE_SCENE_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&delete_scene_server_request__descriptor) \
, (char *)protobuf_c_empty_string }


/*
 * Phản hồi thông tin xóa 1 kịch bản
 */
struct  DeleteSceneServerResponse
{
  ProtobufCMessage base;
  /*
   * Id của Scene
   */
  char *sceneid;
  StatusCode *statuscode;
};
#define DELETE_SCENE_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&delete_scene_server_response__descriptor) \
, (char *)protobuf_c_empty_string, NULL }


/*
 * Nhận yêu cầu xóa điều kiện kịch bản
 */
struct  DeleteSwitcherConditionServerRequest
{
  ProtobufCMessage base;
  /*
   * Id của Scene
   */
  char *sceneid;
};
#define DELETE_SWITCHER_CONDITION_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&delete_switcher_condition_server_request__descriptor) \
, (char *)protobuf_c_empty_string }


/*
 * Phản hồi yêu cầu xóa điều kiện kịch bản
 */
struct  DeleteSwitcherConditionServerResponse
{
  ProtobufCMessage base;
  StatusCode *statuscode;
};
#define DELETE_SWITCHER_CONDITION_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&delete_switcher_condition_server_response__descriptor) \
, NULL }


/*
 * Nhận yêu cầu xóa một thực thi kịch bản
 */
struct  DeleteSceneActionServerRequest
{
  ProtobufCMessage base;
  /*
   * Id
   */
  char *sceneactionid;
};
#define DELETE_SCENE_ACTION_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&delete_scene_action_server_request__descriptor) \
, (char *)protobuf_c_empty_string }


/*
 * Phản hồi yêu cầu xóa một thực thi kịch bản
 */
struct  DeleteSceneActionServerResponse
{
  ProtobufCMessage base;
  StatusCode *statuscode;
};
#define DELETE_SCENE_ACTION_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&delete_scene_action_server_response__descriptor) \
, NULL }


/*
 * Nhận yêu cầu chạy kịch bản
 */
struct  RunSceneServerRequest
{
  ProtobufCMessage base;
  /*
   * sceneId
   */
  char *sceneid;
};
#define RUN_SCENE_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&run_scene_server_request__descriptor) \
, (char *)protobuf_c_empty_string }


/*
 * Phản hồi chạy kịch bản
 */
struct  RunSceneServerResponse
{
  ProtobufCMessage base;
  StatusCode *statuscode;
};
#define RUN_SCENE_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&run_scene_server_response__descriptor) \
, NULL }


/*
 * Nhận được yêu về cầu kịch bản bắc cầu đến thiết bị
 */
struct  SceneServerRequest
{
  ProtobufCMessage base;
  /*
   * deviceId của thiết bị cần tagret
   */
  char *deviceid;
  /*
   * sceneId
   */
  char *sceneid;
  /*
   * 2: Thiết bị điều khiển
   */
  DeviceInScene *source;
  /*
   * 3: danh sách các thiết bị được điều khiển
   */
  size_t n_target;
  DeviceInScene **target;
  /*
   * 1: Cùng On/Off, 2: Đảo ngược
   */
  uint32_t type;
  /*
   * 1: Add, 2: Edit, 3: Delete
   */
  uint32_t mode;
  ActiveTime *activetime;
};
#define SCENE_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&scene_server_request__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, NULL, 0,NULL, 0, 0, NULL }


/*
 * Phản hồi gửi kịch bản bắc cầu
 */
struct  SceneServerResponse
{
  ProtobufCMessage base;
  StatusCode *statuscode;
};
#define SCENE_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&scene_server_response__descriptor) \
, NULL }


/*
 * Nhận được yêu cầu gửi lại thông tin xác nhận đến thiết bị
 */
struct  SceneRetryConfirmServerRequest
{
  ProtobufCMessage base;
  /*
   * Id của Scene
   */
  char *sceneid;
};
#define SCENE_RETRY_CONFIRM_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&scene_retry_confirm_server_request__descriptor) \
, (char *)protobuf_c_empty_string }


/*
 * Phản hồi thông tin xác nhận đến thiết bị
 */
struct  SceneRetryConfirmServerResponse
{
  ProtobufCMessage base;
  /*
   * sceneId của kịch bản
   */
  char *sceneid;
  StatusCode *statuscode;
};
#define SCENE_RETRY_CONFIRM_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&scene_retry_confirm_server_response__descriptor) \
, (char *)protobuf_c_empty_string, NULL }


/*
 * Enable/Disable ngữ cảnh.
 */
struct  SetSceneStatusServerRequest
{
  ProtobufCMessage base;
  char *sceneid;
  protobuf_c_boolean isenable;
};
#define SET_SCENE_STATUS_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&set_scene_status_server_request__descriptor) \
, (char *)protobuf_c_empty_string, 0 }


struct  SetSceneStatusServerResponse
{
  ProtobufCMessage base;
  StatusCode *statuscode;
};
#define SET_SCENE_STATUS_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&set_scene_status_server_response__descriptor) \
, NULL }


/*
 * Chạy thử kịch bản
 */
struct  TestSceneServerRequest
{
  ProtobufCMessage base;
  Scene *scene;
};
#define TEST_SCENE_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&test_scene_server_request__descriptor) \
, NULL }


struct  TestSceneServerResponse
{
  ProtobufCMessage base;
  StatusCode *statuscode;
};
#define TEST_SCENE_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&test_scene_server_response__descriptor) \
, NULL }


struct  SceneTriggerServerRequest
{
  ProtobufCMessage base;
  char *deviceid;
  /*
   * sceneId
   */
  char *sceneid;
  /*
   * 2: Thiết bị điều khiển
   */
  DeviceInScene *source;
  /*
   * 3: danh sách các thiết bị được điều khiển
   */
  size_t n_target;
  DeviceInScene **target;
  /*
   * 1: Add, 2: Edit, 3: Delete
   */
  uint32_t mode;
};
#define SCENE_TRIGGER_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&scene_trigger_server_request__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, NULL, 0,NULL, 0 }


struct  SceneTriggerServerResponse
{
  ProtobufCMessage base;
  char *sceneid;
  StatusCode *statuscode;
};
#define SCENE_TRIGGER_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&scene_trigger_server_response__descriptor) \
, (char *)protobuf_c_empty_string, NULL }


/*
 *----- Home -----//
 * Nhận được yêu cầu trả về màn hình trang chủ
 */
struct  GetHomeTabServerRequest
{
  ProtobufCMessage base;
  /*
   * Id của nhà
   */
  char *homeid;
};
#define GET_HOME_TAB_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_home_tab_server_request__descriptor) \
, (char *)protobuf_c_empty_string }


/*
 * Phản hồi trả về màn hình trang chủ
 */
struct  GetHomeTabServerResponse
{
  ProtobufCMessage base;
  /*
   * Trạng thái công tắc
   */
  size_t n_statusswitchers;
  Switcher **statusswitchers;
  /*
   * Kịch bản
   */
  size_t n_scenes;
  Scene **scenes;
  /*
   * Yêu thích
   */
  size_t n_favoriteswitchers;
  Switcher **favoriteswitchers;
  size_t n_favoritecurtainswitchers;
  CurtainSwitcher **favoritecurtainswitchers;
  size_t n_favoriteremotes;
  Remote **favoriteremotes;
  /*
   * Đồng hồ điện|nước
   */
  size_t n_meter;
  Meter **meter;
  /*
   * Trạng thái phòng mặc định sẽ lấy phòng khách hoặc phòng trong remote được
   * yêu thích
   */
  AirConditionerState *statusroom;
  /*
   * Trả lại HomeId để App biết là nhà nào
   */
  char *homeid;
  size_t n_favoritemotions;
  Motion **favoritemotions;
  size_t n_favoritehomekits;
  Homekit **favoritehomekits;
  size_t n_favoritebuttons;
  Button **favoritebuttons;
  size_t n_favoritegroupcontrols;
  GroupControl **favoritegroupcontrols;
  /*
   * Tiện ích mở rộng, default = 0
   */
  uint32_t featurecode;
  /*
   * Trạng thái máy lạnh
   */
  size_t n_statusremotes;
  Remote **statusremotes;
  /*
   * Trạng thái rèm cửa
   */
  size_t n_statuscurtainswitchers;
  CurtainSwitcher **statuscurtainswitchers;
  /*
   * Yêu thích Touch Panel
   */
  size_t n_touchpanels;
  TouchPanel **touchpanels;
  StatusCode *statuscode;
};
#define GET_HOME_TAB_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_home_tab_server_response__descriptor) \
, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0,NULL, NULL, (char *)protobuf_c_empty_string, 0,NULL, 0,NULL, 0,NULL, 0,NULL, 0, 0,NULL, 0,NULL, 0,NULL, NULL }


/*
 *----- Thiết bị điện trong nhà, nhóm theo phòng -----//
 * Nhận được yêu cầu trả về màn hình thiết bị điện
 */
struct  GetElectricTabServerRequest
{
  ProtobufCMessage base;
  /*
   * HomeId của nhà
   */
  char *homeid;
};
#define GET_ELECTRIC_TAB_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_electric_tab_server_request__descriptor) \
, (char *)protobuf_c_empty_string }


/*
 * Phản hồi trả về màn hình thiết bị điện
 */
struct  GetElectricTabServerResponse
{
  ProtobufCMessage base;
  size_t n_rooms;
  Room **rooms;
  /*
   * Trả về HomeId để app xử lý cho việc chọn nhà cho đúng?
   */
  char *homeid;
  StatusCode *statuscode;
};
#define GET_ELECTRIC_TAB_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_electric_tab_server_response__descriptor) \
, 0,NULL, (char *)protobuf_c_empty_string, NULL }


/*
 *----- Công tắc trong nhà, nhóm theo phòng, xem như như là màn hình tổng hợp
 *-----//
 * Nhận được yêu cầu trả về toàn bộ thiết bị trong nhà, nhóm theo phòng, theo
 * nhóm mặc định là công tắc
 */
struct  GetSwitcherTabServerRequest
{
  ProtobufCMessage base;
  /*
   * Id của nhà
   */
  char *homeid;
  /*
   * Nhóm thiết bị
   */
  GroupDevice group;
};
#define GET_SWITCHER_TAB_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_switcher_tab_server_request__descriptor) \
, (char *)protobuf_c_empty_string, GROUP_DEVICE__SwitcherGroup }


/*
 * Phản hồi yêu cầu trả về toàn bộ thiết bị trong nhà, nhóm theo phòng, theo
 * nhóm mặc định là công tắc
 */
struct  GetSwitcherTabServerResponse
{
  ProtobufCMessage base;
  size_t n_rooms;
  Room **rooms;
  StatusCode *statuscode;
};
#define GET_SWITCHER_TAB_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_switcher_tab_server_response__descriptor) \
, 0,NULL, NULL }


/*
 * Phản hồi thông tin thay đổi ON/OFF của công tắc runtime
 */
struct  SwitcherOnChangedServerResponse
{
  ProtobufCMessage base;
  /*
   * Id của thiết bị để mobile update trạng thái
   */
  char *deviceid;
  /*
   * Công tắc 1,2,3,4
   */
  uint32_t switcher;
  /*
   * Trạng thái ON/OFF
   */
  PowerState powerstate;
  uint32_t totaltimeonorgin;
  uint32_t totaltimeonyear;
  uint32_t totaltimeonmonth;
  uint32_t timeonlastdate;
  uint32_t timeofflastdate;
  StatusCode *statuscode;
};
#define SWITCHER_ON_CHANGED_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&switcher_on_changed_server_response__descriptor) \
, (char *)protobuf_c_empty_string, 0, POWER_STATE__Off, 0, 0, 0, 0, 0, NULL }


/*
 * Phản hồi trạng thái rèm cửa runtime
 */
struct  CurtainSwitcherOnChangedServerResponse
{
  ProtobufCMessage base;
  /*
   * Id của thiết bị để mobile update trạng thái
   */
  char *deviceid;
  /*
   * Phần trăm hướng trong
   */
  uint32_t percentin;
  /*
   * Phần trăm hướng ngoài
   */
  uint32_t percentout;
  StatusCode *statuscode;
};
#define CURTAIN_SWITCHER_ON_CHANGED_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&curtain_switcher_on_changed_server_response__descriptor) \
, (char *)protobuf_c_empty_string, 0, 0, NULL }


/*
 * Phản hồi state của điều hòa runtime
 */
struct  AirConditionerOnChangedServerResponse
{
  ProtobufCMessage base;
  /*
   * Id của thiết bị để mobile update trạng thái
   */
  char *deviceid;
  AirConditionerState *state;
  StatusCode *statuscode;
};
#define AIR_CONDITIONER_ON_CHANGED_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&air_conditioner_on_changed_server_response__descriptor) \
, (char *)protobuf_c_empty_string, NULL, NULL }


/*
 * Phản hồi thông tin sau khi thực hiện lệnh remote/runtime nhưng chỉ có 1 chiều
 */
struct  RemoteOnChangedServerResponse
{
  ProtobufCMessage base;
  StatusCode *statuscode;
};
#define REMOTE_ON_CHANGED_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&remote_on_changed_server_response__descriptor) \
, NULL }


/*
 * Phản hồi thông tin thay đổi các chỉ số của thiết bị điện/nước runtime
 */
struct  MeterOnChangedServerResponse
{
  ProtobufCMessage base;
  /*
   * Meter
   */
  Meter *meter;
  StatusCode *statuscode;
};
#define METER_ON_CHANGED_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&meter_on_changed_server_response__descriptor) \
, NULL, NULL }


/*
 * Phản hồi thông tin kết nối của các thiết bị runtime
 */
struct  DeviceOnChangedDeviceServerResponse
{
  ProtobufCMessage base;
  /*
   * DeviceId cho việc đồng bộ tài khoản nhiều thiết bị
   */
  char *deviceid;
  /*
   * Offline/Online/Disconect
   */
  ConnectionState connectionstate;
  uint32_t totaltimeonorgin;
  uint32_t totaltimeonyear;
  uint32_t totaltimeonmonth;
  uint32_t timeonlastdate;
  uint32_t timeofflastdate;
  char *name;
  char *model;
  StatusCode *statuscode;
};
#define DEVICE_ON_CHANGED_DEVICE_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&device_on_changed_device_server_response__descriptor) \
, (char *)protobuf_c_empty_string, CONNECTION_STATE__Offline, 0, 0, 0, 0, 0, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, NULL }


/*
 * Phản hồi thông tin phần trăm cập nhật firmware cho tất cả thiết bị runtime
 */
struct  ProgressUpdateFirmwareOnChangedDeviceServerResponse
{
  ProtobufCMessage base;
  /*
   * DeviceId cho việc đồng bộ tài khoản nhiều thiết bị
   */
  char *deviceid;
  /*
   * DeviceId cho việc đồng bộ tài khoản nhiều thiết bị
   */
  uint32_t percent;
  StatusCode *statuscode;
};
#define PROGRESS_UPDATE_FIRMWARE_ON_CHANGED_DEVICE_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&progress_update_firmware_on_changed_device_server_response__descriptor) \
, (char *)protobuf_c_empty_string, 0, NULL }


/*
 * Phản hồi content firmware theo packed cho thiết bị
 */
struct  DownloadFirmwareOnChangedDeviceServerResponse
{
  ProtobufCMessage base;
  /*
   * DeviceId cho việc đồng bộ tài khoản nhiều thiết bị
   */
  char *deviceid;
  /*
   * HardwareId thiết bị khi qua Root
   */
  char *hardwareid;
  /*
   * Bytes data
   */
  ProtobufCBinaryData data;
  /*
   *  Kích cỡ thực của dữ liệu trả về
   */
  uint32_t datasize;
  /*
   * Vị trí index hiện tại bắt đầu từ 0
   */
  uint32_t pageindex;
  /*
   * Tổng page
   */
  uint32_t totalpage;
  /*
   * Kích cỡ của array buffer(default = 1024)
   */
  uint32_t pagesize;
  /*
   * Kích cỡ file đơn vị là byte
   */
  uint32_t filesize;
  StatusCode *statuscode;
};
#define DOWNLOAD_FIRMWARE_ON_CHANGED_DEVICE_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&download_firmware_on_changed_device_server_response__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, {0,NULL}, 0, 0, 0, 0, 0, NULL }


/*
 * Phản hồi trạng thái của thiết bị chuyển động
 */
struct  MotionOnChangedServerResponse
{
  ProtobufCMessage base;
  /*
   * Id của thiết bị chuyển động
   */
  char *deviceid;
  MotionState state;
  EnvironmentSensorReport *sensorreport;
  float batterycapacity;
  StatusCode *statuscode;
};
#define MOTION_ON_CHANGED_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&motion_on_changed_server_response__descriptor) \
, (char *)protobuf_c_empty_string, MOTION_STATE__MotionNone, NULL, 0, NULL }


/*
 * Phản hồi trạng thái kịch bản runtime
 */
struct  SceneOnChangedServerResponse
{
  ProtobufCMessage base;
  /*
   * sceneId của kịch bản
   */
  char *sceneid;
  /*
   * đã xác nhận
   */
  protobuf_c_boolean confirmed;
  /*
   * 1: Add, 2: Edit, 3: Delete
   */
  uint32_t mode;
  StatusCode *statuscode;
};
#define SCENE_ON_CHANGED_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&scene_on_changed_server_response__descriptor) \
, (char *)protobuf_c_empty_string, 0, 0, NULL }


/*
 * Phản hồi trạng thái của thiết bị Homekit
 */
struct  HomekitOnChangedServerResponse
{
  ProtobufCMessage base;
  /*
   * Id của thiết bị homekit
   */
  char *deviceid;
  HomekitMode homekitmode;
  StatusCode *statuscode;
};
#define HOMEKIT_ON_CHANGED_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&homekit_on_changed_server_response__descriptor) \
, (char *)protobuf_c_empty_string, HOMEKIT_MODE__HomekitNormalMode, NULL }


/*
 * Phản hồi trạng thái của thiết bị nút nhấn
 */
struct  ButtonOnChangedServerResponse
{
  ProtobufCMessage base;
  /*
   * Id của thiết bị nút nhấn
   */
  char *deviceid;
  ButtonState state;
  uint32_t index;
  float batterycapacity;
  StatusCode *statuscode;
};
#define BUTTON_ON_CHANGED_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&button_on_changed_server_response__descriptor) \
, (char *)protobuf_c_empty_string, BUTTON_STATE__Nothing, 0, 0, NULL }


/*
 * Phản hồi trạng thái của thiết bị nhóm
 */
struct  GroupControlOnChangedServerResponse
{
  ProtobufCMessage base;
  /*
   * Id của thiết bị nhóm
   */
  char *deviceid;
  /*
   */
  ControlState *state;
  StatusCode *statuscode;
};
#define GROUP_CONTROL_ON_CHANGED_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&group_control_on_changed_server_response__descriptor) \
, (char *)protobuf_c_empty_string, NULL, NULL }


struct  LedDriverOnChangedServerResponse
{
  ProtobufCMessage base;
  char *ledid;
  PowerState powerstate;
  int32_t brightnesspercent;
  char *roomid;
  size_t n_leditems;
  LedItem **leditems;
  char *leddriverid;
  StatusCode *statuscode;
};
#define LED_DRIVER_ON_CHANGED_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&led_driver_on_changed_server_response__descriptor) \
, (char *)protobuf_c_empty_string, POWER_STATE__Off, 0, (char *)protobuf_c_empty_string, 0,NULL, (char *)protobuf_c_empty_string, NULL }


struct  EnvironmentSensorOnChangedServerResponse
{
  ProtobufCMessage base;
  char *id;
  char *deviceid;
  EnvironmentSensorReport *environmentsensorreport;
  int32_t battery;
  StatusCode *statuscode;
};
#define ENVIRONMENT_SENSOR_ON_CHANGED_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&environment_sensor_on_changed_server_response__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, NULL, 0, NULL }


struct  SmartPlugOnChangedServerResponse
{
  ProtobufCMessage base;
  char *id;
  char *deviceid;
  float amp;
  float power;
  float volt;
  StatusCode *statuscode;
};
#define SMART_PLUG_ON_CHANGED_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&smart_plug_on_changed_server_response__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, 0, 0, NULL }


/*
 * Phản hồi trạng thái động cơ rèm cửa runtime
 */
struct  CurtainOnChangedServerResponse
{
  ProtobufCMessage base;
  /*
   * Id của thiết bị để mobile update trạng thái
   */
  char *deviceid;
  /*
   * Phần trăm
   */
  uint32_t percent;
  StatusCode *statuscode;
};
#define CURTAIN_ON_CHANGED_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&curtain_on_changed_server_response__descriptor) \
, (char *)protobuf_c_empty_string, 0, NULL }


/*
 * Nhận được yêu cầu echo message
 */
struct  EchoServerRequest
{
  ProtobufCMessage base;
  /*
   * Message gửi lên
   */
  char *message;
  /*
   * Loại echo
   */
  TypeEcho type;
};
#define ECHO_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&echo_server_request__descriptor) \
, (char *)protobuf_c_empty_string, TYPE_ECHO__Echo }


/*
 * Phản hồi yêu cầu echo message
 */
struct  EchoServerResponse
{
  ProtobufCMessage base;
  /*
   * Message gửi lên
   */
  char *message;
  /*
   * Loại echo
   */
  TypeEcho type;
  StatusCode *statuscode;
};
#define ECHO_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&echo_server_response__descriptor) \
, (char *)protobuf_c_empty_string, TYPE_ECHO__Echo, NULL }


/*
 * Nhận được yêu cầu thay đổi trạng thái của PIR
 */
struct  MotionServerRequest
{
  ProtobufCMessage base;
  /*
   * Id của thiết bị
   */
  char *deviceid;
  /*
   * State của PIR
   */
  MotionState motionstate;
  MotionSensorType type;
};
#define MOTION_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&motion_server_request__descriptor) \
, (char *)protobuf_c_empty_string, MOTION_STATE__MotionNone, MOTION_SENSOR_TYPE__MotionSensor }


/*
 * Phản hồi trạng thái của PIR
 */
struct  MotionServerResponse
{
  ProtobufCMessage base;
  StatusCode *statuscode;
};
#define MOTION_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&motion_server_response__descriptor) \
, NULL }


/*
 * Nhận được yêu cầu trả về thông tin của Motion
 */
struct  GetMotionServerRequest
{
  ProtobufCMessage base;
  /*
   * Id
   */
  char *motionid;
  MotionSensorType type;
};
#define GET_MOTION_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_motion_server_request__descriptor) \
, (char *)protobuf_c_empty_string, MOTION_SENSOR_TYPE__MotionSensor }


/*
 * Phản hồi trả về thông tin Motion
 */
struct  GetMotionServerResponse
{
  ProtobufCMessage base;
  Motion *motion;
  StatusCode *statuscode;
};
#define GET_MOTION_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_motion_server_response__descriptor) \
, NULL, NULL }


/*
 * Nhận được yêu cầu cập nhật Motion
 */
struct  UpdateMotionServerRequest
{
  ProtobufCMessage base;
  Motion *motion;
};
#define UPDATE_MOTION_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&update_motion_server_request__descriptor) \
, NULL }


/*
 * Phản hồi cập nhật thông tin rèm cửa
 */
struct  UpdateMotionServerResponse
{
  ProtobufCMessage base;
  StatusCode *statuscode;
};
#define UPDATE_MOTION_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&update_motion_server_response__descriptor) \
, NULL }


/*
 * Nhận được yêu cầu trả về thông tin của Homekit
 */
struct  GetHomekitInfoServerRequest
{
  ProtobufCMessage base;
  /*
   * Id
   */
  char *homekitid;
};
#define GET_HOMEKIT_INFO_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_homekit_info_server_request__descriptor) \
, (char *)protobuf_c_empty_string }


/*
 * Phản hồi trả về thông tin Homekit
 */
struct  GetHomekitInfoServerResponse
{
  ProtobufCMessage base;
  Homekit *homekit;
  StatusCode *statuscode;
};
#define GET_HOMEKIT_INFO_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_homekit_info_server_response__descriptor) \
, NULL, NULL }


/*
 * Nhận được yêu cầu cập nhật Homekit
 */
struct  UpdateHomekitServerRequest
{
  ProtobufCMessage base;
  Homekit *homekit;
};
#define UPDATE_HOMEKIT_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&update_homekit_server_request__descriptor) \
, NULL }


/*
 * Phản hồi cập nhật thông tin rèm cửa
 */
struct  UpdateHomekitServerResponse
{
  ProtobufCMessage base;
  StatusCode *statuscode;
};
#define UPDATE_HOMEKIT_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&update_homekit_server_response__descriptor) \
, NULL }


/*
 * Yêu cầu chuyển mode homekit
 */
struct  SetHomekitModeServerRequest
{
  ProtobufCMessage base;
  char *deviceid;
  HomekitMode homekitmode;
};
#define SET_HOMEKIT_MODE_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&set_homekit_mode_server_request__descriptor) \
, (char *)protobuf_c_empty_string, HOMEKIT_MODE__HomekitNormalMode }


/*
 * Phản hồi yêu cầu chuyển mode homekit
 */
struct  SetHomekitModeServerResponse
{
  ProtobufCMessage base;
  StatusCode *statuscode;
};
#define SET_HOMEKIT_MODE_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&set_homekit_mode_server_response__descriptor) \
, NULL }


/*
 * Nhận được yêu cầu trả về danh sách dự án
 */
struct  GetProjectsServerRequest
{
  ProtobufCMessage base;
  char *keysearch;
};
#define GET_PROJECTS_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_projects_server_request__descriptor) \
, (char *)protobuf_c_empty_string }


/*
 * Phản hồi thông tin danh sách dự án
 */
struct  GetProjectsServerResponse
{
  ProtobufCMessage base;
  size_t n_projects;
  Project **projects;
  StatusCode *statuscode;
};
#define GET_PROJECTS_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_projects_server_response__descriptor) \
, 0,NULL, NULL }


/*
 * Nhận được yêu cầu trả về danh sách tòa
 */
struct  GetBuildingsServerRequest
{
  ProtobufCMessage base;
  char *projectid;
  char *keysearch;
};
#define GET_BUILDINGS_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_buildings_server_request__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/*
 * Phản hồi thông tin danh sách tòa
 */
struct  GetBuildingsServerResponse
{
  ProtobufCMessage base;
  size_t n_buildings;
  Building **buildings;
  StatusCode *statuscode;
};
#define GET_BUILDINGS_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_buildings_server_response__descriptor) \
, 0,NULL, NULL }


/*
 * Nhận được yêu cầu trả về danh sách tầng
 */
struct  GetFloorsServerRequest
{
  ProtobufCMessage base;
  char *buildingid;
  char *keysearch;
};
#define GET_FLOORS_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_floors_server_request__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/*
 * Phản hồi thông tin danh sách tầng
 */
struct  GetFloorsServerResponse
{
  ProtobufCMessage base;
  size_t n_floors;
  Floor **floors;
  StatusCode *statuscode;
};
#define GET_FLOORS_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_floors_server_response__descriptor) \
, 0,NULL, NULL }


/*
 * Nhận được yêu cầu trả về danh sách căn hộ
 */
struct  GetApartmentsServerRequest
{
  ProtobufCMessage base;
  char *floorid;
  char *keysearch;
};
#define GET_APARTMENTS_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_apartments_server_request__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/*
 * Phản hồi thông tin danh sách căn hộ
 */
struct  GetApartmentsServerResponse
{
  ProtobufCMessage base;
  size_t n_apartments;
  Apartment **apartments;
  StatusCode *statuscode;
};
#define GET_APARTMENTS_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_apartments_server_response__descriptor) \
, 0,NULL, NULL }


/*
 * Nhận được yêu cầu thêm thành viên mới
 */
struct  AddUserHomeServerRequest
{
  ProtobufCMessage base;
  UserHome *userhome;
};
#define ADD_USER_HOME_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&add_user_home_server_request__descriptor) \
, NULL }


/*
 * Phản hồi thông tin thêm thành viên mới
 */
struct  AddUserHomeServerResponse
{
  ProtobufCMessage base;
  UserHome *userhome;
  StatusCode *statuscode;
};
#define ADD_USER_HOME_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&add_user_home_server_response__descriptor) \
, NULL, NULL }


/*
 * Nhận được yêu cầu xóa thành viên
 */
struct  DeleteUserHomeServerRequest
{
  ProtobufCMessage base;
  char *id;
};
#define DELETE_USER_HOME_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&delete_user_home_server_request__descriptor) \
, (char *)protobuf_c_empty_string }


/*
 * Phản hồi thông tin xóa thành viên
 */
struct  DeleteUserHomeServerResponse
{
  ProtobufCMessage base;
  StatusCode *statuscode;
};
#define DELETE_USER_HOME_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&delete_user_home_server_response__descriptor) \
, NULL }


/*
 * Thông báo 
 */
struct  GetUnreadServerRequest
{
  ProtobufCMessage base;
};
#define GET_UNREAD_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_unread_server_request__descriptor) \
 }


struct  GetUnreadServerResponse
{
  ProtobufCMessage base;
  uint64_t unread;
  StatusCode *statuscode;
};
#define GET_UNREAD_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_unread_server_response__descriptor) \
, 0, NULL }


struct  SetReadServerRequest
{
  ProtobufCMessage base;
};
#define SET_READ_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&set_read_server_request__descriptor) \
 }


struct  SetReadServerResponse
{
  ProtobufCMessage base;
  char *id;
  StatusCode *statuscode;
};
#define SET_READ_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&set_read_server_response__descriptor) \
, (char *)protobuf_c_empty_string, NULL }


/*
 * Nhận được yêu cầu gửi danh sách background cho client
 */
struct  GetBackgroundsServerRequest
{
  ProtobufCMessage base;
};
#define GET_BACKGROUNDS_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_backgrounds_server_request__descriptor) \
 }


/*
 * Phẩn hồi danh sách background cần trả về cho client
 */
struct  GetBackgroundsServerResponse
{
  ProtobufCMessage base;
  size_t n_backgrounds;
  ImageNetwork **backgrounds;
  StatusCode *statuscode;
};
#define GET_BACKGROUNDS_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_backgrounds_server_response__descriptor) \
, 0,NULL, NULL }


/*
 * Nhận được yêu cầu gửi danh sách AutoOff cho client
 */
struct  GetAutoOffsServerRequest
{
  ProtobufCMessage base;
};
#define GET_AUTO_OFFS_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_auto_offs_server_request__descriptor) \
 }


/*
 * Phẩn hồi danh sách AutoOff cần trả về cho client
 */
struct  GetAutoOffsServerResponse
{
  ProtobufCMessage base;
  size_t n_autooffs;
  uint32_t *autooffs;
  StatusCode *statuscode;
};
#define GET_AUTO_OFFS_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_auto_offs_server_response__descriptor) \
, 0,NULL, NULL }


/*
 * Nhận được yêu cầu gửi danh sách loại thiết bị
 */
struct  GetTypeDevicesServerRequest
{
  ProtobufCMessage base;
  /*
   * Nhóm thiết bị
   */
  GroupDevice group;
};
#define GET_TYPE_DEVICES_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_type_devices_server_request__descriptor) \
, GROUP_DEVICE__SwitcherGroup }


/*
 * Phẩn hồi danh sách loại thiết bị
 */
struct  GetTypeDevicesServerResponse
{
  ProtobufCMessage base;
  size_t n_typedevices;
  TypeDevice *typedevices;
  StatusCode *statuscode;
};
#define GET_TYPE_DEVICES_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_type_devices_server_response__descriptor) \
, 0,NULL, NULL }


/*
 * Nhận được yêu cầu trả về thông tin của Button
 */
struct  GetButtonInfoServerRequest
{
  ProtobufCMessage base;
  /*
   * Id
   */
  char *buttonid;
};
#define GET_BUTTON_INFO_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_button_info_server_request__descriptor) \
, (char *)protobuf_c_empty_string }


/*
 * Phản hồi trả về thông tin Button
 */
struct  GetButtonInfoServerResponse
{
  ProtobufCMessage base;
  Button *button;
  StatusCode *statuscode;
};
#define GET_BUTTON_INFO_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_button_info_server_response__descriptor) \
, NULL, NULL }


/*
 * Nhận được yêu cầu cập nhật Button
 */
struct  UpdateButtonServerRequest
{
  ProtobufCMessage base;
  Button *button;
};
#define UPDATE_BUTTON_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&update_button_server_request__descriptor) \
, NULL }


/*
 * Phản hồi cập nhật thông tin Button
 */
struct  UpdateButtonServerResponse
{
  ProtobufCMessage base;
  StatusCode *statuscode;
};
#define UPDATE_BUTTON_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&update_button_server_response__descriptor) \
, NULL }


/*
 * Nhận được yêu cầu thay đổi trạng thái nhóm
 */
struct  GroupControlServerRequest
{
  ProtobufCMessage base;
  /*
   * Id của thiết bị
   */
  char *deviceid;
  /*
   * Trạng thái hiện tại của nhóm
   */
  ControlState *state;
};
#define GROUP_CONTROL_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&group_control_server_request__descriptor) \
, (char *)protobuf_c_empty_string, NULL }


/*
 * Phản hồi thay đổi trạng thái nhóm
 */
struct  GroupControlServerResponse
{
  ProtobufCMessage base;
  /*
   * Trạng thái hiện tại của nhóm
   */
  ControlState *state;
  StatusCode *statuscode;
};
#define GROUP_CONTROL_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&group_control_server_response__descriptor) \
, NULL, NULL }


/*
 * Nhận được yêu cầu trả về thông tin của nhóm thiết bị
 */
struct  GetGroupControlInfoServerRequest
{
  ProtobufCMessage base;
  /*
   * Id
   */
  char *id;
};
#define GET_GROUP_CONTROL_INFO_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_group_control_info_server_request__descriptor) \
, (char *)protobuf_c_empty_string }


/*
 * Phản hồi trả về thông tin nhóm thiết bị
 */
struct  GetGroupControlInfoServerResponse
{
  ProtobufCMessage base;
  GroupControl *groupcontrol;
  StatusCode *statuscode;
};
#define GET_GROUP_CONTROL_INFO_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_group_control_info_server_response__descriptor) \
, NULL, NULL }


/*
 * Nhận được yêu cầu trả về danh sách thiết bị nhóm theo phòng
 */
struct  GetControlsServerRequest
{
  ProtobufCMessage base;
  /*
   * GroupControlId
   */
  char *groupcontrolid;
};
#define GET_CONTROLS_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_controls_server_request__descriptor) \
, (char *)protobuf_c_empty_string }


/*
 * Phản hồi trả về về danh sách thiết bị nhóm theo phòng
 */
struct  GetControlsServerResponse
{
  ProtobufCMessage base;
  size_t n_rooms;
  Room **rooms;
  StatusCode *statuscode;
};
#define GET_CONTROLS_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_controls_server_response__descriptor) \
, 0,NULL, NULL }


/*
 * Nhận được yêu cầu thêm nhóm thiết bị
 */
struct  AddGroupControlServerRequest
{
  ProtobufCMessage base;
  GroupControl *groupcontrol;
};
#define ADD_GROUP_CONTROL_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&add_group_control_server_request__descriptor) \
, NULL }


/*
 * Phản hồi thêm thông tin nhóm thiết bị
 */
struct  AddGroupControlServerResponse
{
  ProtobufCMessage base;
  GroupControl *groupcontrol;
  StatusCode *statuscode;
};
#define ADD_GROUP_CONTROL_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&add_group_control_server_response__descriptor) \
, NULL, NULL }


/*
 * Nhận được yêu sửa nhóm thiết bị
 */
struct  UpdateGroupControlServerRequest
{
  ProtobufCMessage base;
  GroupControl *groupcontrol;
};
#define UPDATE_GROUP_CONTROL_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&update_group_control_server_request__descriptor) \
, NULL }


/*
 * Phản hồi sửa thông tin nhóm thiết bị
 */
struct  UpdateGroupControlServerResponse
{
  ProtobufCMessage base;
  StatusCode *statuscode;
};
#define UPDATE_GROUP_CONTROL_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&update_group_control_server_response__descriptor) \
, NULL }


/*
 * Nhận được yêu cầu xóa nhóm thiết bị
 */
struct  DeleteGroupControlServerRequest
{
  ProtobufCMessage base;
  char *id;
};
#define DELETE_GROUP_CONTROL_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&delete_group_control_server_request__descriptor) \
, (char *)protobuf_c_empty_string }


/*
 * Phản hồi thông tin xóa nhóm thiết bị
 */
struct  DeleteGroupControlServerResponse
{
  ProtobufCMessage base;
  StatusCode *statuscode;
};
#define DELETE_GROUP_CONTROL_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&delete_group_control_server_response__descriptor) \
, NULL }


/*
 * Điều khiển từng đèn
 */
struct  LedDriverServerRequest
{
  ProtobufCMessage base;
  char *deviceid;
  int32_t index;
  char *roomid;
  PowerState powerstate;
  int32_t brightnesspercent;
  /*
   * Nếu muốn điều khiển nhiều thiết bị thì Index phải là 0
   */
  size_t n_leditems;
  LedItem **leditems;
  /*
   * in binary
   */
  uint32_t groupcontrol;
};
#define LED_DRIVER_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&led_driver_server_request__descriptor) \
, (char *)protobuf_c_empty_string, 0, (char *)protobuf_c_empty_string, POWER_STATE__Off, 0, 0,NULL, 0 }


/*
 * Phản hồi điều khiển từng đèn
 */
struct  LedDriverServerResponse
{
  ProtobufCMessage base;
  char *deviceid;
  char *roomid;
  PowerState powerstate;
  int32_t brightnesspercess;
  StatusCode *statuscode;
};
#define LED_DRIVER_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&led_driver_server_response__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, POWER_STATE__Off, 0, NULL }


/*
 * Lấy thông tin của toàn bộ các đèn
 */
struct  GetLedDriverServerRequest
{
  ProtobufCMessage base;
  char *deviceid;
  char *roomid;
};
#define GET_LED_DRIVER_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_led_driver_server_request__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/*
 * Phản hồi thông tin tất cả các đèn
 */
struct  GetLedDriverServerResponse
{
  ProtobufCMessage base;
  /*
   *  repeated LedItem ledItem = 1;
   */
  LedDriver *leddriver;
  StatusCode *statuscode;
};
#define GET_LED_DRIVER_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_led_driver_server_response__descriptor) \
, NULL, NULL }


/*
 * Lấy thông tin của mỗi đèn
 */
struct  GetLedDriverItemServerRequest
{
  ProtobufCMessage base;
  char *ledid;
  char *roomid;
};
#define GET_LED_DRIVER_ITEM_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_led_driver_item_server_request__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/*
 * Trả về thông tin của mỗi đèn
 */
struct  GetLedDriverItemServerResponse
{
  ProtobufCMessage base;
  LedItem *leditem;
  StatusCode *statuscode;
};
#define GET_LED_DRIVER_ITEM_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_led_driver_item_server_response__descriptor) \
, NULL, NULL }


/*
 * Cập nhật thông tin từng đèn
 */
struct  UpdateLedDriverServerRequest
{
  ProtobufCMessage base;
  char *deviceid;
  char *roomid;
  LedDriver *leddriver;
  int32_t brightnesspercent;
  uint32_t groupcontrol;
  StatusCode *statuscode;
};
#define UPDATE_LED_DRIVER_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&update_led_driver_server_request__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, NULL, 0, 0, NULL }


/*
 * Phản hồi cập nhật thông tin từng đèn
 */
struct  UpdateLedDriverServerResponse
{
  ProtobufCMessage base;
  LedDriver *leddriver;
  char *roomid;
  StatusCode *statuscode;
};
#define UPDATE_LED_DRIVER_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&update_led_driver_server_response__descriptor) \
, NULL, (char *)protobuf_c_empty_string, NULL }


struct  UpdateLedDriverItemServerRequest
{
  ProtobufCMessage base;
  char *deviceid;
  char *roomid;
  LedItem *leditem;
  int32_t brightnesspercent;
  uint32_t groupcontrol;
  StatusCode *statuscode;
};
#define UPDATE_LED_DRIVER_ITEM_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&update_led_driver_item_server_request__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, NULL, 0, 0, NULL }


/*
 * Phản hồi cập nhật thông tin từng đèn
 */
struct  UpdateLedDriverItemServerResponse
{
  ProtobufCMessage base;
  LedItem *leditem;
  char *roomid;
  StatusCode *statuscode;
};
#define UPDATE_LED_DRIVER_ITEM_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&update_led_driver_item_server_response__descriptor) \
, NULL, (char *)protobuf_c_empty_string, NULL }


struct  TouchPanelChangeComponentServerRequest
{
  ProtobufCMessage base;
  char *touchpanelid;
  char *componentid;
  uint32_t index;
  TouchPanelComponentType type;
  uint32_t activemap;
  char *name;
  /*
   * 1: Add, 2: Edit, 3: Delete
   */
  uint32_t mode;
};
#define TOUCH_PANEL_CHANGE_COMPONENT_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&touch_panel_change_component_server_request__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, TOUCH_PANEL_COMPONENT_TYPE__TouchPanelComponentUnknown, 0, (char *)protobuf_c_empty_string, 0 }


struct  TouchPanelControlSwitcherServerRequest
{
  ProtobufCMessage base;
  char *touchpanelid;
  char *switcherid;
  uint32_t switcher;
  PowerState powerstate;
};
#define TOUCH_PANEL_CONTROL_SWITCHER_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&touch_panel_control_switcher_server_request__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, POWER_STATE__Off }


struct  TouchPanelUpdateSwitcherServerRequest
{
  ProtobufCMessage base;
  char *touchpanelid;
  char *switcherid;
  uint32_t index;
  uint32_t activemap;
  char *name;
  ConnectionState connectionstate;
};
#define TOUCH_PANEL_UPDATE_SWITCHER_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&touch_panel_update_switcher_server_request__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, 0, (char *)protobuf_c_empty_string, CONNECTION_STATE__Offline }


struct  TouchPanelControlCurtainSwitcherServerRequest
{
  ProtobufCMessage base;
  char *touchpanelid;
  char *curtainswitcherid;
  uint32_t percentin;
  uint32_t percentout;
};
#define TOUCH_PANEL_CONTROL_CURTAIN_SWITCHER_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&touch_panel_control_curtain_switcher_server_request__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, 0 }


struct  TouchPanelUpdateCurtainSwitcherServerRequest
{
  ProtobufCMessage base;
  char *touchpanelid;
  char *curtainswitcherid;
  char *name;
  ConnectionState connectionstate;
};
#define TOUCH_PANEL_UPDATE_CURTAIN_SWITCHER_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&touch_panel_update_curtain_switcher_server_request__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, CONNECTION_STATE__Offline }


struct  TouchPanelUpdateSceneServerRequest
{
  ProtobufCMessage base;
  char *touchpanelid;
  char *sceneid;
  char *name;
};
#define TOUCH_PANEL_UPDATE_SCENE_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&touch_panel_update_scene_server_request__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  TouchPanelControlLedDriverServerRequest
{
  ProtobufCMessage base;
  char *touchpanelid;
  char *leddriverid;
  PowerState powerstate;
  int32_t brightnesspercent;
};
#define TOUCH_PANEL_CONTROL_LED_DRIVER_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&touch_panel_control_led_driver_server_request__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, POWER_STATE__Off, 0 }


struct  TouchPanelUpdateLedDriverServerRequest
{
  ProtobufCMessage base;
  char *touchpanelid;
  char *leddriverid;
  char *name;
  ConnectionState connectionstate;
};
#define TOUCH_PANEL_UPDATE_LED_DRIVER_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&touch_panel_update_led_driver_server_request__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, CONNECTION_STATE__Offline }


/*
 * Nhận được lệnh điều khiển động cơ rèm cửa
 */
struct  CurtainServerRequest
{
  ProtobufCMessage base;
  char *deviceid;
  uint32_t percent;
  CurtainControlState controlstate;
};
#define CURTAIN_SERVER_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&curtain_server_request__descriptor) \
, (char *)protobuf_c_empty_string, 0, CURTAIN_CONTROL_STATE__CurtainControlUnknown }


/*
 * Phản hồi lệnh điều khiển động cơ rèm cửa
 */
struct  CurtainServerResponse
{
  ProtobufCMessage base;
  StatusCode *statuscode;
};
#define CURTAIN_SERVER_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&curtain_server_response__descriptor) \
, NULL }


/*
 * Auth Message Server 
 */
struct  AuthServerMessage
{
  ProtobufCMessage base;
  /*
   * Đăng nhập hệ thống 
   */
  LoginServerRequest *loginserverrequest;
  LoginServerResponse *loginserverresponse;
  /*
   * RefreshToken 
   */
  RefreshTokenServerRequest *refreshtokenserverrequest;
  RefreshTokenServerResponse *refreshtokenserverresponse;
  /*
   * Gửi mã kích hoạt 
   */
  SendCodeServerRequest *sendcodeserverrequest;
  SendCodeServerResponse *sendcodeserverresponse;
  /*
   * Kiểm tra mã kích hoạt 
   */
  VerifyCodeServerRequest *verifycodeserverrequest;
  VerifyCodeServerResponse *verifycodeserverresponse;
};
#define AUTH_SERVER_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&auth_server_message__descriptor) \
, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL }


/*
 * Tài khoản 
 */
struct  UserServerMessage
{
  ProtobufCMessage base;
  GetUserInfoServerRequest *getuserinfoserverrequest;
  GetUserInfoServerResponse *getuserinfoserverresponse;
  UpdateUserInfoServerRequest *updateuserinfoserverrequest;
  UpdateUserInfoServerResponse *updateuserinfoserverresponse;
  SetOnesignalForUserServerRequest *setonesignalforuserserverrequest;
  SetOnesignalForUserServerResponse *setonesignalforuserserverresponse;
  ChangedHomeForUserServerRequest *changedhomeforuserserverrequest;
  ChangedHomeForUserServerResponse *changedhomeforuserserverresponse;
  GetUsersServerRequest *getusersserverrequest;
  GetUsersServerResponse *getusersserverresponse;
  SearchUserServerRequest *searchuserserverrequest;
  SearchUserServerResponse *searchuserserverresponse;
  AvatarUploadServerRequest *avataruploadserverrequest;
  AvatarUploadServerResponse *avataruploadserverresponse;
  GetUserOtpServerRequest *getuserotpserverrequest;
  GetUserOtpServerResponse *getuserotpserverresponse;
};
#define USER_SERVER_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&user_server_message__descriptor) \
, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL }


/*
 * Nhà 
 */
struct  HomeServerMessage
{
  ProtobufCMessage base;
  GetHomesServerRequest *gethomesserverrequest;
  GetHomesServerResponse *gethomesserverresponse;
  AddHomeServerRequest *addhomeserverrequest;
  AddHomeServerResponse *addhomeserverresponse;
  UpdateHomeServerRequest *updatehomeserverrequest;
  UpdateHomeServerResponse *updatehomeserverresponse;
  DeleteHomeServerRequest *deletehomeserverrequest;
  DeleteHomeServerResponse *deletehomeserverresponse;
  GetCitizenInfoServerRequest *getcitizeninfoserverrequest;
  GetCitizenInfoServerResponse *getcitizeninfoserverresponse;
  SetCitizenServerRequest *setcitizenserverrequest;
  SetCitizenServerResponse *setcitizenserverresponse;
  SetGpsForHomeServerRequest *setgpsforhomeserverrequest;
  SetGpsForHomeServerResponse *setgpsforhomeserverresponse;
  GetHomeInfoServerRequest *gethomeinfoserverrequest;
  GetHomeInfoServerResponse *gethomeinfoserverresponse;
  GetHomesByPhoneServerRequest *gethomesbyphoneserverrequest;
  GetHomesByPhoneServerResponse *gethomesbyphoneserverresponse;
  UploadHomeBackgroundServerRequest *uploadhomebackgroundserverrequest;
  UploadHomeBackgroundServerResponse *uploadhomebackgroundserverresponse;
};
#define HOME_SERVER_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&home_server_message__descriptor) \
, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL }


/*
 * Phòng 
 */
struct  RoomServerMessage
{
  ProtobufCMessage base;
  GetRoomsServerRequest *getroomsserverrequest;
  GetRoomsServerResponse *getroomsserverresponse;
  AddRoomServerRequest *addroomserverrequest;
  AddRoomServerResponse *addroomserverresponse;
  DeleteRoomServerRequest *deleteroomserverrequest;
  DeleteRoomServerResponse *deleteroomserverresponse;
  UpdateRoomServerRequest *updateroomserverrequest;
  UpdateRoomServerResponse *updateroomserverresponse;
  UploadRoomBackgroundServerRequest *uploadroombackgroundserverrequest;
  UploadRoomBackgroundServerResponse *uploadroombackgroundserverresponse;
};
#define ROOM_SERVER_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&room_server_message__descriptor) \
, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL }


/*
 * Thiết bị kết nối wifi Devices 
 */
struct  DeviceServerMessage
{
  ProtobufCMessage base;
  GetDevicesServerRequest *getdevicesserverrequest;
  GetDevicesServerResponse *getdevicesserverresponse;
  GetDeviceServerRequest *getdeviceserverrequest;
  GetDeviceServerResponse *getdeviceserverresponse;
  AddDevicesServerRequest *adddevicesserverrequest;
  AddDevicesServerResponse *adddevicesserverresponse;
  UpdateDeviceServerRequest *updatedeviceserverrequest;
  UpdateDeviceServerResponse *updatedeviceserverresponse;
  DeleteDeviceServerRequest *deletedeviceserverrequest;
  DeleteDeviceServerResponse *deletedeviceserverresponse;
  GetFirmwareLatestDeviceServerRequest *getfirmwarelatestdeviceserverrequest;
  GetFirmwareLatestDeviceServerResponse *getfirmwarelatestdeviceserverresponse;
  DownloadFirmwareDeviceServerRequest *downloadfirmwaredeviceserverrequest;
  DownloadFirmwareDeviceServerResponse *downloadfirmwaredeviceserverresponse;
  ForceUpdateFirmwareDeviceServerRequest *forceupdatefirmwaredeviceserverrequest;
  ForceUpdateFirmwareDeviceServerResponse *forceupdatefirmwaredeviceserverresponse;
  RegisterDeviceServerRequest *registerdeviceserverrequest;
  RegisterDeviceServerResponse *registerdeviceserverresponse;
  UpdateWSEndpointDeviceServerRequest *updatewsendpointdeviceserverrequest;
  UpdateWSEndpointDeviceServerResponse *updatewsendpointdeviceserverresponse;
  ForceUpdateFirmwareAllDevicesByPhoneServerRequest *forceupdatefirmwarealldevicesbyphoneserverrequest;
  ForceUpdateFirmwareAllDevicesByPhoneServerResponse *forceupdatefirmwarealldevicesbyphoneserverresponse;
  ListSceneDeviceServerRequest *listscenedeviceserverrequest;
  ListSceneDeviceServerResponse *listscenedeviceserverresponse;
};
#define DEVICE_SERVER_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&device_server_message__descriptor) \
, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL }


/*
 * Công tắc 
 */
struct  SwitcherServerMessage
{
  ProtobufCMessage base;
  GetSwitchersServerRequest *getswitchersserverrequest;
  GetSwitchersServerResponse *getswitchersserverresponse;
  GetSwitcherServerRequest *getswitcherserverrequest;
  GetSwitcherServerResponse *getswitcherserverresponse;
  GetLogSwitcherServerRequest *getlogswitcherserverrequest;
  GetLogSwitcherServerResponse *getlogswitcherserverresponse;
  GetIconSwitchersServerRequest *geticonswitchersserverrequest;
  GetIconSwitchersServerResponse *geticonswitchersserverresponse;
  UpdateSwitcherServerRequest *updateswitcherserverrequest;
  UpdateSwitcherServerResponse *updateswitcherserverresponse;
  SwitcherServerRequest *switcherserverrequest;
  SwitcherServerResponse *switcherserverresponse;
  GetSwitcherSchedulesServerRequest *getswitcherschedulesserverrequest;
  GetSwitcherSchedulesServerResponse *getswitcherschedulesserverresponse;
  GetSwitcherScheduleServerRequest *getswitcherscheduleserverrequest;
  GetSwitcherScheduleServerResponse *getswitcherscheduleserverresponse;
  GetCountSwitcherScheduleServerRequest *getcountswitcherscheduleserverrequest;
  GetCountSwitcherScheduleServerResponse *getcountswitcherscheduleserverresponse;
  AddSwitcherScheduleServerRequest *addswitcherscheduleserverrequest;
  AddSwitcherScheduleServerResponse *addswitcherscheduleserverresponse;
  UpdateSwitcherScheduleServerRequest *updateswitcherscheduleserverrequest;
  UpdateSwitcherScheduleServerResponse *updateswitcherscheduleserverresponse;
  DeleteSwitcherScheduleServerRequest *deleteswitcherscheduleserverrequest;
  DeleteSwitcherScheduleServerResponse *deleteswitcherscheduleserverresponse;
  SetActiveSwitcherScheduleServerRequest *setactiveswitcherscheduleserverrequest;
  SetActiveSwitcherScheduleServerResponse *setactiveswitcherscheduleserverresponse;
};
#define SWITCHER_SERVER_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&switcher_server_message__descriptor) \
, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL }


/*
 * Rèm cửa 
 */
struct  CurtainSwitcherServerMessage
{
  ProtobufCMessage base;
  GetCurtainSwitcherServerRequest *getcurtainswitcherserverrequest;
  GetCurtainSwitcherServerResponse *getcurtainswitcherserverresponse;
  UpdateCurtainSwitcherServerRequest *updatecurtainswitcherserverrequest;
  UpdateCurtainSwitcherServerResponse *updatecurtainswitcherserverresponse;
  GetCurtainSwitcherStateServerRequest *getcurtainswitcherstateserverrequest;
  GetCurtainSwitcherStateServerResponse *getcurtainswitcherstateserverresponse;
  CurtainSwitcherServerRequest *curtainswitcherserverrequest;
  CurtainSwitcherServerResponse *curtainswitcherserverresponse;
  GetCurtainSwitcherSchedulesServerRequest *getcurtainswitcherschedulesserverrequest;
  GetCurtainSwitcherSchedulesServerResponse *getcurtainswitcherschedulesserverresponse;
  GetCurtainSwitcherScheduleServerRequest *getcurtainswitcherscheduleserverrequest;
  GetCurtainSwitcherScheduleServerResponse *getcurtainswitcherscheduleserverresponse;
  GetCountCurtainSwitcherScheduleServerRequest *getcountcurtainswitcherscheduleserverrequest;
  GetCountCurtainSwitcherScheduleServerResponse *getcountcurtainswitcherscheduleserverresponse;
  AddCurtainSwitcherScheduleServerRequest *addcurtainswitcherscheduleserverrequest;
  AddCurtainSwitcherScheduleServerResponse *addcurtainswitcherscheduleserverresponse;
  UpdateCurtainSwitcherScheduleServerRequest *updatecurtainswitcherscheduleserverrequest;
  UpdateCurtainSwitcherScheduleServerResponse *updatecurtainswitcherscheduleserverresponse;
  DeleteCurtainSwitcherScheduleServerRequest *deletecurtainswitcherscheduleserverrequest;
  DeleteCurtainSwitcherScheduleServerResponse *deletecurtainswitcherscheduleserverresponse;
  SetActiveCurtainSwitcherScheduleServerRequest *setactivecurtainswitcherscheduleserverrequest;
  SetActiveCurtainSwitcherScheduleServerResponse *setactivecurtainswitcherscheduleserverresponse;
};
#define CURTAIN_SWITCHER_SERVER_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&curtain_switcher_server_message__descriptor) \
, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL }


/*
 * Đồng hồ điện/nước 
 */
struct  MeterServerMessage
{
  ProtobufCMessage base;
  GetMeterServerRequest *getmeterserverrequest;
  GetMeterServerResponse *getmeterserverresponse;
  UpdateMeterServerRequest *updatemeterserverrequest;
  UpdateMeterServerResponse *updatemeterserverresponse;
  GetMeterEstimatesDayInMonthServerRequest *getmeterestimatesdayinmonthserverrequest;
  GetMeterEstimatesDayInMonthServerResponse *getmeterestimatesdayinmonthserverresponse;
  GetMeterEstimatesHourInDayServerRequest *getmeterestimateshourindayserverrequest;
  GetMeterEstimatesHourInDayServerResponse *getmeterestimateshourindayserverresponse;
  GetMetersByHomeIdServerRequest *getmetersbyhomeidserverrequest;
  GetMetersByHomeIdServerResponse *getmetersbyhomeidserverresponse;
  GetMeterMissingInDayServerRequest *getmetermissingindayserverrequest;
  GetMeterMissingInDayServerResponse *getmetermissingindayserverresponse;
};
#define METER_SERVER_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&meter_server_message__descriptor) \
, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL }


/*
 * Điều hòa 
 */
struct  AirConditionerServerMessage
{
  ProtobufCMessage base;
  GetAirConditionerStateServerRequest *getairconditionerstateserverrequest;
  GetAirConditionerStateServerResponse *getairconditionerstateserverresponse;
  AirConditionerServerRequest *airconditionerserverrequest;
  AirConditionerServerResponse *airconditionerserverresponse;
};
#define AIR_CONDITIONER_SERVER_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&air_conditioner_server_message__descriptor) \
, NULL, NULL, NULL, NULL }


/*
 * Remote các lệnh chung 
 */
struct  RemoteServerMessage
{
  ProtobufCMessage base;
  GetRemotesServerRequest *getremotesserverrequest;
  GetRemotesServerResponse *getremotesserverresponse;
  GetRemoteServerRequest *getremoteserverrequest;
  GetRemoteServerResponse *getremoteserverresponse;
  GetRemoteLibrariesServerRequest *getremotelibrariesserverrequest;
  GetRemoteLibrariesServerResponse *getremotelibrariesserverresponse;
  GetCommandsRemoteServerRequest *getcommandsremoteserverrequest;
  GetCommandsRemoteServerResponse *getcommandsremoteserverresponse;
  SendCommandRemoteServerRequest *sendcommandremoteserverrequest;
  SendCommandRemoteServerResponse *sendcommandremoteserverresponse;
  LearnCommandRemoteServerRequest *learncommandremoteserverrequest;
  LearnCommandRemoteServerResponse *learncommandremoteserverresponse;
  RestoreCommandRemoteServerRequest *restorecommandremoteserverrequest;
  RestoreCommandRemoteServerResponse *restorecommandremoteserverresponse;
  AddRemoteServerRequest *addremoteserverrequest;
  AddRemoteServerResponse *addremoteserverresponse;
  UpdateRemoteServerRequest *updateremoteserverrequest;
  UpdateRemoteServerResponse *updateremoteserverresponse;
  DeleteRemoteServerRequest *deleteremoteserverrequest;
  DeleteRemoteServerResponse *deleteremoteserverresponse;
  GetRemoteSchedulesServerRequest *getremoteschedulesserverrequest;
  GetRemoteSchedulesServerResponse *getremoteschedulesserverresponse;
  GetCountRemoteScheduleServerRequest *getcountremotescheduleserverrequest;
  GetCountRemoteScheduleServerResponse *getcountremotescheduleserverresponse;
  GetRemoteScheduleServerRequest *getremotescheduleserverrequest;
  GetRemoteScheduleServerResponse *getremotescheduleserverresponse;
  AddRemoteScheduleServerRequest *addremotescheduleserverrequest;
  AddRemoteScheduleServerResponse *addremotescheduleserverresponse;
  UpdateRemoteScheduleServerRequest *updateremotescheduleserverrequest;
  UpdateRemoteScheduleServerResponse *updateremotescheduleserverresponse;
  DeleteRemoteScheduleServerRequest *deleteremotescheduleserverrequest;
  DeleteRemoteScheduleServerResponse *deleteremotescheduleserverresponse;
  SetActiveRemoteScheduleServerRequest *setactiveremotescheduleserverrequest;
  SetActiveRemoteScheduleServerResponse *setactiveremotescheduleserverresponse;
  GetRemoteMultisServerRequest *getremotemultisserverrequest;
  GetRemoteMultisServerResponse *getremotemultisserverresponse;
  AddRemoteMultiServerRequest *addremotemultiserverrequest;
  AddRemoteMultiServerResponse *addremotemultiserverresponse;
  DeleteRemoteMultiServerRequest *deleteremotemultiserverrequest;
  DeleteRemoteMultiServerResponse *deleteremotemultiserverresponse;
  AddRemoteMultiLibraryCmdServerRequest *addremotemultilibrarycmdserverrequest;
  AddRemoteMultiLibraryCmdServerResponse *addremotemultilibrarycmdserverresponse;
  DeleteRemoteMultiLibraryCmdServerRequest *deleteremotemultilibrarycmdserverrequest;
  DeleteRemoteMultiLibraryCmdServerResponse *deleteremotemultilibrarycmdserverresponse;
  UpdateRemoteMultiLibraryCmdServerRequest *updateremotemultilibrarycmdserverrequest;
  UpdateRemoteMultiLibraryCmdServerResponse *updateremotemultilibrarycmdserverresponse;
  UpdateGroupRemoteMultiLibraryCmdServerRequest *updategroupremotemultilibrarycmdserverrequest;
  UpdateGroupRemoteMultiLibraryCmdServerResponse *updategroupremotemultilibrarycmdserverresponse;
  ChangeRemoteBrandRemoteRequest *changeremotebrandremoterequest;
  ChangeRemoteBrandRemoteResponse *changeremotebrandremoteresponse;
  ControlRemoteACCommandRequest *controlremoteaccommandrequest;
  ControlRemoteACCommandResponse *controlremoteaccommandresponse;
};
#define REMOTE_SERVER_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&remote_server_message__descriptor) \
, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL }


/*
 * Kịch bản 
 */
struct  SceneServerMessage
{
  ProtobufCMessage base;
  GetScenesServerRequest *getscenesserverrequest;
  GetScenesServerResponse *getscenesserverresponse;
  GetSceneServerRequest *getsceneserverrequest;
  GetSceneServerResponse *getsceneserverresponse;
  AddSceneServerRequest *addsceneserverrequest;
  AddSceneServerResponse *addsceneserverresponse;
  UpdateSceneServerRequest *updatesceneserverrequest;
  UpdateSceneServerResponse *updatesceneserverresponse;
  DeleteSceneServerRequest *deletesceneserverrequest;
  DeleteSceneServerResponse *deletesceneserverresponse;
  DeleteSwitcherConditionServerRequest *deleteswitcherconditionserverrequest;
  DeleteSwitcherConditionServerResponse *deleteswitcherconditionserverresponse;
  DeleteSceneActionServerRequest *deletesceneactionserverrequest;
  DeleteSceneActionServerResponse *deletesceneactionserverresponse;
  RunSceneServerRequest *runsceneserverrequest;
  RunSceneServerResponse *runsceneserverresponse;
  SceneServerRequest *sceneserverrequest;
  SceneServerResponse *sceneserverresponse;
  SceneRetryConfirmServerRequest *sceneretryconfirmserverrequest;
  SceneRetryConfirmServerResponse *sceneretryconfirmserverresponse;
  SetSceneStatusServerRequest *setscenestatusserverrequest;
  SetSceneStatusServerResponse *setscenestatusserverresponse;
  TestSceneServerRequest *testsceneserverrequest;
  TestSceneServerResponse *testsceneserverresponse;
  SceneTriggerClientRequest *scenetriggerrequest;
  SceneTriggerClientResponse *scenetriggerresponse;
  SceneTriggerServerRequest *scenetriggerserverrequest;
  SceneTriggerServerResponse *scenetriggerserverresponse;
};
#define SCENE_SERVER_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&scene_server_message__descriptor) \
, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL }


/*
 * Các màn hình tổng hợp 
 */
struct  GeneralTabServerMessage
{
  ProtobufCMessage base;
  GetHomeTabServerRequest *gethometabserverrequest;
  GetHomeTabServerResponse *gethometabserverresponse;
  GetElectricTabServerRequest *getelectrictabserverrequest;
  GetElectricTabServerResponse *getelectrictabserverresponse;
  GetSwitcherTabServerRequest *getswitchertabserverrequest;
  GetSwitcherTabServerResponse *getswitchertabserverresponse;
};
#define GENERAL_TAB_SERVER_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&general_tab_server_message__descriptor) \
, NULL, NULL, NULL, NULL, NULL, NULL }


/*
 * Events runtime 
 */
struct  OnChangedServerMessage
{
  ProtobufCMessage base;
  /*
   * Công tắc thay đổi On/Off
   */
  SwitcherOnChangedServerResponse *switcheronchangedserverresponse;
  /*
   * Rèm cửa
   */
  CurtainSwitcherOnChangedServerResponse *curtainswitcheronchangedserverresponse;
  /*
   * Điều hòa thay đổi trạng thái điều khiển State
   */
  AirConditionerOnChangedServerResponse *airconditioneronchangedserverresponse;
  /*
   * Remote chung để phản hồi kết quả thực hiện lệnh
   */
  RemoteOnChangedServerResponse *remoteonchangedserverresponse;
  /*
   * thành công hay thất bị, ngoại lệ
   */
  /*
   * Đồng hồ điện/nước thay đổi
   */
  MeterOnChangedServerResponse *meteronchangedserverresponse;
  /*
   * Thiết bị thay đổi kết nối
   */
  DeviceOnChangedDeviceServerResponse *deviceonchangeddeviceserverresponse;
  /*
   * [Deprecated]
   */
  /*
   * Thiết bị cập nhật tiến độ xử lý
   */
  ProgressUpdateFirmwareOnChangedDeviceServerResponse *progressupdatefirmwareonchangeddeviceserverresponse;
  /*
   * [Deprecated]
   */
  /*
   * Server onchange dữ liệu download về cho thiết bị
   */
  DownloadFirmwareOnChangedDeviceServerResponse *downloadfirmwareonchangeddeviceserverresponse;
  /*
   * Thiết bị chuyển động
   */
  MotionOnChangedServerResponse *motiononchangedserverresponse;
  /*
   * Kịch bản xác nhận runtime
   */
  SceneOnChangedServerResponse *sceneonchangedserverresponse;
  /*
   * Thiết bị homekit
   */
  HomekitOnChangedServerResponse *homekitonchangedserverresponse;
  /*
   * Nút nhấn
   */
  ButtonOnChangedServerResponse *buttononchangedserverresponse;
  /*
   * Thiết bị nhóm
   */
  GroupControlOnChangedServerResponse *groupcontrolonchangedserverresponse;
  /*
   * Onchange thiết bị Led Driver
   */
  LedDriverOnChangedServerResponse *leddriveronchangedserverresponse;
  EnvironmentSensorOnChangedServerResponse *environmentsensoronchangedserverresponse;
  SmartPlugOnChangedServerResponse *smartplugonchangedserverresponse;
  /*
   * Động cơ Rèm cửa
   */
  CurtainOnChangedServerResponse *curtainonchangedserverresponse;
};
#define ON_CHANGED_SERVER_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&on_changed_server_message__descriptor) \
, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL }


/*
 * Messages simulators 
 */
struct  SimulatorServerMessage
{
  ProtobufCMessage base;
  /*
   * Echo message
   */
  EchoServerRequest *echoserverrequest;
  EchoServerResponse *echoserverresponse;
};
#define SIMULATOR_SERVER_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&simulator_server_message__descriptor) \
, NULL, NULL }


/*
 * Chuyển động 
 */
struct  MotionServerMessage
{
  ProtobufCMessage base;
  MotionServerRequest *motionserverrequest;
  MotionServerResponse *motionserverresponse;
  GetMotionServerRequest *getmotionserverrequest;
  GetMotionServerResponse *getmotionserverresponse;
  UpdateMotionServerRequest *updatemotionserverrequest;
  UpdateMotionServerResponse *updatemotionserverresponse;
};
#define MOTION_SERVER_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&motion_server_message__descriptor) \
, NULL, NULL, NULL, NULL, NULL, NULL }


/*
 * Homekit 
 */
struct  HomekitServerMessage
{
  ProtobufCMessage base;
  GetHomekitInfoServerRequest *gethomekitinfoserverrequest;
  GetHomekitInfoServerResponse *gethomekitinfoserverresponse;
  UpdateHomekitServerRequest *updatehomekitserverrequest;
  UpdateHomekitServerResponse *updatehomekitserverresponse;
  SetHomekitModeServerRequest *sethomekitmodeserverrequest;
  SetHomekitModeServerResponse *sethomekitmodeserverresponse;
};
#define HOMEKIT_SERVER_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&homekit_server_message__descriptor) \
, NULL, NULL, NULL, NULL, NULL, NULL }


/*
 * Dự án 
 */
struct  ProjectServerMessage
{
  ProtobufCMessage base;
  GetProjectsServerRequest *getprojectsserverrequest;
  GetProjectsServerResponse *getprojectsserverresponse;
};
#define PROJECT_SERVER_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&project_server_message__descriptor) \
, NULL, NULL }


/*
 * Tòa 
 */
struct  BuildingServerMessage
{
  ProtobufCMessage base;
  GetBuildingsServerRequest *getbuildingsserverrequest;
  GetBuildingsServerResponse *getbuildingsserverresponse;
};
#define BUILDING_SERVER_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&building_server_message__descriptor) \
, NULL, NULL }


/*
 * Tầng 
 */
struct  FloorServerMessage
{
  ProtobufCMessage base;
  GetFloorsServerRequest *getfloorsserverrequest;
  GetFloorsServerResponse *getfloorsserverresponse;
};
#define FLOOR_SERVER_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&floor_server_message__descriptor) \
, NULL, NULL }


/*
 * Căn hộ 
 */
struct  ApartmentServerMessage
{
  ProtobufCMessage base;
  GetApartmentsServerRequest *getapartmentsserverrequest;
  GetApartmentsServerResponse *getapartmentsserverresponse;
};
#define APARTMENT_SERVER_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&apartment_server_message__descriptor) \
, NULL, NULL }


/*
 * Thành viên 
 */
struct  UserHomeServerMessage
{
  ProtobufCMessage base;
  AddUserHomeServerRequest *adduserhomeserverrequest;
  AddUserHomeServerResponse *adduserhomeserverresponse;
  DeleteUserHomeServerRequest *deleteuserhomeserverrequest;
  DeleteUserHomeServerResponse *deleteuserhomeserverresponse;
};
#define USER_HOME_SERVER_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&user_home_server_message__descriptor) \
, NULL, NULL, NULL, NULL }


/*
 * Thông báo 
 */
struct  InboxServerMessage
{
  ProtobufCMessage base;
  GetUnreadServerRequest *getunreadserverrequest;
  GetUnreadServerResponse *getunreadserverresponse;
  SetReadServerRequest *setreadserverrequest;
  SetReadServerResponse *setreadserverresponse;
};
#define INBOX_SERVER_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&inbox_server_message__descriptor) \
, NULL, NULL, NULL, NULL }


/*
 * Cài đặt chung cho hệ thống 
 */
struct  SettingServerMessage
{
  ProtobufCMessage base;
  GetBackgroundsServerRequest *getbackgroundsserverrequest;
  GetBackgroundsServerResponse *getbackgroundsserverresponse;
  GetAutoOffsServerRequest *getautooffsserverrequest;
  GetAutoOffsServerResponse *getautooffsserverresponse;
  GetTypeDevicesServerRequest *gettypedevicesserverrequest;
  GetTypeDevicesServerResponse *gettypedevicesserverresponse;
};
#define SETTING_SERVER_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&setting_server_message__descriptor) \
, NULL, NULL, NULL, NULL, NULL, NULL }


/*
 * Nút nhấn 
 */
struct  ButtonServerMessage
{
  ProtobufCMessage base;
  GetButtonInfoServerRequest *getbuttoninfoserverrequest;
  GetButtonInfoServerResponse *getbuttoninfoserverresponse;
  UpdateButtonServerRequest *updatebuttonserverrequest;
  UpdateButtonServerResponse *updatebuttonserverresponse;
};
#define BUTTON_SERVER_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&button_server_message__descriptor) \
, NULL, NULL, NULL, NULL }


/*
 * Nhóm thiết bị 
 */
struct  GroupControlServerMessage
{
  ProtobufCMessage base;
  GroupControlServerRequest *groupcontrolserverrequest;
  GroupControlServerResponse *groupcontrolserverresponse;
  GetGroupControlInfoServerRequest *getgroupcontrolinfoserverrequest;
  GetGroupControlInfoServerResponse *getgroupcontrolinfoserverresponse;
  GetControlsServerRequest *getcontrolsserverrequest;
  GetControlsServerResponse *getcontrolsserverresponse;
  AddGroupControlServerRequest *addgroupcontrolserverrequest;
  AddGroupControlServerResponse *addgroupcontrolserverresponse;
  UpdateGroupControlServerRequest *updategroupcontrolserverrequest;
  UpdateGroupControlServerResponse *updategroupcontrolserverresponse;
  DeleteGroupControlServerRequest *deletegroupcontrolserverrequest;
  DeleteGroupControlServerResponse *deletegroupcontrolserverresponse;
};
#define GROUP_CONTROL_SERVER_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&group_control_server_message__descriptor) \
, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL }


struct  LedDriverServerMessage
{
  ProtobufCMessage base;
  LedDriverServerRequest *leddriverserverrequest;
  LedDriverServerResponse *leddriverserverresponse;
  GetLedDriverServerRequest *getleddriverserverrequest;
  GetLedDriverServerResponse *getleddriverserverresponse;
  GetLedDriverItemServerRequest *getleddriveritemserverrequest;
  GetLedDriverItemServerResponse *getleddriveritemserverresponse;
  UpdateLedDriverServerRequest *updateleddriverserverrequest;
  UpdateLedDriverServerResponse *updateleddriverserverresponse;
  UpdateLedDriverItemServerRequest *updateleddriveritemserverrequest;
  UpdateLedDriverItemServerResponse *updateleddriveritemserverresponse;
};
#define LED_DRIVER_SERVER_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&led_driver_server_message__descriptor) \
, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL }


struct  TouchPanelServerMessage
{
  ProtobufCMessage base;
  TouchPanelChangeComponentServerRequest *touchpanelchangecomponentserverrequest;
  TouchPanelControlSwitcherServerRequest *touchpanelcontrolswitcherserverrequest;
  TouchPanelUpdateSwitcherServerRequest *touchpanelupdateswitcherserverrequest;
  TouchPanelControlCurtainSwitcherServerRequest *touchpanelcontrolcurtainswitcherserverrequest;
  TouchPanelUpdateCurtainSwitcherServerRequest *touchpanelupdatecurtainswitcherserverrequest;
  TouchPanelUpdateSceneServerRequest *touchpanelupdatesceneserverrequest;
  TouchPanelControlLedDriverServerRequest *touchpanelcontrolleddriverserverrequest;
  TouchPanelUpdateLedDriverServerRequest *touchpanelupdateleddriverserverrequest;
};
#define TOUCH_PANEL_SERVER_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&touch_panel_server_message__descriptor) \
, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL }


/*
 * Động cơ Rèm cửa 
 */
struct  CurtainServerMessage
{
  ProtobufCMessage base;
  CurtainServerRequest *curtainserverrequest;
  CurtainServerResponse *curtainserverresponse;
};
#define CURTAIN_SERVER_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&curtain_server_message__descriptor) \
, NULL, NULL }


/*
 * Server Message 
 */
struct  ServerMessage
{
  ProtobufCMessage base;
  /*
   * AuthMessage 
   */
  AuthServerMessage *authservermessage;
  /*
   * Tài khoản 
   */
  UserServerMessage *userservermessage;
  /*
   * Nhà 
   */
  HomeServerMessage *homeservermessage;
  /*
   * Phòng 
   */
  RoomServerMessage *roomservermessage;
  /*
   * Thiết bị kết nối wifi Devices 
   */
  DeviceServerMessage *deviceservermessage;
  /*
   * Công tắc 
   */
  SwitcherServerMessage *switcherservermessage;
  /*
   * Rèm cửa 
   */
  CurtainSwitcherServerMessage *curtainswitcherservermessage;
  /*
   * Điện nước 
   */
  MeterServerMessage *meterservermessage;
  /*
   * Điều hòa 
   */
  AirConditionerServerMessage *airconditionerservermessage;
  /*
   * Remote chung cho tất cả thiết bị Remote 
   */
  RemoteServerMessage *remoteservermessage;
  /*
   * Kịch bản 
   */
  SceneServerMessage *sceneservermessage;
  /*
   * Các màn hình tổng hợp 
   */
  GeneralTabServerMessage *generaltabservermessage;
  /*
   * Events runtime 
   */
  OnChangedServerMessage *onchangedservermessage;
  /*
   * Simulator 
   */
  SimulatorServerMessage *simulatorservermessage;
  /*
   * Thiết bị chuyển động 
   */
  MotionServerMessage *motionservermessage;
  /*
   * Thiết bị Homekit 
   */
  HomekitServerMessage *homekitservermessage;
  /*
   * Dự án 
   */
  ProjectServerMessage *projectservermessage;
  /*
   * Tòa 
   */
  BuildingServerMessage *buildingservermessage;
  /*
   * Tầng 
   */
  FloorServerMessage *floorservermessage;
  /*
   * Căn hộ 
   */
  ApartmentServerMessage *apartmentservermessage;
  /*
   * Thành viên 
   */
  UserHomeServerMessage *userhomeservermessage;
  /*
   * Thông báo 
   */
  InboxServerMessage *inboxservermessage;
  /*
   * Cài đặt chung cho hệ thống 
   */
  SettingServerMessage *settingservermessage;
  /*
   * Thiết bị nút nhấn 
   */
  ButtonServerMessage *buttonservermessage;
  /*
   * Thiết bị nhóm 
   */
  GroupControlServerMessage *groupcontrolservermessage;
  /*
   * Thiết bị led driver 
   */
  LedDriverServerMessage *leddriverservermessage;
  /*
   * Thiết bị Touch Panel 
   */
  TouchPanelServerMessage *touchpanelservermessage;
  /*
   * Động cơ Rèm cửa 
   */
  CurtainServerMessage *curtainservermessage;
};
#define SERVER_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&server_message__descriptor) \
, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL }


/* LoginServerRequest methods */
void   login_server_request__init
                     (LoginServerRequest         *message);
size_t login_server_request__get_packed_size
                     (const LoginServerRequest   *message);
size_t login_server_request__pack
                     (const LoginServerRequest   *message,
                      uint8_t             *out);
size_t login_server_request__pack_to_buffer
                     (const LoginServerRequest   *message,
                      ProtobufCBuffer     *buffer);
LoginServerRequest *
       login_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   login_server_request__free_unpacked
                     (LoginServerRequest *message,
                      ProtobufCAllocator *allocator);
/* LoginServerResponse methods */
void   login_server_response__init
                     (LoginServerResponse         *message);
size_t login_server_response__get_packed_size
                     (const LoginServerResponse   *message);
size_t login_server_response__pack
                     (const LoginServerResponse   *message,
                      uint8_t             *out);
size_t login_server_response__pack_to_buffer
                     (const LoginServerResponse   *message,
                      ProtobufCBuffer     *buffer);
LoginServerResponse *
       login_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   login_server_response__free_unpacked
                     (LoginServerResponse *message,
                      ProtobufCAllocator *allocator);
/* RefreshTokenServerRequest methods */
void   refresh_token_server_request__init
                     (RefreshTokenServerRequest         *message);
size_t refresh_token_server_request__get_packed_size
                     (const RefreshTokenServerRequest   *message);
size_t refresh_token_server_request__pack
                     (const RefreshTokenServerRequest   *message,
                      uint8_t             *out);
size_t refresh_token_server_request__pack_to_buffer
                     (const RefreshTokenServerRequest   *message,
                      ProtobufCBuffer     *buffer);
RefreshTokenServerRequest *
       refresh_token_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   refresh_token_server_request__free_unpacked
                     (RefreshTokenServerRequest *message,
                      ProtobufCAllocator *allocator);
/* RefreshTokenServerResponse methods */
void   refresh_token_server_response__init
                     (RefreshTokenServerResponse         *message);
size_t refresh_token_server_response__get_packed_size
                     (const RefreshTokenServerResponse   *message);
size_t refresh_token_server_response__pack
                     (const RefreshTokenServerResponse   *message,
                      uint8_t             *out);
size_t refresh_token_server_response__pack_to_buffer
                     (const RefreshTokenServerResponse   *message,
                      ProtobufCBuffer     *buffer);
RefreshTokenServerResponse *
       refresh_token_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   refresh_token_server_response__free_unpacked
                     (RefreshTokenServerResponse *message,
                      ProtobufCAllocator *allocator);
/* SendCodeServerRequest methods */
void   send_code_server_request__init
                     (SendCodeServerRequest         *message);
size_t send_code_server_request__get_packed_size
                     (const SendCodeServerRequest   *message);
size_t send_code_server_request__pack
                     (const SendCodeServerRequest   *message,
                      uint8_t             *out);
size_t send_code_server_request__pack_to_buffer
                     (const SendCodeServerRequest   *message,
                      ProtobufCBuffer     *buffer);
SendCodeServerRequest *
       send_code_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   send_code_server_request__free_unpacked
                     (SendCodeServerRequest *message,
                      ProtobufCAllocator *allocator);
/* SendCodeServerResponse methods */
void   send_code_server_response__init
                     (SendCodeServerResponse         *message);
size_t send_code_server_response__get_packed_size
                     (const SendCodeServerResponse   *message);
size_t send_code_server_response__pack
                     (const SendCodeServerResponse   *message,
                      uint8_t             *out);
size_t send_code_server_response__pack_to_buffer
                     (const SendCodeServerResponse   *message,
                      ProtobufCBuffer     *buffer);
SendCodeServerResponse *
       send_code_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   send_code_server_response__free_unpacked
                     (SendCodeServerResponse *message,
                      ProtobufCAllocator *allocator);
/* VerifyCodeServerRequest methods */
void   verify_code_server_request__init
                     (VerifyCodeServerRequest         *message);
size_t verify_code_server_request__get_packed_size
                     (const VerifyCodeServerRequest   *message);
size_t verify_code_server_request__pack
                     (const VerifyCodeServerRequest   *message,
                      uint8_t             *out);
size_t verify_code_server_request__pack_to_buffer
                     (const VerifyCodeServerRequest   *message,
                      ProtobufCBuffer     *buffer);
VerifyCodeServerRequest *
       verify_code_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   verify_code_server_request__free_unpacked
                     (VerifyCodeServerRequest *message,
                      ProtobufCAllocator *allocator);
/* VerifyCodeServerResponse methods */
void   verify_code_server_response__init
                     (VerifyCodeServerResponse         *message);
size_t verify_code_server_response__get_packed_size
                     (const VerifyCodeServerResponse   *message);
size_t verify_code_server_response__pack
                     (const VerifyCodeServerResponse   *message,
                      uint8_t             *out);
size_t verify_code_server_response__pack_to_buffer
                     (const VerifyCodeServerResponse   *message,
                      ProtobufCBuffer     *buffer);
VerifyCodeServerResponse *
       verify_code_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   verify_code_server_response__free_unpacked
                     (VerifyCodeServerResponse *message,
                      ProtobufCAllocator *allocator);
/* GetUserInfoServerRequest methods */
void   get_user_info_server_request__init
                     (GetUserInfoServerRequest         *message);
size_t get_user_info_server_request__get_packed_size
                     (const GetUserInfoServerRequest   *message);
size_t get_user_info_server_request__pack
                     (const GetUserInfoServerRequest   *message,
                      uint8_t             *out);
size_t get_user_info_server_request__pack_to_buffer
                     (const GetUserInfoServerRequest   *message,
                      ProtobufCBuffer     *buffer);
GetUserInfoServerRequest *
       get_user_info_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_user_info_server_request__free_unpacked
                     (GetUserInfoServerRequest *message,
                      ProtobufCAllocator *allocator);
/* GetUserInfoServerResponse methods */
void   get_user_info_server_response__init
                     (GetUserInfoServerResponse         *message);
size_t get_user_info_server_response__get_packed_size
                     (const GetUserInfoServerResponse   *message);
size_t get_user_info_server_response__pack
                     (const GetUserInfoServerResponse   *message,
                      uint8_t             *out);
size_t get_user_info_server_response__pack_to_buffer
                     (const GetUserInfoServerResponse   *message,
                      ProtobufCBuffer     *buffer);
GetUserInfoServerResponse *
       get_user_info_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_user_info_server_response__free_unpacked
                     (GetUserInfoServerResponse *message,
                      ProtobufCAllocator *allocator);
/* UpdateUserInfoServerRequest methods */
void   update_user_info_server_request__init
                     (UpdateUserInfoServerRequest         *message);
size_t update_user_info_server_request__get_packed_size
                     (const UpdateUserInfoServerRequest   *message);
size_t update_user_info_server_request__pack
                     (const UpdateUserInfoServerRequest   *message,
                      uint8_t             *out);
size_t update_user_info_server_request__pack_to_buffer
                     (const UpdateUserInfoServerRequest   *message,
                      ProtobufCBuffer     *buffer);
UpdateUserInfoServerRequest *
       update_user_info_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   update_user_info_server_request__free_unpacked
                     (UpdateUserInfoServerRequest *message,
                      ProtobufCAllocator *allocator);
/* UpdateUserInfoServerResponse methods */
void   update_user_info_server_response__init
                     (UpdateUserInfoServerResponse         *message);
size_t update_user_info_server_response__get_packed_size
                     (const UpdateUserInfoServerResponse   *message);
size_t update_user_info_server_response__pack
                     (const UpdateUserInfoServerResponse   *message,
                      uint8_t             *out);
size_t update_user_info_server_response__pack_to_buffer
                     (const UpdateUserInfoServerResponse   *message,
                      ProtobufCBuffer     *buffer);
UpdateUserInfoServerResponse *
       update_user_info_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   update_user_info_server_response__free_unpacked
                     (UpdateUserInfoServerResponse *message,
                      ProtobufCAllocator *allocator);
/* SetOnesignalForUserServerRequest methods */
void   set_onesignal_for_user_server_request__init
                     (SetOnesignalForUserServerRequest         *message);
size_t set_onesignal_for_user_server_request__get_packed_size
                     (const SetOnesignalForUserServerRequest   *message);
size_t set_onesignal_for_user_server_request__pack
                     (const SetOnesignalForUserServerRequest   *message,
                      uint8_t             *out);
size_t set_onesignal_for_user_server_request__pack_to_buffer
                     (const SetOnesignalForUserServerRequest   *message,
                      ProtobufCBuffer     *buffer);
SetOnesignalForUserServerRequest *
       set_onesignal_for_user_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   set_onesignal_for_user_server_request__free_unpacked
                     (SetOnesignalForUserServerRequest *message,
                      ProtobufCAllocator *allocator);
/* SetOnesignalForUserServerResponse methods */
void   set_onesignal_for_user_server_response__init
                     (SetOnesignalForUserServerResponse         *message);
size_t set_onesignal_for_user_server_response__get_packed_size
                     (const SetOnesignalForUserServerResponse   *message);
size_t set_onesignal_for_user_server_response__pack
                     (const SetOnesignalForUserServerResponse   *message,
                      uint8_t             *out);
size_t set_onesignal_for_user_server_response__pack_to_buffer
                     (const SetOnesignalForUserServerResponse   *message,
                      ProtobufCBuffer     *buffer);
SetOnesignalForUserServerResponse *
       set_onesignal_for_user_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   set_onesignal_for_user_server_response__free_unpacked
                     (SetOnesignalForUserServerResponse *message,
                      ProtobufCAllocator *allocator);
/* ChangedHomeForUserServerRequest methods */
void   changed_home_for_user_server_request__init
                     (ChangedHomeForUserServerRequest         *message);
size_t changed_home_for_user_server_request__get_packed_size
                     (const ChangedHomeForUserServerRequest   *message);
size_t changed_home_for_user_server_request__pack
                     (const ChangedHomeForUserServerRequest   *message,
                      uint8_t             *out);
size_t changed_home_for_user_server_request__pack_to_buffer
                     (const ChangedHomeForUserServerRequest   *message,
                      ProtobufCBuffer     *buffer);
ChangedHomeForUserServerRequest *
       changed_home_for_user_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   changed_home_for_user_server_request__free_unpacked
                     (ChangedHomeForUserServerRequest *message,
                      ProtobufCAllocator *allocator);
/* ChangedHomeForUserServerResponse methods */
void   changed_home_for_user_server_response__init
                     (ChangedHomeForUserServerResponse         *message);
size_t changed_home_for_user_server_response__get_packed_size
                     (const ChangedHomeForUserServerResponse   *message);
size_t changed_home_for_user_server_response__pack
                     (const ChangedHomeForUserServerResponse   *message,
                      uint8_t             *out);
size_t changed_home_for_user_server_response__pack_to_buffer
                     (const ChangedHomeForUserServerResponse   *message,
                      ProtobufCBuffer     *buffer);
ChangedHomeForUserServerResponse *
       changed_home_for_user_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   changed_home_for_user_server_response__free_unpacked
                     (ChangedHomeForUserServerResponse *message,
                      ProtobufCAllocator *allocator);
/* GetUsersServerRequest methods */
void   get_users_server_request__init
                     (GetUsersServerRequest         *message);
size_t get_users_server_request__get_packed_size
                     (const GetUsersServerRequest   *message);
size_t get_users_server_request__pack
                     (const GetUsersServerRequest   *message,
                      uint8_t             *out);
size_t get_users_server_request__pack_to_buffer
                     (const GetUsersServerRequest   *message,
                      ProtobufCBuffer     *buffer);
GetUsersServerRequest *
       get_users_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_users_server_request__free_unpacked
                     (GetUsersServerRequest *message,
                      ProtobufCAllocator *allocator);
/* GetUsersServerResponse methods */
void   get_users_server_response__init
                     (GetUsersServerResponse         *message);
size_t get_users_server_response__get_packed_size
                     (const GetUsersServerResponse   *message);
size_t get_users_server_response__pack
                     (const GetUsersServerResponse   *message,
                      uint8_t             *out);
size_t get_users_server_response__pack_to_buffer
                     (const GetUsersServerResponse   *message,
                      ProtobufCBuffer     *buffer);
GetUsersServerResponse *
       get_users_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_users_server_response__free_unpacked
                     (GetUsersServerResponse *message,
                      ProtobufCAllocator *allocator);
/* SearchUserServerRequest methods */
void   search_user_server_request__init
                     (SearchUserServerRequest         *message);
size_t search_user_server_request__get_packed_size
                     (const SearchUserServerRequest   *message);
size_t search_user_server_request__pack
                     (const SearchUserServerRequest   *message,
                      uint8_t             *out);
size_t search_user_server_request__pack_to_buffer
                     (const SearchUserServerRequest   *message,
                      ProtobufCBuffer     *buffer);
SearchUserServerRequest *
       search_user_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   search_user_server_request__free_unpacked
                     (SearchUserServerRequest *message,
                      ProtobufCAllocator *allocator);
/* SearchUserServerResponse methods */
void   search_user_server_response__init
                     (SearchUserServerResponse         *message);
size_t search_user_server_response__get_packed_size
                     (const SearchUserServerResponse   *message);
size_t search_user_server_response__pack
                     (const SearchUserServerResponse   *message,
                      uint8_t             *out);
size_t search_user_server_response__pack_to_buffer
                     (const SearchUserServerResponse   *message,
                      ProtobufCBuffer     *buffer);
SearchUserServerResponse *
       search_user_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   search_user_server_response__free_unpacked
                     (SearchUserServerResponse *message,
                      ProtobufCAllocator *allocator);
/* AvatarUploadServerRequest methods */
void   avatar_upload_server_request__init
                     (AvatarUploadServerRequest         *message);
size_t avatar_upload_server_request__get_packed_size
                     (const AvatarUploadServerRequest   *message);
size_t avatar_upload_server_request__pack
                     (const AvatarUploadServerRequest   *message,
                      uint8_t             *out);
size_t avatar_upload_server_request__pack_to_buffer
                     (const AvatarUploadServerRequest   *message,
                      ProtobufCBuffer     *buffer);
AvatarUploadServerRequest *
       avatar_upload_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   avatar_upload_server_request__free_unpacked
                     (AvatarUploadServerRequest *message,
                      ProtobufCAllocator *allocator);
/* AvatarUploadServerResponse methods */
void   avatar_upload_server_response__init
                     (AvatarUploadServerResponse         *message);
size_t avatar_upload_server_response__get_packed_size
                     (const AvatarUploadServerResponse   *message);
size_t avatar_upload_server_response__pack
                     (const AvatarUploadServerResponse   *message,
                      uint8_t             *out);
size_t avatar_upload_server_response__pack_to_buffer
                     (const AvatarUploadServerResponse   *message,
                      ProtobufCBuffer     *buffer);
AvatarUploadServerResponse *
       avatar_upload_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   avatar_upload_server_response__free_unpacked
                     (AvatarUploadServerResponse *message,
                      ProtobufCAllocator *allocator);
/* GetUserOtpServerRequest methods */
void   get_user_otp_server_request__init
                     (GetUserOtpServerRequest         *message);
size_t get_user_otp_server_request__get_packed_size
                     (const GetUserOtpServerRequest   *message);
size_t get_user_otp_server_request__pack
                     (const GetUserOtpServerRequest   *message,
                      uint8_t             *out);
size_t get_user_otp_server_request__pack_to_buffer
                     (const GetUserOtpServerRequest   *message,
                      ProtobufCBuffer     *buffer);
GetUserOtpServerRequest *
       get_user_otp_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_user_otp_server_request__free_unpacked
                     (GetUserOtpServerRequest *message,
                      ProtobufCAllocator *allocator);
/* GetUserOtpServerResponse methods */
void   get_user_otp_server_response__init
                     (GetUserOtpServerResponse         *message);
size_t get_user_otp_server_response__get_packed_size
                     (const GetUserOtpServerResponse   *message);
size_t get_user_otp_server_response__pack
                     (const GetUserOtpServerResponse   *message,
                      uint8_t             *out);
size_t get_user_otp_server_response__pack_to_buffer
                     (const GetUserOtpServerResponse   *message,
                      ProtobufCBuffer     *buffer);
GetUserOtpServerResponse *
       get_user_otp_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_user_otp_server_response__free_unpacked
                     (GetUserOtpServerResponse *message,
                      ProtobufCAllocator *allocator);
/* GetHomesServerRequest methods */
void   get_homes_server_request__init
                     (GetHomesServerRequest         *message);
size_t get_homes_server_request__get_packed_size
                     (const GetHomesServerRequest   *message);
size_t get_homes_server_request__pack
                     (const GetHomesServerRequest   *message,
                      uint8_t             *out);
size_t get_homes_server_request__pack_to_buffer
                     (const GetHomesServerRequest   *message,
                      ProtobufCBuffer     *buffer);
GetHomesServerRequest *
       get_homes_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_homes_server_request__free_unpacked
                     (GetHomesServerRequest *message,
                      ProtobufCAllocator *allocator);
/* GetHomesServerResponse methods */
void   get_homes_server_response__init
                     (GetHomesServerResponse         *message);
size_t get_homes_server_response__get_packed_size
                     (const GetHomesServerResponse   *message);
size_t get_homes_server_response__pack
                     (const GetHomesServerResponse   *message,
                      uint8_t             *out);
size_t get_homes_server_response__pack_to_buffer
                     (const GetHomesServerResponse   *message,
                      ProtobufCBuffer     *buffer);
GetHomesServerResponse *
       get_homes_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_homes_server_response__free_unpacked
                     (GetHomesServerResponse *message,
                      ProtobufCAllocator *allocator);
/* AddHomeServerRequest methods */
void   add_home_server_request__init
                     (AddHomeServerRequest         *message);
size_t add_home_server_request__get_packed_size
                     (const AddHomeServerRequest   *message);
size_t add_home_server_request__pack
                     (const AddHomeServerRequest   *message,
                      uint8_t             *out);
size_t add_home_server_request__pack_to_buffer
                     (const AddHomeServerRequest   *message,
                      ProtobufCBuffer     *buffer);
AddHomeServerRequest *
       add_home_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   add_home_server_request__free_unpacked
                     (AddHomeServerRequest *message,
                      ProtobufCAllocator *allocator);
/* AddHomeServerResponse methods */
void   add_home_server_response__init
                     (AddHomeServerResponse         *message);
size_t add_home_server_response__get_packed_size
                     (const AddHomeServerResponse   *message);
size_t add_home_server_response__pack
                     (const AddHomeServerResponse   *message,
                      uint8_t             *out);
size_t add_home_server_response__pack_to_buffer
                     (const AddHomeServerResponse   *message,
                      ProtobufCBuffer     *buffer);
AddHomeServerResponse *
       add_home_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   add_home_server_response__free_unpacked
                     (AddHomeServerResponse *message,
                      ProtobufCAllocator *allocator);
/* UpdateHomeServerRequest methods */
void   update_home_server_request__init
                     (UpdateHomeServerRequest         *message);
size_t update_home_server_request__get_packed_size
                     (const UpdateHomeServerRequest   *message);
size_t update_home_server_request__pack
                     (const UpdateHomeServerRequest   *message,
                      uint8_t             *out);
size_t update_home_server_request__pack_to_buffer
                     (const UpdateHomeServerRequest   *message,
                      ProtobufCBuffer     *buffer);
UpdateHomeServerRequest *
       update_home_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   update_home_server_request__free_unpacked
                     (UpdateHomeServerRequest *message,
                      ProtobufCAllocator *allocator);
/* UpdateHomeServerResponse methods */
void   update_home_server_response__init
                     (UpdateHomeServerResponse         *message);
size_t update_home_server_response__get_packed_size
                     (const UpdateHomeServerResponse   *message);
size_t update_home_server_response__pack
                     (const UpdateHomeServerResponse   *message,
                      uint8_t             *out);
size_t update_home_server_response__pack_to_buffer
                     (const UpdateHomeServerResponse   *message,
                      ProtobufCBuffer     *buffer);
UpdateHomeServerResponse *
       update_home_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   update_home_server_response__free_unpacked
                     (UpdateHomeServerResponse *message,
                      ProtobufCAllocator *allocator);
/* DeleteHomeServerRequest methods */
void   delete_home_server_request__init
                     (DeleteHomeServerRequest         *message);
size_t delete_home_server_request__get_packed_size
                     (const DeleteHomeServerRequest   *message);
size_t delete_home_server_request__pack
                     (const DeleteHomeServerRequest   *message,
                      uint8_t             *out);
size_t delete_home_server_request__pack_to_buffer
                     (const DeleteHomeServerRequest   *message,
                      ProtobufCBuffer     *buffer);
DeleteHomeServerRequest *
       delete_home_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   delete_home_server_request__free_unpacked
                     (DeleteHomeServerRequest *message,
                      ProtobufCAllocator *allocator);
/* DeleteHomeServerResponse methods */
void   delete_home_server_response__init
                     (DeleteHomeServerResponse         *message);
size_t delete_home_server_response__get_packed_size
                     (const DeleteHomeServerResponse   *message);
size_t delete_home_server_response__pack
                     (const DeleteHomeServerResponse   *message,
                      uint8_t             *out);
size_t delete_home_server_response__pack_to_buffer
                     (const DeleteHomeServerResponse   *message,
                      ProtobufCBuffer     *buffer);
DeleteHomeServerResponse *
       delete_home_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   delete_home_server_response__free_unpacked
                     (DeleteHomeServerResponse *message,
                      ProtobufCAllocator *allocator);
/* GetCitizenInfoServerRequest methods */
void   get_citizen_info_server_request__init
                     (GetCitizenInfoServerRequest         *message);
size_t get_citizen_info_server_request__get_packed_size
                     (const GetCitizenInfoServerRequest   *message);
size_t get_citizen_info_server_request__pack
                     (const GetCitizenInfoServerRequest   *message,
                      uint8_t             *out);
size_t get_citizen_info_server_request__pack_to_buffer
                     (const GetCitizenInfoServerRequest   *message,
                      ProtobufCBuffer     *buffer);
GetCitizenInfoServerRequest *
       get_citizen_info_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_citizen_info_server_request__free_unpacked
                     (GetCitizenInfoServerRequest *message,
                      ProtobufCAllocator *allocator);
/* GetCitizenInfoServerResponse methods */
void   get_citizen_info_server_response__init
                     (GetCitizenInfoServerResponse         *message);
size_t get_citizen_info_server_response__get_packed_size
                     (const GetCitizenInfoServerResponse   *message);
size_t get_citizen_info_server_response__pack
                     (const GetCitizenInfoServerResponse   *message,
                      uint8_t             *out);
size_t get_citizen_info_server_response__pack_to_buffer
                     (const GetCitizenInfoServerResponse   *message,
                      ProtobufCBuffer     *buffer);
GetCitizenInfoServerResponse *
       get_citizen_info_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_citizen_info_server_response__free_unpacked
                     (GetCitizenInfoServerResponse *message,
                      ProtobufCAllocator *allocator);
/* SetCitizenServerRequest methods */
void   set_citizen_server_request__init
                     (SetCitizenServerRequest         *message);
size_t set_citizen_server_request__get_packed_size
                     (const SetCitizenServerRequest   *message);
size_t set_citizen_server_request__pack
                     (const SetCitizenServerRequest   *message,
                      uint8_t             *out);
size_t set_citizen_server_request__pack_to_buffer
                     (const SetCitizenServerRequest   *message,
                      ProtobufCBuffer     *buffer);
SetCitizenServerRequest *
       set_citizen_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   set_citizen_server_request__free_unpacked
                     (SetCitizenServerRequest *message,
                      ProtobufCAllocator *allocator);
/* SetCitizenServerResponse methods */
void   set_citizen_server_response__init
                     (SetCitizenServerResponse         *message);
size_t set_citizen_server_response__get_packed_size
                     (const SetCitizenServerResponse   *message);
size_t set_citizen_server_response__pack
                     (const SetCitizenServerResponse   *message,
                      uint8_t             *out);
size_t set_citizen_server_response__pack_to_buffer
                     (const SetCitizenServerResponse   *message,
                      ProtobufCBuffer     *buffer);
SetCitizenServerResponse *
       set_citizen_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   set_citizen_server_response__free_unpacked
                     (SetCitizenServerResponse *message,
                      ProtobufCAllocator *allocator);
/* SetGpsForHomeServerRequest methods */
void   set_gps_for_home_server_request__init
                     (SetGpsForHomeServerRequest         *message);
size_t set_gps_for_home_server_request__get_packed_size
                     (const SetGpsForHomeServerRequest   *message);
size_t set_gps_for_home_server_request__pack
                     (const SetGpsForHomeServerRequest   *message,
                      uint8_t             *out);
size_t set_gps_for_home_server_request__pack_to_buffer
                     (const SetGpsForHomeServerRequest   *message,
                      ProtobufCBuffer     *buffer);
SetGpsForHomeServerRequest *
       set_gps_for_home_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   set_gps_for_home_server_request__free_unpacked
                     (SetGpsForHomeServerRequest *message,
                      ProtobufCAllocator *allocator);
/* SetGpsForHomeServerResponse methods */
void   set_gps_for_home_server_response__init
                     (SetGpsForHomeServerResponse         *message);
size_t set_gps_for_home_server_response__get_packed_size
                     (const SetGpsForHomeServerResponse   *message);
size_t set_gps_for_home_server_response__pack
                     (const SetGpsForHomeServerResponse   *message,
                      uint8_t             *out);
size_t set_gps_for_home_server_response__pack_to_buffer
                     (const SetGpsForHomeServerResponse   *message,
                      ProtobufCBuffer     *buffer);
SetGpsForHomeServerResponse *
       set_gps_for_home_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   set_gps_for_home_server_response__free_unpacked
                     (SetGpsForHomeServerResponse *message,
                      ProtobufCAllocator *allocator);
/* GetHomeInfoServerRequest methods */
void   get_home_info_server_request__init
                     (GetHomeInfoServerRequest         *message);
size_t get_home_info_server_request__get_packed_size
                     (const GetHomeInfoServerRequest   *message);
size_t get_home_info_server_request__pack
                     (const GetHomeInfoServerRequest   *message,
                      uint8_t             *out);
size_t get_home_info_server_request__pack_to_buffer
                     (const GetHomeInfoServerRequest   *message,
                      ProtobufCBuffer     *buffer);
GetHomeInfoServerRequest *
       get_home_info_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_home_info_server_request__free_unpacked
                     (GetHomeInfoServerRequest *message,
                      ProtobufCAllocator *allocator);
/* GetHomeInfoServerResponse methods */
void   get_home_info_server_response__init
                     (GetHomeInfoServerResponse         *message);
size_t get_home_info_server_response__get_packed_size
                     (const GetHomeInfoServerResponse   *message);
size_t get_home_info_server_response__pack
                     (const GetHomeInfoServerResponse   *message,
                      uint8_t             *out);
size_t get_home_info_server_response__pack_to_buffer
                     (const GetHomeInfoServerResponse   *message,
                      ProtobufCBuffer     *buffer);
GetHomeInfoServerResponse *
       get_home_info_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_home_info_server_response__free_unpacked
                     (GetHomeInfoServerResponse *message,
                      ProtobufCAllocator *allocator);
/* GetHomesByPhoneServerRequest methods */
void   get_homes_by_phone_server_request__init
                     (GetHomesByPhoneServerRequest         *message);
size_t get_homes_by_phone_server_request__get_packed_size
                     (const GetHomesByPhoneServerRequest   *message);
size_t get_homes_by_phone_server_request__pack
                     (const GetHomesByPhoneServerRequest   *message,
                      uint8_t             *out);
size_t get_homes_by_phone_server_request__pack_to_buffer
                     (const GetHomesByPhoneServerRequest   *message,
                      ProtobufCBuffer     *buffer);
GetHomesByPhoneServerRequest *
       get_homes_by_phone_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_homes_by_phone_server_request__free_unpacked
                     (GetHomesByPhoneServerRequest *message,
                      ProtobufCAllocator *allocator);
/* GetHomesByPhoneServerResponse methods */
void   get_homes_by_phone_server_response__init
                     (GetHomesByPhoneServerResponse         *message);
size_t get_homes_by_phone_server_response__get_packed_size
                     (const GetHomesByPhoneServerResponse   *message);
size_t get_homes_by_phone_server_response__pack
                     (const GetHomesByPhoneServerResponse   *message,
                      uint8_t             *out);
size_t get_homes_by_phone_server_response__pack_to_buffer
                     (const GetHomesByPhoneServerResponse   *message,
                      ProtobufCBuffer     *buffer);
GetHomesByPhoneServerResponse *
       get_homes_by_phone_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_homes_by_phone_server_response__free_unpacked
                     (GetHomesByPhoneServerResponse *message,
                      ProtobufCAllocator *allocator);
/* UploadHomeBackgroundServerRequest methods */
void   upload_home_background_server_request__init
                     (UploadHomeBackgroundServerRequest         *message);
size_t upload_home_background_server_request__get_packed_size
                     (const UploadHomeBackgroundServerRequest   *message);
size_t upload_home_background_server_request__pack
                     (const UploadHomeBackgroundServerRequest   *message,
                      uint8_t             *out);
size_t upload_home_background_server_request__pack_to_buffer
                     (const UploadHomeBackgroundServerRequest   *message,
                      ProtobufCBuffer     *buffer);
UploadHomeBackgroundServerRequest *
       upload_home_background_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   upload_home_background_server_request__free_unpacked
                     (UploadHomeBackgroundServerRequest *message,
                      ProtobufCAllocator *allocator);
/* UploadHomeBackgroundServerResponse methods */
void   upload_home_background_server_response__init
                     (UploadHomeBackgroundServerResponse         *message);
size_t upload_home_background_server_response__get_packed_size
                     (const UploadHomeBackgroundServerResponse   *message);
size_t upload_home_background_server_response__pack
                     (const UploadHomeBackgroundServerResponse   *message,
                      uint8_t             *out);
size_t upload_home_background_server_response__pack_to_buffer
                     (const UploadHomeBackgroundServerResponse   *message,
                      ProtobufCBuffer     *buffer);
UploadHomeBackgroundServerResponse *
       upload_home_background_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   upload_home_background_server_response__free_unpacked
                     (UploadHomeBackgroundServerResponse *message,
                      ProtobufCAllocator *allocator);
/* GetRoomsServerRequest methods */
void   get_rooms_server_request__init
                     (GetRoomsServerRequest         *message);
size_t get_rooms_server_request__get_packed_size
                     (const GetRoomsServerRequest   *message);
size_t get_rooms_server_request__pack
                     (const GetRoomsServerRequest   *message,
                      uint8_t             *out);
size_t get_rooms_server_request__pack_to_buffer
                     (const GetRoomsServerRequest   *message,
                      ProtobufCBuffer     *buffer);
GetRoomsServerRequest *
       get_rooms_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_rooms_server_request__free_unpacked
                     (GetRoomsServerRequest *message,
                      ProtobufCAllocator *allocator);
/* GetRoomsServerResponse methods */
void   get_rooms_server_response__init
                     (GetRoomsServerResponse         *message);
size_t get_rooms_server_response__get_packed_size
                     (const GetRoomsServerResponse   *message);
size_t get_rooms_server_response__pack
                     (const GetRoomsServerResponse   *message,
                      uint8_t             *out);
size_t get_rooms_server_response__pack_to_buffer
                     (const GetRoomsServerResponse   *message,
                      ProtobufCBuffer     *buffer);
GetRoomsServerResponse *
       get_rooms_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_rooms_server_response__free_unpacked
                     (GetRoomsServerResponse *message,
                      ProtobufCAllocator *allocator);
/* AddRoomServerRequest methods */
void   add_room_server_request__init
                     (AddRoomServerRequest         *message);
size_t add_room_server_request__get_packed_size
                     (const AddRoomServerRequest   *message);
size_t add_room_server_request__pack
                     (const AddRoomServerRequest   *message,
                      uint8_t             *out);
size_t add_room_server_request__pack_to_buffer
                     (const AddRoomServerRequest   *message,
                      ProtobufCBuffer     *buffer);
AddRoomServerRequest *
       add_room_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   add_room_server_request__free_unpacked
                     (AddRoomServerRequest *message,
                      ProtobufCAllocator *allocator);
/* AddRoomServerResponse methods */
void   add_room_server_response__init
                     (AddRoomServerResponse         *message);
size_t add_room_server_response__get_packed_size
                     (const AddRoomServerResponse   *message);
size_t add_room_server_response__pack
                     (const AddRoomServerResponse   *message,
                      uint8_t             *out);
size_t add_room_server_response__pack_to_buffer
                     (const AddRoomServerResponse   *message,
                      ProtobufCBuffer     *buffer);
AddRoomServerResponse *
       add_room_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   add_room_server_response__free_unpacked
                     (AddRoomServerResponse *message,
                      ProtobufCAllocator *allocator);
/* DeleteRoomServerRequest methods */
void   delete_room_server_request__init
                     (DeleteRoomServerRequest         *message);
size_t delete_room_server_request__get_packed_size
                     (const DeleteRoomServerRequest   *message);
size_t delete_room_server_request__pack
                     (const DeleteRoomServerRequest   *message,
                      uint8_t             *out);
size_t delete_room_server_request__pack_to_buffer
                     (const DeleteRoomServerRequest   *message,
                      ProtobufCBuffer     *buffer);
DeleteRoomServerRequest *
       delete_room_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   delete_room_server_request__free_unpacked
                     (DeleteRoomServerRequest *message,
                      ProtobufCAllocator *allocator);
/* DeleteRoomServerResponse methods */
void   delete_room_server_response__init
                     (DeleteRoomServerResponse         *message);
size_t delete_room_server_response__get_packed_size
                     (const DeleteRoomServerResponse   *message);
size_t delete_room_server_response__pack
                     (const DeleteRoomServerResponse   *message,
                      uint8_t             *out);
size_t delete_room_server_response__pack_to_buffer
                     (const DeleteRoomServerResponse   *message,
                      ProtobufCBuffer     *buffer);
DeleteRoomServerResponse *
       delete_room_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   delete_room_server_response__free_unpacked
                     (DeleteRoomServerResponse *message,
                      ProtobufCAllocator *allocator);
/* UpdateRoomServerRequest methods */
void   update_room_server_request__init
                     (UpdateRoomServerRequest         *message);
size_t update_room_server_request__get_packed_size
                     (const UpdateRoomServerRequest   *message);
size_t update_room_server_request__pack
                     (const UpdateRoomServerRequest   *message,
                      uint8_t             *out);
size_t update_room_server_request__pack_to_buffer
                     (const UpdateRoomServerRequest   *message,
                      ProtobufCBuffer     *buffer);
UpdateRoomServerRequest *
       update_room_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   update_room_server_request__free_unpacked
                     (UpdateRoomServerRequest *message,
                      ProtobufCAllocator *allocator);
/* UpdateRoomServerResponse methods */
void   update_room_server_response__init
                     (UpdateRoomServerResponse         *message);
size_t update_room_server_response__get_packed_size
                     (const UpdateRoomServerResponse   *message);
size_t update_room_server_response__pack
                     (const UpdateRoomServerResponse   *message,
                      uint8_t             *out);
size_t update_room_server_response__pack_to_buffer
                     (const UpdateRoomServerResponse   *message,
                      ProtobufCBuffer     *buffer);
UpdateRoomServerResponse *
       update_room_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   update_room_server_response__free_unpacked
                     (UpdateRoomServerResponse *message,
                      ProtobufCAllocator *allocator);
/* UploadRoomBackgroundServerRequest methods */
void   upload_room_background_server_request__init
                     (UploadRoomBackgroundServerRequest         *message);
size_t upload_room_background_server_request__get_packed_size
                     (const UploadRoomBackgroundServerRequest   *message);
size_t upload_room_background_server_request__pack
                     (const UploadRoomBackgroundServerRequest   *message,
                      uint8_t             *out);
size_t upload_room_background_server_request__pack_to_buffer
                     (const UploadRoomBackgroundServerRequest   *message,
                      ProtobufCBuffer     *buffer);
UploadRoomBackgroundServerRequest *
       upload_room_background_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   upload_room_background_server_request__free_unpacked
                     (UploadRoomBackgroundServerRequest *message,
                      ProtobufCAllocator *allocator);
/* UploadRoomBackgroundServerResponse methods */
void   upload_room_background_server_response__init
                     (UploadRoomBackgroundServerResponse         *message);
size_t upload_room_background_server_response__get_packed_size
                     (const UploadRoomBackgroundServerResponse   *message);
size_t upload_room_background_server_response__pack
                     (const UploadRoomBackgroundServerResponse   *message,
                      uint8_t             *out);
size_t upload_room_background_server_response__pack_to_buffer
                     (const UploadRoomBackgroundServerResponse   *message,
                      ProtobufCBuffer     *buffer);
UploadRoomBackgroundServerResponse *
       upload_room_background_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   upload_room_background_server_response__free_unpacked
                     (UploadRoomBackgroundServerResponse *message,
                      ProtobufCAllocator *allocator);
/* GetDevicesServerRequest methods */
void   get_devices_server_request__init
                     (GetDevicesServerRequest         *message);
size_t get_devices_server_request__get_packed_size
                     (const GetDevicesServerRequest   *message);
size_t get_devices_server_request__pack
                     (const GetDevicesServerRequest   *message,
                      uint8_t             *out);
size_t get_devices_server_request__pack_to_buffer
                     (const GetDevicesServerRequest   *message,
                      ProtobufCBuffer     *buffer);
GetDevicesServerRequest *
       get_devices_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_devices_server_request__free_unpacked
                     (GetDevicesServerRequest *message,
                      ProtobufCAllocator *allocator);
/* GetDevicesServerResponse methods */
void   get_devices_server_response__init
                     (GetDevicesServerResponse         *message);
size_t get_devices_server_response__get_packed_size
                     (const GetDevicesServerResponse   *message);
size_t get_devices_server_response__pack
                     (const GetDevicesServerResponse   *message,
                      uint8_t             *out);
size_t get_devices_server_response__pack_to_buffer
                     (const GetDevicesServerResponse   *message,
                      ProtobufCBuffer     *buffer);
GetDevicesServerResponse *
       get_devices_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_devices_server_response__free_unpacked
                     (GetDevicesServerResponse *message,
                      ProtobufCAllocator *allocator);
/* GetDeviceServerRequest methods */
void   get_device_server_request__init
                     (GetDeviceServerRequest         *message);
size_t get_device_server_request__get_packed_size
                     (const GetDeviceServerRequest   *message);
size_t get_device_server_request__pack
                     (const GetDeviceServerRequest   *message,
                      uint8_t             *out);
size_t get_device_server_request__pack_to_buffer
                     (const GetDeviceServerRequest   *message,
                      ProtobufCBuffer     *buffer);
GetDeviceServerRequest *
       get_device_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_device_server_request__free_unpacked
                     (GetDeviceServerRequest *message,
                      ProtobufCAllocator *allocator);
/* GetDeviceServerResponse methods */
void   get_device_server_response__init
                     (GetDeviceServerResponse         *message);
size_t get_device_server_response__get_packed_size
                     (const GetDeviceServerResponse   *message);
size_t get_device_server_response__pack
                     (const GetDeviceServerResponse   *message,
                      uint8_t             *out);
size_t get_device_server_response__pack_to_buffer
                     (const GetDeviceServerResponse   *message,
                      ProtobufCBuffer     *buffer);
GetDeviceServerResponse *
       get_device_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_device_server_response__free_unpacked
                     (GetDeviceServerResponse *message,
                      ProtobufCAllocator *allocator);
/* AddDevicesServerRequest methods */
void   add_devices_server_request__init
                     (AddDevicesServerRequest         *message);
size_t add_devices_server_request__get_packed_size
                     (const AddDevicesServerRequest   *message);
size_t add_devices_server_request__pack
                     (const AddDevicesServerRequest   *message,
                      uint8_t             *out);
size_t add_devices_server_request__pack_to_buffer
                     (const AddDevicesServerRequest   *message,
                      ProtobufCBuffer     *buffer);
AddDevicesServerRequest *
       add_devices_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   add_devices_server_request__free_unpacked
                     (AddDevicesServerRequest *message,
                      ProtobufCAllocator *allocator);
/* AddDevicesServerResponse methods */
void   add_devices_server_response__init
                     (AddDevicesServerResponse         *message);
size_t add_devices_server_response__get_packed_size
                     (const AddDevicesServerResponse   *message);
size_t add_devices_server_response__pack
                     (const AddDevicesServerResponse   *message,
                      uint8_t             *out);
size_t add_devices_server_response__pack_to_buffer
                     (const AddDevicesServerResponse   *message,
                      ProtobufCBuffer     *buffer);
AddDevicesServerResponse *
       add_devices_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   add_devices_server_response__free_unpacked
                     (AddDevicesServerResponse *message,
                      ProtobufCAllocator *allocator);
/* UpdateDeviceServerRequest methods */
void   update_device_server_request__init
                     (UpdateDeviceServerRequest         *message);
size_t update_device_server_request__get_packed_size
                     (const UpdateDeviceServerRequest   *message);
size_t update_device_server_request__pack
                     (const UpdateDeviceServerRequest   *message,
                      uint8_t             *out);
size_t update_device_server_request__pack_to_buffer
                     (const UpdateDeviceServerRequest   *message,
                      ProtobufCBuffer     *buffer);
UpdateDeviceServerRequest *
       update_device_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   update_device_server_request__free_unpacked
                     (UpdateDeviceServerRequest *message,
                      ProtobufCAllocator *allocator);
/* UpdateDeviceServerResponse methods */
void   update_device_server_response__init
                     (UpdateDeviceServerResponse         *message);
size_t update_device_server_response__get_packed_size
                     (const UpdateDeviceServerResponse   *message);
size_t update_device_server_response__pack
                     (const UpdateDeviceServerResponse   *message,
                      uint8_t             *out);
size_t update_device_server_response__pack_to_buffer
                     (const UpdateDeviceServerResponse   *message,
                      ProtobufCBuffer     *buffer);
UpdateDeviceServerResponse *
       update_device_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   update_device_server_response__free_unpacked
                     (UpdateDeviceServerResponse *message,
                      ProtobufCAllocator *allocator);
/* DeleteDeviceServerRequest methods */
void   delete_device_server_request__init
                     (DeleteDeviceServerRequest         *message);
size_t delete_device_server_request__get_packed_size
                     (const DeleteDeviceServerRequest   *message);
size_t delete_device_server_request__pack
                     (const DeleteDeviceServerRequest   *message,
                      uint8_t             *out);
size_t delete_device_server_request__pack_to_buffer
                     (const DeleteDeviceServerRequest   *message,
                      ProtobufCBuffer     *buffer);
DeleteDeviceServerRequest *
       delete_device_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   delete_device_server_request__free_unpacked
                     (DeleteDeviceServerRequest *message,
                      ProtobufCAllocator *allocator);
/* DeleteDeviceServerResponse methods */
void   delete_device_server_response__init
                     (DeleteDeviceServerResponse         *message);
size_t delete_device_server_response__get_packed_size
                     (const DeleteDeviceServerResponse   *message);
size_t delete_device_server_response__pack
                     (const DeleteDeviceServerResponse   *message,
                      uint8_t             *out);
size_t delete_device_server_response__pack_to_buffer
                     (const DeleteDeviceServerResponse   *message,
                      ProtobufCBuffer     *buffer);
DeleteDeviceServerResponse *
       delete_device_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   delete_device_server_response__free_unpacked
                     (DeleteDeviceServerResponse *message,
                      ProtobufCAllocator *allocator);
/* GetFirmwareLatestDeviceServerRequest methods */
void   get_firmware_latest_device_server_request__init
                     (GetFirmwareLatestDeviceServerRequest         *message);
size_t get_firmware_latest_device_server_request__get_packed_size
                     (const GetFirmwareLatestDeviceServerRequest   *message);
size_t get_firmware_latest_device_server_request__pack
                     (const GetFirmwareLatestDeviceServerRequest   *message,
                      uint8_t             *out);
size_t get_firmware_latest_device_server_request__pack_to_buffer
                     (const GetFirmwareLatestDeviceServerRequest   *message,
                      ProtobufCBuffer     *buffer);
GetFirmwareLatestDeviceServerRequest *
       get_firmware_latest_device_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_firmware_latest_device_server_request__free_unpacked
                     (GetFirmwareLatestDeviceServerRequest *message,
                      ProtobufCAllocator *allocator);
/* GetFirmwareLatestDeviceServerResponse methods */
void   get_firmware_latest_device_server_response__init
                     (GetFirmwareLatestDeviceServerResponse         *message);
size_t get_firmware_latest_device_server_response__get_packed_size
                     (const GetFirmwareLatestDeviceServerResponse   *message);
size_t get_firmware_latest_device_server_response__pack
                     (const GetFirmwareLatestDeviceServerResponse   *message,
                      uint8_t             *out);
size_t get_firmware_latest_device_server_response__pack_to_buffer
                     (const GetFirmwareLatestDeviceServerResponse   *message,
                      ProtobufCBuffer     *buffer);
GetFirmwareLatestDeviceServerResponse *
       get_firmware_latest_device_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_firmware_latest_device_server_response__free_unpacked
                     (GetFirmwareLatestDeviceServerResponse *message,
                      ProtobufCAllocator *allocator);
/* DownloadFirmwareDeviceServerRequest methods */
void   download_firmware_device_server_request__init
                     (DownloadFirmwareDeviceServerRequest         *message);
size_t download_firmware_device_server_request__get_packed_size
                     (const DownloadFirmwareDeviceServerRequest   *message);
size_t download_firmware_device_server_request__pack
                     (const DownloadFirmwareDeviceServerRequest   *message,
                      uint8_t             *out);
size_t download_firmware_device_server_request__pack_to_buffer
                     (const DownloadFirmwareDeviceServerRequest   *message,
                      ProtobufCBuffer     *buffer);
DownloadFirmwareDeviceServerRequest *
       download_firmware_device_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   download_firmware_device_server_request__free_unpacked
                     (DownloadFirmwareDeviceServerRequest *message,
                      ProtobufCAllocator *allocator);
/* DownloadFirmwareDeviceServerResponse methods */
void   download_firmware_device_server_response__init
                     (DownloadFirmwareDeviceServerResponse         *message);
size_t download_firmware_device_server_response__get_packed_size
                     (const DownloadFirmwareDeviceServerResponse   *message);
size_t download_firmware_device_server_response__pack
                     (const DownloadFirmwareDeviceServerResponse   *message,
                      uint8_t             *out);
size_t download_firmware_device_server_response__pack_to_buffer
                     (const DownloadFirmwareDeviceServerResponse   *message,
                      ProtobufCBuffer     *buffer);
DownloadFirmwareDeviceServerResponse *
       download_firmware_device_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   download_firmware_device_server_response__free_unpacked
                     (DownloadFirmwareDeviceServerResponse *message,
                      ProtobufCAllocator *allocator);
/* ForceUpdateFirmwareDeviceServerRequest methods */
void   force_update_firmware_device_server_request__init
                     (ForceUpdateFirmwareDeviceServerRequest         *message);
size_t force_update_firmware_device_server_request__get_packed_size
                     (const ForceUpdateFirmwareDeviceServerRequest   *message);
size_t force_update_firmware_device_server_request__pack
                     (const ForceUpdateFirmwareDeviceServerRequest   *message,
                      uint8_t             *out);
size_t force_update_firmware_device_server_request__pack_to_buffer
                     (const ForceUpdateFirmwareDeviceServerRequest   *message,
                      ProtobufCBuffer     *buffer);
ForceUpdateFirmwareDeviceServerRequest *
       force_update_firmware_device_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   force_update_firmware_device_server_request__free_unpacked
                     (ForceUpdateFirmwareDeviceServerRequest *message,
                      ProtobufCAllocator *allocator);
/* ForceUpdateFirmwareDeviceServerResponse methods */
void   force_update_firmware_device_server_response__init
                     (ForceUpdateFirmwareDeviceServerResponse         *message);
size_t force_update_firmware_device_server_response__get_packed_size
                     (const ForceUpdateFirmwareDeviceServerResponse   *message);
size_t force_update_firmware_device_server_response__pack
                     (const ForceUpdateFirmwareDeviceServerResponse   *message,
                      uint8_t             *out);
size_t force_update_firmware_device_server_response__pack_to_buffer
                     (const ForceUpdateFirmwareDeviceServerResponse   *message,
                      ProtobufCBuffer     *buffer);
ForceUpdateFirmwareDeviceServerResponse *
       force_update_firmware_device_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   force_update_firmware_device_server_response__free_unpacked
                     (ForceUpdateFirmwareDeviceServerResponse *message,
                      ProtobufCAllocator *allocator);
/* RegisterDeviceServerRequest methods */
void   register_device_server_request__init
                     (RegisterDeviceServerRequest         *message);
size_t register_device_server_request__get_packed_size
                     (const RegisterDeviceServerRequest   *message);
size_t register_device_server_request__pack
                     (const RegisterDeviceServerRequest   *message,
                      uint8_t             *out);
size_t register_device_server_request__pack_to_buffer
                     (const RegisterDeviceServerRequest   *message,
                      ProtobufCBuffer     *buffer);
RegisterDeviceServerRequest *
       register_device_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   register_device_server_request__free_unpacked
                     (RegisterDeviceServerRequest *message,
                      ProtobufCAllocator *allocator);
/* RegisterDeviceServerResponse methods */
void   register_device_server_response__init
                     (RegisterDeviceServerResponse         *message);
size_t register_device_server_response__get_packed_size
                     (const RegisterDeviceServerResponse   *message);
size_t register_device_server_response__pack
                     (const RegisterDeviceServerResponse   *message,
                      uint8_t             *out);
size_t register_device_server_response__pack_to_buffer
                     (const RegisterDeviceServerResponse   *message,
                      ProtobufCBuffer     *buffer);
RegisterDeviceServerResponse *
       register_device_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   register_device_server_response__free_unpacked
                     (RegisterDeviceServerResponse *message,
                      ProtobufCAllocator *allocator);
/* UpdateWSEndpointDeviceServerRequest methods */
void   update_wsendpoint_device_server_request__init
                     (UpdateWSEndpointDeviceServerRequest         *message);
size_t update_wsendpoint_device_server_request__get_packed_size
                     (const UpdateWSEndpointDeviceServerRequest   *message);
size_t update_wsendpoint_device_server_request__pack
                     (const UpdateWSEndpointDeviceServerRequest   *message,
                      uint8_t             *out);
size_t update_wsendpoint_device_server_request__pack_to_buffer
                     (const UpdateWSEndpointDeviceServerRequest   *message,
                      ProtobufCBuffer     *buffer);
UpdateWSEndpointDeviceServerRequest *
       update_wsendpoint_device_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   update_wsendpoint_device_server_request__free_unpacked
                     (UpdateWSEndpointDeviceServerRequest *message,
                      ProtobufCAllocator *allocator);
/* UpdateWSEndpointDeviceServerResponse methods */
void   update_wsendpoint_device_server_response__init
                     (UpdateWSEndpointDeviceServerResponse         *message);
size_t update_wsendpoint_device_server_response__get_packed_size
                     (const UpdateWSEndpointDeviceServerResponse   *message);
size_t update_wsendpoint_device_server_response__pack
                     (const UpdateWSEndpointDeviceServerResponse   *message,
                      uint8_t             *out);
size_t update_wsendpoint_device_server_response__pack_to_buffer
                     (const UpdateWSEndpointDeviceServerResponse   *message,
                      ProtobufCBuffer     *buffer);
UpdateWSEndpointDeviceServerResponse *
       update_wsendpoint_device_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   update_wsendpoint_device_server_response__free_unpacked
                     (UpdateWSEndpointDeviceServerResponse *message,
                      ProtobufCAllocator *allocator);
/* ForceUpdateFirmwareAllDevicesByPhoneServerRequest methods */
void   force_update_firmware_all_devices_by_phone_server_request__init
                     (ForceUpdateFirmwareAllDevicesByPhoneServerRequest         *message);
size_t force_update_firmware_all_devices_by_phone_server_request__get_packed_size
                     (const ForceUpdateFirmwareAllDevicesByPhoneServerRequest   *message);
size_t force_update_firmware_all_devices_by_phone_server_request__pack
                     (const ForceUpdateFirmwareAllDevicesByPhoneServerRequest   *message,
                      uint8_t             *out);
size_t force_update_firmware_all_devices_by_phone_server_request__pack_to_buffer
                     (const ForceUpdateFirmwareAllDevicesByPhoneServerRequest   *message,
                      ProtobufCBuffer     *buffer);
ForceUpdateFirmwareAllDevicesByPhoneServerRequest *
       force_update_firmware_all_devices_by_phone_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   force_update_firmware_all_devices_by_phone_server_request__free_unpacked
                     (ForceUpdateFirmwareAllDevicesByPhoneServerRequest *message,
                      ProtobufCAllocator *allocator);
/* ForceUpdateFirmwareAllDevicesByPhoneServerResponse methods */
void   force_update_firmware_all_devices_by_phone_server_response__init
                     (ForceUpdateFirmwareAllDevicesByPhoneServerResponse         *message);
size_t force_update_firmware_all_devices_by_phone_server_response__get_packed_size
                     (const ForceUpdateFirmwareAllDevicesByPhoneServerResponse   *message);
size_t force_update_firmware_all_devices_by_phone_server_response__pack
                     (const ForceUpdateFirmwareAllDevicesByPhoneServerResponse   *message,
                      uint8_t             *out);
size_t force_update_firmware_all_devices_by_phone_server_response__pack_to_buffer
                     (const ForceUpdateFirmwareAllDevicesByPhoneServerResponse   *message,
                      ProtobufCBuffer     *buffer);
ForceUpdateFirmwareAllDevicesByPhoneServerResponse *
       force_update_firmware_all_devices_by_phone_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   force_update_firmware_all_devices_by_phone_server_response__free_unpacked
                     (ForceUpdateFirmwareAllDevicesByPhoneServerResponse *message,
                      ProtobufCAllocator *allocator);
/* ListSceneDeviceServerRequest methods */
void   list_scene_device_server_request__init
                     (ListSceneDeviceServerRequest         *message);
size_t list_scene_device_server_request__get_packed_size
                     (const ListSceneDeviceServerRequest   *message);
size_t list_scene_device_server_request__pack
                     (const ListSceneDeviceServerRequest   *message,
                      uint8_t             *out);
size_t list_scene_device_server_request__pack_to_buffer
                     (const ListSceneDeviceServerRequest   *message,
                      ProtobufCBuffer     *buffer);
ListSceneDeviceServerRequest *
       list_scene_device_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   list_scene_device_server_request__free_unpacked
                     (ListSceneDeviceServerRequest *message,
                      ProtobufCAllocator *allocator);
/* ListSceneDeviceServerResponse methods */
void   list_scene_device_server_response__init
                     (ListSceneDeviceServerResponse         *message);
size_t list_scene_device_server_response__get_packed_size
                     (const ListSceneDeviceServerResponse   *message);
size_t list_scene_device_server_response__pack
                     (const ListSceneDeviceServerResponse   *message,
                      uint8_t             *out);
size_t list_scene_device_server_response__pack_to_buffer
                     (const ListSceneDeviceServerResponse   *message,
                      ProtobufCBuffer     *buffer);
ListSceneDeviceServerResponse *
       list_scene_device_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   list_scene_device_server_response__free_unpacked
                     (ListSceneDeviceServerResponse *message,
                      ProtobufCAllocator *allocator);
/* GetSwitchersServerRequest methods */
void   get_switchers_server_request__init
                     (GetSwitchersServerRequest         *message);
size_t get_switchers_server_request__get_packed_size
                     (const GetSwitchersServerRequest   *message);
size_t get_switchers_server_request__pack
                     (const GetSwitchersServerRequest   *message,
                      uint8_t             *out);
size_t get_switchers_server_request__pack_to_buffer
                     (const GetSwitchersServerRequest   *message,
                      ProtobufCBuffer     *buffer);
GetSwitchersServerRequest *
       get_switchers_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_switchers_server_request__free_unpacked
                     (GetSwitchersServerRequest *message,
                      ProtobufCAllocator *allocator);
/* GetSwitchersServerResponse methods */
void   get_switchers_server_response__init
                     (GetSwitchersServerResponse         *message);
size_t get_switchers_server_response__get_packed_size
                     (const GetSwitchersServerResponse   *message);
size_t get_switchers_server_response__pack
                     (const GetSwitchersServerResponse   *message,
                      uint8_t             *out);
size_t get_switchers_server_response__pack_to_buffer
                     (const GetSwitchersServerResponse   *message,
                      ProtobufCBuffer     *buffer);
GetSwitchersServerResponse *
       get_switchers_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_switchers_server_response__free_unpacked
                     (GetSwitchersServerResponse *message,
                      ProtobufCAllocator *allocator);
/* GetSwitcherServerRequest methods */
void   get_switcher_server_request__init
                     (GetSwitcherServerRequest         *message);
size_t get_switcher_server_request__get_packed_size
                     (const GetSwitcherServerRequest   *message);
size_t get_switcher_server_request__pack
                     (const GetSwitcherServerRequest   *message,
                      uint8_t             *out);
size_t get_switcher_server_request__pack_to_buffer
                     (const GetSwitcherServerRequest   *message,
                      ProtobufCBuffer     *buffer);
GetSwitcherServerRequest *
       get_switcher_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_switcher_server_request__free_unpacked
                     (GetSwitcherServerRequest *message,
                      ProtobufCAllocator *allocator);
/* GetSwitcherServerResponse methods */
void   get_switcher_server_response__init
                     (GetSwitcherServerResponse         *message);
size_t get_switcher_server_response__get_packed_size
                     (const GetSwitcherServerResponse   *message);
size_t get_switcher_server_response__pack
                     (const GetSwitcherServerResponse   *message,
                      uint8_t             *out);
size_t get_switcher_server_response__pack_to_buffer
                     (const GetSwitcherServerResponse   *message,
                      ProtobufCBuffer     *buffer);
GetSwitcherServerResponse *
       get_switcher_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_switcher_server_response__free_unpacked
                     (GetSwitcherServerResponse *message,
                      ProtobufCAllocator *allocator);
/* GetLogSwitcherServerRequest methods */
void   get_log_switcher_server_request__init
                     (GetLogSwitcherServerRequest         *message);
size_t get_log_switcher_server_request__get_packed_size
                     (const GetLogSwitcherServerRequest   *message);
size_t get_log_switcher_server_request__pack
                     (const GetLogSwitcherServerRequest   *message,
                      uint8_t             *out);
size_t get_log_switcher_server_request__pack_to_buffer
                     (const GetLogSwitcherServerRequest   *message,
                      ProtobufCBuffer     *buffer);
GetLogSwitcherServerRequest *
       get_log_switcher_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_log_switcher_server_request__free_unpacked
                     (GetLogSwitcherServerRequest *message,
                      ProtobufCAllocator *allocator);
/* GetLogSwitcherServerResponse methods */
void   get_log_switcher_server_response__init
                     (GetLogSwitcherServerResponse         *message);
size_t get_log_switcher_server_response__get_packed_size
                     (const GetLogSwitcherServerResponse   *message);
size_t get_log_switcher_server_response__pack
                     (const GetLogSwitcherServerResponse   *message,
                      uint8_t             *out);
size_t get_log_switcher_server_response__pack_to_buffer
                     (const GetLogSwitcherServerResponse   *message,
                      ProtobufCBuffer     *buffer);
GetLogSwitcherServerResponse *
       get_log_switcher_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_log_switcher_server_response__free_unpacked
                     (GetLogSwitcherServerResponse *message,
                      ProtobufCAllocator *allocator);
/* GetIconSwitchersServerRequest methods */
void   get_icon_switchers_server_request__init
                     (GetIconSwitchersServerRequest         *message);
size_t get_icon_switchers_server_request__get_packed_size
                     (const GetIconSwitchersServerRequest   *message);
size_t get_icon_switchers_server_request__pack
                     (const GetIconSwitchersServerRequest   *message,
                      uint8_t             *out);
size_t get_icon_switchers_server_request__pack_to_buffer
                     (const GetIconSwitchersServerRequest   *message,
                      ProtobufCBuffer     *buffer);
GetIconSwitchersServerRequest *
       get_icon_switchers_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_icon_switchers_server_request__free_unpacked
                     (GetIconSwitchersServerRequest *message,
                      ProtobufCAllocator *allocator);
/* GetIconSwitchersServerResponse methods */
void   get_icon_switchers_server_response__init
                     (GetIconSwitchersServerResponse         *message);
size_t get_icon_switchers_server_response__get_packed_size
                     (const GetIconSwitchersServerResponse   *message);
size_t get_icon_switchers_server_response__pack
                     (const GetIconSwitchersServerResponse   *message,
                      uint8_t             *out);
size_t get_icon_switchers_server_response__pack_to_buffer
                     (const GetIconSwitchersServerResponse   *message,
                      ProtobufCBuffer     *buffer);
GetIconSwitchersServerResponse *
       get_icon_switchers_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_icon_switchers_server_response__free_unpacked
                     (GetIconSwitchersServerResponse *message,
                      ProtobufCAllocator *allocator);
/* UpdateSwitcherServerRequest methods */
void   update_switcher_server_request__init
                     (UpdateSwitcherServerRequest         *message);
size_t update_switcher_server_request__get_packed_size
                     (const UpdateSwitcherServerRequest   *message);
size_t update_switcher_server_request__pack
                     (const UpdateSwitcherServerRequest   *message,
                      uint8_t             *out);
size_t update_switcher_server_request__pack_to_buffer
                     (const UpdateSwitcherServerRequest   *message,
                      ProtobufCBuffer     *buffer);
UpdateSwitcherServerRequest *
       update_switcher_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   update_switcher_server_request__free_unpacked
                     (UpdateSwitcherServerRequest *message,
                      ProtobufCAllocator *allocator);
/* UpdateSwitcherServerResponse methods */
void   update_switcher_server_response__init
                     (UpdateSwitcherServerResponse         *message);
size_t update_switcher_server_response__get_packed_size
                     (const UpdateSwitcherServerResponse   *message);
size_t update_switcher_server_response__pack
                     (const UpdateSwitcherServerResponse   *message,
                      uint8_t             *out);
size_t update_switcher_server_response__pack_to_buffer
                     (const UpdateSwitcherServerResponse   *message,
                      ProtobufCBuffer     *buffer);
UpdateSwitcherServerResponse *
       update_switcher_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   update_switcher_server_response__free_unpacked
                     (UpdateSwitcherServerResponse *message,
                      ProtobufCAllocator *allocator);
/* SwitcherServerRequest methods */
void   switcher_server_request__init
                     (SwitcherServerRequest         *message);
size_t switcher_server_request__get_packed_size
                     (const SwitcherServerRequest   *message);
size_t switcher_server_request__pack
                     (const SwitcherServerRequest   *message,
                      uint8_t             *out);
size_t switcher_server_request__pack_to_buffer
                     (const SwitcherServerRequest   *message,
                      ProtobufCBuffer     *buffer);
SwitcherServerRequest *
       switcher_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   switcher_server_request__free_unpacked
                     (SwitcherServerRequest *message,
                      ProtobufCAllocator *allocator);
/* SwitcherServerResponse methods */
void   switcher_server_response__init
                     (SwitcherServerResponse         *message);
size_t switcher_server_response__get_packed_size
                     (const SwitcherServerResponse   *message);
size_t switcher_server_response__pack
                     (const SwitcherServerResponse   *message,
                      uint8_t             *out);
size_t switcher_server_response__pack_to_buffer
                     (const SwitcherServerResponse   *message,
                      ProtobufCBuffer     *buffer);
SwitcherServerResponse *
       switcher_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   switcher_server_response__free_unpacked
                     (SwitcherServerResponse *message,
                      ProtobufCAllocator *allocator);
/* GetSwitcherSchedulesServerRequest methods */
void   get_switcher_schedules_server_request__init
                     (GetSwitcherSchedulesServerRequest         *message);
size_t get_switcher_schedules_server_request__get_packed_size
                     (const GetSwitcherSchedulesServerRequest   *message);
size_t get_switcher_schedules_server_request__pack
                     (const GetSwitcherSchedulesServerRequest   *message,
                      uint8_t             *out);
size_t get_switcher_schedules_server_request__pack_to_buffer
                     (const GetSwitcherSchedulesServerRequest   *message,
                      ProtobufCBuffer     *buffer);
GetSwitcherSchedulesServerRequest *
       get_switcher_schedules_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_switcher_schedules_server_request__free_unpacked
                     (GetSwitcherSchedulesServerRequest *message,
                      ProtobufCAllocator *allocator);
/* GetSwitcherSchedulesServerResponse methods */
void   get_switcher_schedules_server_response__init
                     (GetSwitcherSchedulesServerResponse         *message);
size_t get_switcher_schedules_server_response__get_packed_size
                     (const GetSwitcherSchedulesServerResponse   *message);
size_t get_switcher_schedules_server_response__pack
                     (const GetSwitcherSchedulesServerResponse   *message,
                      uint8_t             *out);
size_t get_switcher_schedules_server_response__pack_to_buffer
                     (const GetSwitcherSchedulesServerResponse   *message,
                      ProtobufCBuffer     *buffer);
GetSwitcherSchedulesServerResponse *
       get_switcher_schedules_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_switcher_schedules_server_response__free_unpacked
                     (GetSwitcherSchedulesServerResponse *message,
                      ProtobufCAllocator *allocator);
/* GetSwitcherScheduleServerRequest methods */
void   get_switcher_schedule_server_request__init
                     (GetSwitcherScheduleServerRequest         *message);
size_t get_switcher_schedule_server_request__get_packed_size
                     (const GetSwitcherScheduleServerRequest   *message);
size_t get_switcher_schedule_server_request__pack
                     (const GetSwitcherScheduleServerRequest   *message,
                      uint8_t             *out);
size_t get_switcher_schedule_server_request__pack_to_buffer
                     (const GetSwitcherScheduleServerRequest   *message,
                      ProtobufCBuffer     *buffer);
GetSwitcherScheduleServerRequest *
       get_switcher_schedule_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_switcher_schedule_server_request__free_unpacked
                     (GetSwitcherScheduleServerRequest *message,
                      ProtobufCAllocator *allocator);
/* GetSwitcherScheduleServerResponse methods */
void   get_switcher_schedule_server_response__init
                     (GetSwitcherScheduleServerResponse         *message);
size_t get_switcher_schedule_server_response__get_packed_size
                     (const GetSwitcherScheduleServerResponse   *message);
size_t get_switcher_schedule_server_response__pack
                     (const GetSwitcherScheduleServerResponse   *message,
                      uint8_t             *out);
size_t get_switcher_schedule_server_response__pack_to_buffer
                     (const GetSwitcherScheduleServerResponse   *message,
                      ProtobufCBuffer     *buffer);
GetSwitcherScheduleServerResponse *
       get_switcher_schedule_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_switcher_schedule_server_response__free_unpacked
                     (GetSwitcherScheduleServerResponse *message,
                      ProtobufCAllocator *allocator);
/* GetCountSwitcherScheduleServerRequest methods */
void   get_count_switcher_schedule_server_request__init
                     (GetCountSwitcherScheduleServerRequest         *message);
size_t get_count_switcher_schedule_server_request__get_packed_size
                     (const GetCountSwitcherScheduleServerRequest   *message);
size_t get_count_switcher_schedule_server_request__pack
                     (const GetCountSwitcherScheduleServerRequest   *message,
                      uint8_t             *out);
size_t get_count_switcher_schedule_server_request__pack_to_buffer
                     (const GetCountSwitcherScheduleServerRequest   *message,
                      ProtobufCBuffer     *buffer);
GetCountSwitcherScheduleServerRequest *
       get_count_switcher_schedule_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_count_switcher_schedule_server_request__free_unpacked
                     (GetCountSwitcherScheduleServerRequest *message,
                      ProtobufCAllocator *allocator);
/* GetCountSwitcherScheduleServerResponse methods */
void   get_count_switcher_schedule_server_response__init
                     (GetCountSwitcherScheduleServerResponse         *message);
size_t get_count_switcher_schedule_server_response__get_packed_size
                     (const GetCountSwitcherScheduleServerResponse   *message);
size_t get_count_switcher_schedule_server_response__pack
                     (const GetCountSwitcherScheduleServerResponse   *message,
                      uint8_t             *out);
size_t get_count_switcher_schedule_server_response__pack_to_buffer
                     (const GetCountSwitcherScheduleServerResponse   *message,
                      ProtobufCBuffer     *buffer);
GetCountSwitcherScheduleServerResponse *
       get_count_switcher_schedule_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_count_switcher_schedule_server_response__free_unpacked
                     (GetCountSwitcherScheduleServerResponse *message,
                      ProtobufCAllocator *allocator);
/* AddSwitcherScheduleServerRequest methods */
void   add_switcher_schedule_server_request__init
                     (AddSwitcherScheduleServerRequest         *message);
size_t add_switcher_schedule_server_request__get_packed_size
                     (const AddSwitcherScheduleServerRequest   *message);
size_t add_switcher_schedule_server_request__pack
                     (const AddSwitcherScheduleServerRequest   *message,
                      uint8_t             *out);
size_t add_switcher_schedule_server_request__pack_to_buffer
                     (const AddSwitcherScheduleServerRequest   *message,
                      ProtobufCBuffer     *buffer);
AddSwitcherScheduleServerRequest *
       add_switcher_schedule_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   add_switcher_schedule_server_request__free_unpacked
                     (AddSwitcherScheduleServerRequest *message,
                      ProtobufCAllocator *allocator);
/* AddSwitcherScheduleServerResponse methods */
void   add_switcher_schedule_server_response__init
                     (AddSwitcherScheduleServerResponse         *message);
size_t add_switcher_schedule_server_response__get_packed_size
                     (const AddSwitcherScheduleServerResponse   *message);
size_t add_switcher_schedule_server_response__pack
                     (const AddSwitcherScheduleServerResponse   *message,
                      uint8_t             *out);
size_t add_switcher_schedule_server_response__pack_to_buffer
                     (const AddSwitcherScheduleServerResponse   *message,
                      ProtobufCBuffer     *buffer);
AddSwitcherScheduleServerResponse *
       add_switcher_schedule_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   add_switcher_schedule_server_response__free_unpacked
                     (AddSwitcherScheduleServerResponse *message,
                      ProtobufCAllocator *allocator);
/* UpdateSwitcherScheduleServerRequest methods */
void   update_switcher_schedule_server_request__init
                     (UpdateSwitcherScheduleServerRequest         *message);
size_t update_switcher_schedule_server_request__get_packed_size
                     (const UpdateSwitcherScheduleServerRequest   *message);
size_t update_switcher_schedule_server_request__pack
                     (const UpdateSwitcherScheduleServerRequest   *message,
                      uint8_t             *out);
size_t update_switcher_schedule_server_request__pack_to_buffer
                     (const UpdateSwitcherScheduleServerRequest   *message,
                      ProtobufCBuffer     *buffer);
UpdateSwitcherScheduleServerRequest *
       update_switcher_schedule_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   update_switcher_schedule_server_request__free_unpacked
                     (UpdateSwitcherScheduleServerRequest *message,
                      ProtobufCAllocator *allocator);
/* UpdateSwitcherScheduleServerResponse methods */
void   update_switcher_schedule_server_response__init
                     (UpdateSwitcherScheduleServerResponse         *message);
size_t update_switcher_schedule_server_response__get_packed_size
                     (const UpdateSwitcherScheduleServerResponse   *message);
size_t update_switcher_schedule_server_response__pack
                     (const UpdateSwitcherScheduleServerResponse   *message,
                      uint8_t             *out);
size_t update_switcher_schedule_server_response__pack_to_buffer
                     (const UpdateSwitcherScheduleServerResponse   *message,
                      ProtobufCBuffer     *buffer);
UpdateSwitcherScheduleServerResponse *
       update_switcher_schedule_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   update_switcher_schedule_server_response__free_unpacked
                     (UpdateSwitcherScheduleServerResponse *message,
                      ProtobufCAllocator *allocator);
/* DeleteSwitcherScheduleServerRequest methods */
void   delete_switcher_schedule_server_request__init
                     (DeleteSwitcherScheduleServerRequest         *message);
size_t delete_switcher_schedule_server_request__get_packed_size
                     (const DeleteSwitcherScheduleServerRequest   *message);
size_t delete_switcher_schedule_server_request__pack
                     (const DeleteSwitcherScheduleServerRequest   *message,
                      uint8_t             *out);
size_t delete_switcher_schedule_server_request__pack_to_buffer
                     (const DeleteSwitcherScheduleServerRequest   *message,
                      ProtobufCBuffer     *buffer);
DeleteSwitcherScheduleServerRequest *
       delete_switcher_schedule_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   delete_switcher_schedule_server_request__free_unpacked
                     (DeleteSwitcherScheduleServerRequest *message,
                      ProtobufCAllocator *allocator);
/* DeleteSwitcherScheduleServerResponse methods */
void   delete_switcher_schedule_server_response__init
                     (DeleteSwitcherScheduleServerResponse         *message);
size_t delete_switcher_schedule_server_response__get_packed_size
                     (const DeleteSwitcherScheduleServerResponse   *message);
size_t delete_switcher_schedule_server_response__pack
                     (const DeleteSwitcherScheduleServerResponse   *message,
                      uint8_t             *out);
size_t delete_switcher_schedule_server_response__pack_to_buffer
                     (const DeleteSwitcherScheduleServerResponse   *message,
                      ProtobufCBuffer     *buffer);
DeleteSwitcherScheduleServerResponse *
       delete_switcher_schedule_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   delete_switcher_schedule_server_response__free_unpacked
                     (DeleteSwitcherScheduleServerResponse *message,
                      ProtobufCAllocator *allocator);
/* SetActiveSwitcherScheduleServerRequest methods */
void   set_active_switcher_schedule_server_request__init
                     (SetActiveSwitcherScheduleServerRequest         *message);
size_t set_active_switcher_schedule_server_request__get_packed_size
                     (const SetActiveSwitcherScheduleServerRequest   *message);
size_t set_active_switcher_schedule_server_request__pack
                     (const SetActiveSwitcherScheduleServerRequest   *message,
                      uint8_t             *out);
size_t set_active_switcher_schedule_server_request__pack_to_buffer
                     (const SetActiveSwitcherScheduleServerRequest   *message,
                      ProtobufCBuffer     *buffer);
SetActiveSwitcherScheduleServerRequest *
       set_active_switcher_schedule_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   set_active_switcher_schedule_server_request__free_unpacked
                     (SetActiveSwitcherScheduleServerRequest *message,
                      ProtobufCAllocator *allocator);
/* SetActiveSwitcherScheduleServerResponse methods */
void   set_active_switcher_schedule_server_response__init
                     (SetActiveSwitcherScheduleServerResponse         *message);
size_t set_active_switcher_schedule_server_response__get_packed_size
                     (const SetActiveSwitcherScheduleServerResponse   *message);
size_t set_active_switcher_schedule_server_response__pack
                     (const SetActiveSwitcherScheduleServerResponse   *message,
                      uint8_t             *out);
size_t set_active_switcher_schedule_server_response__pack_to_buffer
                     (const SetActiveSwitcherScheduleServerResponse   *message,
                      ProtobufCBuffer     *buffer);
SetActiveSwitcherScheduleServerResponse *
       set_active_switcher_schedule_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   set_active_switcher_schedule_server_response__free_unpacked
                     (SetActiveSwitcherScheduleServerResponse *message,
                      ProtobufCAllocator *allocator);
/* GetCurtainSwitcherServerRequest methods */
void   get_curtain_switcher_server_request__init
                     (GetCurtainSwitcherServerRequest         *message);
size_t get_curtain_switcher_server_request__get_packed_size
                     (const GetCurtainSwitcherServerRequest   *message);
size_t get_curtain_switcher_server_request__pack
                     (const GetCurtainSwitcherServerRequest   *message,
                      uint8_t             *out);
size_t get_curtain_switcher_server_request__pack_to_buffer
                     (const GetCurtainSwitcherServerRequest   *message,
                      ProtobufCBuffer     *buffer);
GetCurtainSwitcherServerRequest *
       get_curtain_switcher_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_curtain_switcher_server_request__free_unpacked
                     (GetCurtainSwitcherServerRequest *message,
                      ProtobufCAllocator *allocator);
/* GetCurtainSwitcherServerResponse methods */
void   get_curtain_switcher_server_response__init
                     (GetCurtainSwitcherServerResponse         *message);
size_t get_curtain_switcher_server_response__get_packed_size
                     (const GetCurtainSwitcherServerResponse   *message);
size_t get_curtain_switcher_server_response__pack
                     (const GetCurtainSwitcherServerResponse   *message,
                      uint8_t             *out);
size_t get_curtain_switcher_server_response__pack_to_buffer
                     (const GetCurtainSwitcherServerResponse   *message,
                      ProtobufCBuffer     *buffer);
GetCurtainSwitcherServerResponse *
       get_curtain_switcher_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_curtain_switcher_server_response__free_unpacked
                     (GetCurtainSwitcherServerResponse *message,
                      ProtobufCAllocator *allocator);
/* UpdateCurtainSwitcherServerRequest methods */
void   update_curtain_switcher_server_request__init
                     (UpdateCurtainSwitcherServerRequest         *message);
size_t update_curtain_switcher_server_request__get_packed_size
                     (const UpdateCurtainSwitcherServerRequest   *message);
size_t update_curtain_switcher_server_request__pack
                     (const UpdateCurtainSwitcherServerRequest   *message,
                      uint8_t             *out);
size_t update_curtain_switcher_server_request__pack_to_buffer
                     (const UpdateCurtainSwitcherServerRequest   *message,
                      ProtobufCBuffer     *buffer);
UpdateCurtainSwitcherServerRequest *
       update_curtain_switcher_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   update_curtain_switcher_server_request__free_unpacked
                     (UpdateCurtainSwitcherServerRequest *message,
                      ProtobufCAllocator *allocator);
/* UpdateCurtainSwitcherServerResponse methods */
void   update_curtain_switcher_server_response__init
                     (UpdateCurtainSwitcherServerResponse         *message);
size_t update_curtain_switcher_server_response__get_packed_size
                     (const UpdateCurtainSwitcherServerResponse   *message);
size_t update_curtain_switcher_server_response__pack
                     (const UpdateCurtainSwitcherServerResponse   *message,
                      uint8_t             *out);
size_t update_curtain_switcher_server_response__pack_to_buffer
                     (const UpdateCurtainSwitcherServerResponse   *message,
                      ProtobufCBuffer     *buffer);
UpdateCurtainSwitcherServerResponse *
       update_curtain_switcher_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   update_curtain_switcher_server_response__free_unpacked
                     (UpdateCurtainSwitcherServerResponse *message,
                      ProtobufCAllocator *allocator);
/* GetCurtainSwitcherStateServerRequest methods */
void   get_curtain_switcher_state_server_request__init
                     (GetCurtainSwitcherStateServerRequest         *message);
size_t get_curtain_switcher_state_server_request__get_packed_size
                     (const GetCurtainSwitcherStateServerRequest   *message);
size_t get_curtain_switcher_state_server_request__pack
                     (const GetCurtainSwitcherStateServerRequest   *message,
                      uint8_t             *out);
size_t get_curtain_switcher_state_server_request__pack_to_buffer
                     (const GetCurtainSwitcherStateServerRequest   *message,
                      ProtobufCBuffer     *buffer);
GetCurtainSwitcherStateServerRequest *
       get_curtain_switcher_state_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_curtain_switcher_state_server_request__free_unpacked
                     (GetCurtainSwitcherStateServerRequest *message,
                      ProtobufCAllocator *allocator);
/* GetCurtainSwitcherStateServerResponse methods */
void   get_curtain_switcher_state_server_response__init
                     (GetCurtainSwitcherStateServerResponse         *message);
size_t get_curtain_switcher_state_server_response__get_packed_size
                     (const GetCurtainSwitcherStateServerResponse   *message);
size_t get_curtain_switcher_state_server_response__pack
                     (const GetCurtainSwitcherStateServerResponse   *message,
                      uint8_t             *out);
size_t get_curtain_switcher_state_server_response__pack_to_buffer
                     (const GetCurtainSwitcherStateServerResponse   *message,
                      ProtobufCBuffer     *buffer);
GetCurtainSwitcherStateServerResponse *
       get_curtain_switcher_state_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_curtain_switcher_state_server_response__free_unpacked
                     (GetCurtainSwitcherStateServerResponse *message,
                      ProtobufCAllocator *allocator);
/* CurtainSwitcherServerRequest methods */
void   curtain_switcher_server_request__init
                     (CurtainSwitcherServerRequest         *message);
size_t curtain_switcher_server_request__get_packed_size
                     (const CurtainSwitcherServerRequest   *message);
size_t curtain_switcher_server_request__pack
                     (const CurtainSwitcherServerRequest   *message,
                      uint8_t             *out);
size_t curtain_switcher_server_request__pack_to_buffer
                     (const CurtainSwitcherServerRequest   *message,
                      ProtobufCBuffer     *buffer);
CurtainSwitcherServerRequest *
       curtain_switcher_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   curtain_switcher_server_request__free_unpacked
                     (CurtainSwitcherServerRequest *message,
                      ProtobufCAllocator *allocator);
/* CurtainSwitcherServerResponse methods */
void   curtain_switcher_server_response__init
                     (CurtainSwitcherServerResponse         *message);
size_t curtain_switcher_server_response__get_packed_size
                     (const CurtainSwitcherServerResponse   *message);
size_t curtain_switcher_server_response__pack
                     (const CurtainSwitcherServerResponse   *message,
                      uint8_t             *out);
size_t curtain_switcher_server_response__pack_to_buffer
                     (const CurtainSwitcherServerResponse   *message,
                      ProtobufCBuffer     *buffer);
CurtainSwitcherServerResponse *
       curtain_switcher_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   curtain_switcher_server_response__free_unpacked
                     (CurtainSwitcherServerResponse *message,
                      ProtobufCAllocator *allocator);
/* GetCurtainSwitcherSchedulesServerRequest methods */
void   get_curtain_switcher_schedules_server_request__init
                     (GetCurtainSwitcherSchedulesServerRequest         *message);
size_t get_curtain_switcher_schedules_server_request__get_packed_size
                     (const GetCurtainSwitcherSchedulesServerRequest   *message);
size_t get_curtain_switcher_schedules_server_request__pack
                     (const GetCurtainSwitcherSchedulesServerRequest   *message,
                      uint8_t             *out);
size_t get_curtain_switcher_schedules_server_request__pack_to_buffer
                     (const GetCurtainSwitcherSchedulesServerRequest   *message,
                      ProtobufCBuffer     *buffer);
GetCurtainSwitcherSchedulesServerRequest *
       get_curtain_switcher_schedules_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_curtain_switcher_schedules_server_request__free_unpacked
                     (GetCurtainSwitcherSchedulesServerRequest *message,
                      ProtobufCAllocator *allocator);
/* GetCurtainSwitcherSchedulesServerResponse methods */
void   get_curtain_switcher_schedules_server_response__init
                     (GetCurtainSwitcherSchedulesServerResponse         *message);
size_t get_curtain_switcher_schedules_server_response__get_packed_size
                     (const GetCurtainSwitcherSchedulesServerResponse   *message);
size_t get_curtain_switcher_schedules_server_response__pack
                     (const GetCurtainSwitcherSchedulesServerResponse   *message,
                      uint8_t             *out);
size_t get_curtain_switcher_schedules_server_response__pack_to_buffer
                     (const GetCurtainSwitcherSchedulesServerResponse   *message,
                      ProtobufCBuffer     *buffer);
GetCurtainSwitcherSchedulesServerResponse *
       get_curtain_switcher_schedules_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_curtain_switcher_schedules_server_response__free_unpacked
                     (GetCurtainSwitcherSchedulesServerResponse *message,
                      ProtobufCAllocator *allocator);
/* GetCurtainSwitcherScheduleServerRequest methods */
void   get_curtain_switcher_schedule_server_request__init
                     (GetCurtainSwitcherScheduleServerRequest         *message);
size_t get_curtain_switcher_schedule_server_request__get_packed_size
                     (const GetCurtainSwitcherScheduleServerRequest   *message);
size_t get_curtain_switcher_schedule_server_request__pack
                     (const GetCurtainSwitcherScheduleServerRequest   *message,
                      uint8_t             *out);
size_t get_curtain_switcher_schedule_server_request__pack_to_buffer
                     (const GetCurtainSwitcherScheduleServerRequest   *message,
                      ProtobufCBuffer     *buffer);
GetCurtainSwitcherScheduleServerRequest *
       get_curtain_switcher_schedule_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_curtain_switcher_schedule_server_request__free_unpacked
                     (GetCurtainSwitcherScheduleServerRequest *message,
                      ProtobufCAllocator *allocator);
/* GetCurtainSwitcherScheduleServerResponse methods */
void   get_curtain_switcher_schedule_server_response__init
                     (GetCurtainSwitcherScheduleServerResponse         *message);
size_t get_curtain_switcher_schedule_server_response__get_packed_size
                     (const GetCurtainSwitcherScheduleServerResponse   *message);
size_t get_curtain_switcher_schedule_server_response__pack
                     (const GetCurtainSwitcherScheduleServerResponse   *message,
                      uint8_t             *out);
size_t get_curtain_switcher_schedule_server_response__pack_to_buffer
                     (const GetCurtainSwitcherScheduleServerResponse   *message,
                      ProtobufCBuffer     *buffer);
GetCurtainSwitcherScheduleServerResponse *
       get_curtain_switcher_schedule_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_curtain_switcher_schedule_server_response__free_unpacked
                     (GetCurtainSwitcherScheduleServerResponse *message,
                      ProtobufCAllocator *allocator);
/* GetCountCurtainSwitcherScheduleServerRequest methods */
void   get_count_curtain_switcher_schedule_server_request__init
                     (GetCountCurtainSwitcherScheduleServerRequest         *message);
size_t get_count_curtain_switcher_schedule_server_request__get_packed_size
                     (const GetCountCurtainSwitcherScheduleServerRequest   *message);
size_t get_count_curtain_switcher_schedule_server_request__pack
                     (const GetCountCurtainSwitcherScheduleServerRequest   *message,
                      uint8_t             *out);
size_t get_count_curtain_switcher_schedule_server_request__pack_to_buffer
                     (const GetCountCurtainSwitcherScheduleServerRequest   *message,
                      ProtobufCBuffer     *buffer);
GetCountCurtainSwitcherScheduleServerRequest *
       get_count_curtain_switcher_schedule_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_count_curtain_switcher_schedule_server_request__free_unpacked
                     (GetCountCurtainSwitcherScheduleServerRequest *message,
                      ProtobufCAllocator *allocator);
/* GetCountCurtainSwitcherScheduleServerResponse methods */
void   get_count_curtain_switcher_schedule_server_response__init
                     (GetCountCurtainSwitcherScheduleServerResponse         *message);
size_t get_count_curtain_switcher_schedule_server_response__get_packed_size
                     (const GetCountCurtainSwitcherScheduleServerResponse   *message);
size_t get_count_curtain_switcher_schedule_server_response__pack
                     (const GetCountCurtainSwitcherScheduleServerResponse   *message,
                      uint8_t             *out);
size_t get_count_curtain_switcher_schedule_server_response__pack_to_buffer
                     (const GetCountCurtainSwitcherScheduleServerResponse   *message,
                      ProtobufCBuffer     *buffer);
GetCountCurtainSwitcherScheduleServerResponse *
       get_count_curtain_switcher_schedule_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_count_curtain_switcher_schedule_server_response__free_unpacked
                     (GetCountCurtainSwitcherScheduleServerResponse *message,
                      ProtobufCAllocator *allocator);
/* AddCurtainSwitcherScheduleServerRequest methods */
void   add_curtain_switcher_schedule_server_request__init
                     (AddCurtainSwitcherScheduleServerRequest         *message);
size_t add_curtain_switcher_schedule_server_request__get_packed_size
                     (const AddCurtainSwitcherScheduleServerRequest   *message);
size_t add_curtain_switcher_schedule_server_request__pack
                     (const AddCurtainSwitcherScheduleServerRequest   *message,
                      uint8_t             *out);
size_t add_curtain_switcher_schedule_server_request__pack_to_buffer
                     (const AddCurtainSwitcherScheduleServerRequest   *message,
                      ProtobufCBuffer     *buffer);
AddCurtainSwitcherScheduleServerRequest *
       add_curtain_switcher_schedule_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   add_curtain_switcher_schedule_server_request__free_unpacked
                     (AddCurtainSwitcherScheduleServerRequest *message,
                      ProtobufCAllocator *allocator);
/* AddCurtainSwitcherScheduleServerResponse methods */
void   add_curtain_switcher_schedule_server_response__init
                     (AddCurtainSwitcherScheduleServerResponse         *message);
size_t add_curtain_switcher_schedule_server_response__get_packed_size
                     (const AddCurtainSwitcherScheduleServerResponse   *message);
size_t add_curtain_switcher_schedule_server_response__pack
                     (const AddCurtainSwitcherScheduleServerResponse   *message,
                      uint8_t             *out);
size_t add_curtain_switcher_schedule_server_response__pack_to_buffer
                     (const AddCurtainSwitcherScheduleServerResponse   *message,
                      ProtobufCBuffer     *buffer);
AddCurtainSwitcherScheduleServerResponse *
       add_curtain_switcher_schedule_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   add_curtain_switcher_schedule_server_response__free_unpacked
                     (AddCurtainSwitcherScheduleServerResponse *message,
                      ProtobufCAllocator *allocator);
/* UpdateCurtainSwitcherScheduleServerRequest methods */
void   update_curtain_switcher_schedule_server_request__init
                     (UpdateCurtainSwitcherScheduleServerRequest         *message);
size_t update_curtain_switcher_schedule_server_request__get_packed_size
                     (const UpdateCurtainSwitcherScheduleServerRequest   *message);
size_t update_curtain_switcher_schedule_server_request__pack
                     (const UpdateCurtainSwitcherScheduleServerRequest   *message,
                      uint8_t             *out);
size_t update_curtain_switcher_schedule_server_request__pack_to_buffer
                     (const UpdateCurtainSwitcherScheduleServerRequest   *message,
                      ProtobufCBuffer     *buffer);
UpdateCurtainSwitcherScheduleServerRequest *
       update_curtain_switcher_schedule_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   update_curtain_switcher_schedule_server_request__free_unpacked
                     (UpdateCurtainSwitcherScheduleServerRequest *message,
                      ProtobufCAllocator *allocator);
/* UpdateCurtainSwitcherScheduleServerResponse methods */
void   update_curtain_switcher_schedule_server_response__init
                     (UpdateCurtainSwitcherScheduleServerResponse         *message);
size_t update_curtain_switcher_schedule_server_response__get_packed_size
                     (const UpdateCurtainSwitcherScheduleServerResponse   *message);
size_t update_curtain_switcher_schedule_server_response__pack
                     (const UpdateCurtainSwitcherScheduleServerResponse   *message,
                      uint8_t             *out);
size_t update_curtain_switcher_schedule_server_response__pack_to_buffer
                     (const UpdateCurtainSwitcherScheduleServerResponse   *message,
                      ProtobufCBuffer     *buffer);
UpdateCurtainSwitcherScheduleServerResponse *
       update_curtain_switcher_schedule_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   update_curtain_switcher_schedule_server_response__free_unpacked
                     (UpdateCurtainSwitcherScheduleServerResponse *message,
                      ProtobufCAllocator *allocator);
/* DeleteCurtainSwitcherScheduleServerRequest methods */
void   delete_curtain_switcher_schedule_server_request__init
                     (DeleteCurtainSwitcherScheduleServerRequest         *message);
size_t delete_curtain_switcher_schedule_server_request__get_packed_size
                     (const DeleteCurtainSwitcherScheduleServerRequest   *message);
size_t delete_curtain_switcher_schedule_server_request__pack
                     (const DeleteCurtainSwitcherScheduleServerRequest   *message,
                      uint8_t             *out);
size_t delete_curtain_switcher_schedule_server_request__pack_to_buffer
                     (const DeleteCurtainSwitcherScheduleServerRequest   *message,
                      ProtobufCBuffer     *buffer);
DeleteCurtainSwitcherScheduleServerRequest *
       delete_curtain_switcher_schedule_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   delete_curtain_switcher_schedule_server_request__free_unpacked
                     (DeleteCurtainSwitcherScheduleServerRequest *message,
                      ProtobufCAllocator *allocator);
/* DeleteCurtainSwitcherScheduleServerResponse methods */
void   delete_curtain_switcher_schedule_server_response__init
                     (DeleteCurtainSwitcherScheduleServerResponse         *message);
size_t delete_curtain_switcher_schedule_server_response__get_packed_size
                     (const DeleteCurtainSwitcherScheduleServerResponse   *message);
size_t delete_curtain_switcher_schedule_server_response__pack
                     (const DeleteCurtainSwitcherScheduleServerResponse   *message,
                      uint8_t             *out);
size_t delete_curtain_switcher_schedule_server_response__pack_to_buffer
                     (const DeleteCurtainSwitcherScheduleServerResponse   *message,
                      ProtobufCBuffer     *buffer);
DeleteCurtainSwitcherScheduleServerResponse *
       delete_curtain_switcher_schedule_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   delete_curtain_switcher_schedule_server_response__free_unpacked
                     (DeleteCurtainSwitcherScheduleServerResponse *message,
                      ProtobufCAllocator *allocator);
/* SetActiveCurtainSwitcherScheduleServerRequest methods */
void   set_active_curtain_switcher_schedule_server_request__init
                     (SetActiveCurtainSwitcherScheduleServerRequest         *message);
size_t set_active_curtain_switcher_schedule_server_request__get_packed_size
                     (const SetActiveCurtainSwitcherScheduleServerRequest   *message);
size_t set_active_curtain_switcher_schedule_server_request__pack
                     (const SetActiveCurtainSwitcherScheduleServerRequest   *message,
                      uint8_t             *out);
size_t set_active_curtain_switcher_schedule_server_request__pack_to_buffer
                     (const SetActiveCurtainSwitcherScheduleServerRequest   *message,
                      ProtobufCBuffer     *buffer);
SetActiveCurtainSwitcherScheduleServerRequest *
       set_active_curtain_switcher_schedule_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   set_active_curtain_switcher_schedule_server_request__free_unpacked
                     (SetActiveCurtainSwitcherScheduleServerRequest *message,
                      ProtobufCAllocator *allocator);
/* SetActiveCurtainSwitcherScheduleServerResponse methods */
void   set_active_curtain_switcher_schedule_server_response__init
                     (SetActiveCurtainSwitcherScheduleServerResponse         *message);
size_t set_active_curtain_switcher_schedule_server_response__get_packed_size
                     (const SetActiveCurtainSwitcherScheduleServerResponse   *message);
size_t set_active_curtain_switcher_schedule_server_response__pack
                     (const SetActiveCurtainSwitcherScheduleServerResponse   *message,
                      uint8_t             *out);
size_t set_active_curtain_switcher_schedule_server_response__pack_to_buffer
                     (const SetActiveCurtainSwitcherScheduleServerResponse   *message,
                      ProtobufCBuffer     *buffer);
SetActiveCurtainSwitcherScheduleServerResponse *
       set_active_curtain_switcher_schedule_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   set_active_curtain_switcher_schedule_server_response__free_unpacked
                     (SetActiveCurtainSwitcherScheduleServerResponse *message,
                      ProtobufCAllocator *allocator);
/* GetMeterServerRequest methods */
void   get_meter_server_request__init
                     (GetMeterServerRequest         *message);
size_t get_meter_server_request__get_packed_size
                     (const GetMeterServerRequest   *message);
size_t get_meter_server_request__pack
                     (const GetMeterServerRequest   *message,
                      uint8_t             *out);
size_t get_meter_server_request__pack_to_buffer
                     (const GetMeterServerRequest   *message,
                      ProtobufCBuffer     *buffer);
GetMeterServerRequest *
       get_meter_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_meter_server_request__free_unpacked
                     (GetMeterServerRequest *message,
                      ProtobufCAllocator *allocator);
/* GetMeterServerResponse methods */
void   get_meter_server_response__init
                     (GetMeterServerResponse         *message);
size_t get_meter_server_response__get_packed_size
                     (const GetMeterServerResponse   *message);
size_t get_meter_server_response__pack
                     (const GetMeterServerResponse   *message,
                      uint8_t             *out);
size_t get_meter_server_response__pack_to_buffer
                     (const GetMeterServerResponse   *message,
                      ProtobufCBuffer     *buffer);
GetMeterServerResponse *
       get_meter_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_meter_server_response__free_unpacked
                     (GetMeterServerResponse *message,
                      ProtobufCAllocator *allocator);
/* UpdateMeterServerRequest methods */
void   update_meter_server_request__init
                     (UpdateMeterServerRequest         *message);
size_t update_meter_server_request__get_packed_size
                     (const UpdateMeterServerRequest   *message);
size_t update_meter_server_request__pack
                     (const UpdateMeterServerRequest   *message,
                      uint8_t             *out);
size_t update_meter_server_request__pack_to_buffer
                     (const UpdateMeterServerRequest   *message,
                      ProtobufCBuffer     *buffer);
UpdateMeterServerRequest *
       update_meter_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   update_meter_server_request__free_unpacked
                     (UpdateMeterServerRequest *message,
                      ProtobufCAllocator *allocator);
/* UpdateMeterServerResponse methods */
void   update_meter_server_response__init
                     (UpdateMeterServerResponse         *message);
size_t update_meter_server_response__get_packed_size
                     (const UpdateMeterServerResponse   *message);
size_t update_meter_server_response__pack
                     (const UpdateMeterServerResponse   *message,
                      uint8_t             *out);
size_t update_meter_server_response__pack_to_buffer
                     (const UpdateMeterServerResponse   *message,
                      ProtobufCBuffer     *buffer);
UpdateMeterServerResponse *
       update_meter_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   update_meter_server_response__free_unpacked
                     (UpdateMeterServerResponse *message,
                      ProtobufCAllocator *allocator);
/* GetMeterEstimatesDayInMonthServerRequest methods */
void   get_meter_estimates_day_in_month_server_request__init
                     (GetMeterEstimatesDayInMonthServerRequest         *message);
size_t get_meter_estimates_day_in_month_server_request__get_packed_size
                     (const GetMeterEstimatesDayInMonthServerRequest   *message);
size_t get_meter_estimates_day_in_month_server_request__pack
                     (const GetMeterEstimatesDayInMonthServerRequest   *message,
                      uint8_t             *out);
size_t get_meter_estimates_day_in_month_server_request__pack_to_buffer
                     (const GetMeterEstimatesDayInMonthServerRequest   *message,
                      ProtobufCBuffer     *buffer);
GetMeterEstimatesDayInMonthServerRequest *
       get_meter_estimates_day_in_month_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_meter_estimates_day_in_month_server_request__free_unpacked
                     (GetMeterEstimatesDayInMonthServerRequest *message,
                      ProtobufCAllocator *allocator);
/* GetMeterEstimatesDayInMonthServerResponse methods */
void   get_meter_estimates_day_in_month_server_response__init
                     (GetMeterEstimatesDayInMonthServerResponse         *message);
size_t get_meter_estimates_day_in_month_server_response__get_packed_size
                     (const GetMeterEstimatesDayInMonthServerResponse   *message);
size_t get_meter_estimates_day_in_month_server_response__pack
                     (const GetMeterEstimatesDayInMonthServerResponse   *message,
                      uint8_t             *out);
size_t get_meter_estimates_day_in_month_server_response__pack_to_buffer
                     (const GetMeterEstimatesDayInMonthServerResponse   *message,
                      ProtobufCBuffer     *buffer);
GetMeterEstimatesDayInMonthServerResponse *
       get_meter_estimates_day_in_month_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_meter_estimates_day_in_month_server_response__free_unpacked
                     (GetMeterEstimatesDayInMonthServerResponse *message,
                      ProtobufCAllocator *allocator);
/* GetMeterEstimatesHourInDayServerRequest methods */
void   get_meter_estimates_hour_in_day_server_request__init
                     (GetMeterEstimatesHourInDayServerRequest         *message);
size_t get_meter_estimates_hour_in_day_server_request__get_packed_size
                     (const GetMeterEstimatesHourInDayServerRequest   *message);
size_t get_meter_estimates_hour_in_day_server_request__pack
                     (const GetMeterEstimatesHourInDayServerRequest   *message,
                      uint8_t             *out);
size_t get_meter_estimates_hour_in_day_server_request__pack_to_buffer
                     (const GetMeterEstimatesHourInDayServerRequest   *message,
                      ProtobufCBuffer     *buffer);
GetMeterEstimatesHourInDayServerRequest *
       get_meter_estimates_hour_in_day_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_meter_estimates_hour_in_day_server_request__free_unpacked
                     (GetMeterEstimatesHourInDayServerRequest *message,
                      ProtobufCAllocator *allocator);
/* GetMeterEstimatesHourInDayServerResponse methods */
void   get_meter_estimates_hour_in_day_server_response__init
                     (GetMeterEstimatesHourInDayServerResponse         *message);
size_t get_meter_estimates_hour_in_day_server_response__get_packed_size
                     (const GetMeterEstimatesHourInDayServerResponse   *message);
size_t get_meter_estimates_hour_in_day_server_response__pack
                     (const GetMeterEstimatesHourInDayServerResponse   *message,
                      uint8_t             *out);
size_t get_meter_estimates_hour_in_day_server_response__pack_to_buffer
                     (const GetMeterEstimatesHourInDayServerResponse   *message,
                      ProtobufCBuffer     *buffer);
GetMeterEstimatesHourInDayServerResponse *
       get_meter_estimates_hour_in_day_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_meter_estimates_hour_in_day_server_response__free_unpacked
                     (GetMeterEstimatesHourInDayServerResponse *message,
                      ProtobufCAllocator *allocator);
/* GetMetersByHomeIdServerRequest methods */
void   get_meters_by_home_id_server_request__init
                     (GetMetersByHomeIdServerRequest         *message);
size_t get_meters_by_home_id_server_request__get_packed_size
                     (const GetMetersByHomeIdServerRequest   *message);
size_t get_meters_by_home_id_server_request__pack
                     (const GetMetersByHomeIdServerRequest   *message,
                      uint8_t             *out);
size_t get_meters_by_home_id_server_request__pack_to_buffer
                     (const GetMetersByHomeIdServerRequest   *message,
                      ProtobufCBuffer     *buffer);
GetMetersByHomeIdServerRequest *
       get_meters_by_home_id_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_meters_by_home_id_server_request__free_unpacked
                     (GetMetersByHomeIdServerRequest *message,
                      ProtobufCAllocator *allocator);
/* GetMetersByHomeIdServerResponse methods */
void   get_meters_by_home_id_server_response__init
                     (GetMetersByHomeIdServerResponse         *message);
size_t get_meters_by_home_id_server_response__get_packed_size
                     (const GetMetersByHomeIdServerResponse   *message);
size_t get_meters_by_home_id_server_response__pack
                     (const GetMetersByHomeIdServerResponse   *message,
                      uint8_t             *out);
size_t get_meters_by_home_id_server_response__pack_to_buffer
                     (const GetMetersByHomeIdServerResponse   *message,
                      ProtobufCBuffer     *buffer);
GetMetersByHomeIdServerResponse *
       get_meters_by_home_id_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_meters_by_home_id_server_response__free_unpacked
                     (GetMetersByHomeIdServerResponse *message,
                      ProtobufCAllocator *allocator);
/* GetMeterMissingInDayServerRequest methods */
void   get_meter_missing_in_day_server_request__init
                     (GetMeterMissingInDayServerRequest         *message);
size_t get_meter_missing_in_day_server_request__get_packed_size
                     (const GetMeterMissingInDayServerRequest   *message);
size_t get_meter_missing_in_day_server_request__pack
                     (const GetMeterMissingInDayServerRequest   *message,
                      uint8_t             *out);
size_t get_meter_missing_in_day_server_request__pack_to_buffer
                     (const GetMeterMissingInDayServerRequest   *message,
                      ProtobufCBuffer     *buffer);
GetMeterMissingInDayServerRequest *
       get_meter_missing_in_day_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_meter_missing_in_day_server_request__free_unpacked
                     (GetMeterMissingInDayServerRequest *message,
                      ProtobufCAllocator *allocator);
/* GetMeterMissingInDayServerResponse methods */
void   get_meter_missing_in_day_server_response__init
                     (GetMeterMissingInDayServerResponse         *message);
size_t get_meter_missing_in_day_server_response__get_packed_size
                     (const GetMeterMissingInDayServerResponse   *message);
size_t get_meter_missing_in_day_server_response__pack
                     (const GetMeterMissingInDayServerResponse   *message,
                      uint8_t             *out);
size_t get_meter_missing_in_day_server_response__pack_to_buffer
                     (const GetMeterMissingInDayServerResponse   *message,
                      ProtobufCBuffer     *buffer);
GetMeterMissingInDayServerResponse *
       get_meter_missing_in_day_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_meter_missing_in_day_server_response__free_unpacked
                     (GetMeterMissingInDayServerResponse *message,
                      ProtobufCAllocator *allocator);
/* GetAirConditionerStateServerRequest methods */
void   get_air_conditioner_state_server_request__init
                     (GetAirConditionerStateServerRequest         *message);
size_t get_air_conditioner_state_server_request__get_packed_size
                     (const GetAirConditionerStateServerRequest   *message);
size_t get_air_conditioner_state_server_request__pack
                     (const GetAirConditionerStateServerRequest   *message,
                      uint8_t             *out);
size_t get_air_conditioner_state_server_request__pack_to_buffer
                     (const GetAirConditionerStateServerRequest   *message,
                      ProtobufCBuffer     *buffer);
GetAirConditionerStateServerRequest *
       get_air_conditioner_state_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_air_conditioner_state_server_request__free_unpacked
                     (GetAirConditionerStateServerRequest *message,
                      ProtobufCAllocator *allocator);
/* GetAirConditionerStateServerResponse methods */
void   get_air_conditioner_state_server_response__init
                     (GetAirConditionerStateServerResponse         *message);
size_t get_air_conditioner_state_server_response__get_packed_size
                     (const GetAirConditionerStateServerResponse   *message);
size_t get_air_conditioner_state_server_response__pack
                     (const GetAirConditionerStateServerResponse   *message,
                      uint8_t             *out);
size_t get_air_conditioner_state_server_response__pack_to_buffer
                     (const GetAirConditionerStateServerResponse   *message,
                      ProtobufCBuffer     *buffer);
GetAirConditionerStateServerResponse *
       get_air_conditioner_state_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_air_conditioner_state_server_response__free_unpacked
                     (GetAirConditionerStateServerResponse *message,
                      ProtobufCAllocator *allocator);
/* AirConditionerServerRequest methods */
void   air_conditioner_server_request__init
                     (AirConditionerServerRequest         *message);
size_t air_conditioner_server_request__get_packed_size
                     (const AirConditionerServerRequest   *message);
size_t air_conditioner_server_request__pack
                     (const AirConditionerServerRequest   *message,
                      uint8_t             *out);
size_t air_conditioner_server_request__pack_to_buffer
                     (const AirConditionerServerRequest   *message,
                      ProtobufCBuffer     *buffer);
AirConditionerServerRequest *
       air_conditioner_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   air_conditioner_server_request__free_unpacked
                     (AirConditionerServerRequest *message,
                      ProtobufCAllocator *allocator);
/* AirConditionerServerResponse methods */
void   air_conditioner_server_response__init
                     (AirConditionerServerResponse         *message);
size_t air_conditioner_server_response__get_packed_size
                     (const AirConditionerServerResponse   *message);
size_t air_conditioner_server_response__pack
                     (const AirConditionerServerResponse   *message,
                      uint8_t             *out);
size_t air_conditioner_server_response__pack_to_buffer
                     (const AirConditionerServerResponse   *message,
                      ProtobufCBuffer     *buffer);
AirConditionerServerResponse *
       air_conditioner_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   air_conditioner_server_response__free_unpacked
                     (AirConditionerServerResponse *message,
                      ProtobufCAllocator *allocator);
/* GetRemotesServerRequest methods */
void   get_remotes_server_request__init
                     (GetRemotesServerRequest         *message);
size_t get_remotes_server_request__get_packed_size
                     (const GetRemotesServerRequest   *message);
size_t get_remotes_server_request__pack
                     (const GetRemotesServerRequest   *message,
                      uint8_t             *out);
size_t get_remotes_server_request__pack_to_buffer
                     (const GetRemotesServerRequest   *message,
                      ProtobufCBuffer     *buffer);
GetRemotesServerRequest *
       get_remotes_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_remotes_server_request__free_unpacked
                     (GetRemotesServerRequest *message,
                      ProtobufCAllocator *allocator);
/* GetRemotesServerResponse methods */
void   get_remotes_server_response__init
                     (GetRemotesServerResponse         *message);
size_t get_remotes_server_response__get_packed_size
                     (const GetRemotesServerResponse   *message);
size_t get_remotes_server_response__pack
                     (const GetRemotesServerResponse   *message,
                      uint8_t             *out);
size_t get_remotes_server_response__pack_to_buffer
                     (const GetRemotesServerResponse   *message,
                      ProtobufCBuffer     *buffer);
GetRemotesServerResponse *
       get_remotes_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_remotes_server_response__free_unpacked
                     (GetRemotesServerResponse *message,
                      ProtobufCAllocator *allocator);
/* GetRemoteServerRequest methods */
void   get_remote_server_request__init
                     (GetRemoteServerRequest         *message);
size_t get_remote_server_request__get_packed_size
                     (const GetRemoteServerRequest   *message);
size_t get_remote_server_request__pack
                     (const GetRemoteServerRequest   *message,
                      uint8_t             *out);
size_t get_remote_server_request__pack_to_buffer
                     (const GetRemoteServerRequest   *message,
                      ProtobufCBuffer     *buffer);
GetRemoteServerRequest *
       get_remote_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_remote_server_request__free_unpacked
                     (GetRemoteServerRequest *message,
                      ProtobufCAllocator *allocator);
/* GetRemoteServerResponse methods */
void   get_remote_server_response__init
                     (GetRemoteServerResponse         *message);
size_t get_remote_server_response__get_packed_size
                     (const GetRemoteServerResponse   *message);
size_t get_remote_server_response__pack
                     (const GetRemoteServerResponse   *message,
                      uint8_t             *out);
size_t get_remote_server_response__pack_to_buffer
                     (const GetRemoteServerResponse   *message,
                      ProtobufCBuffer     *buffer);
GetRemoteServerResponse *
       get_remote_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_remote_server_response__free_unpacked
                     (GetRemoteServerResponse *message,
                      ProtobufCAllocator *allocator);
/* GetRemoteLibrariesServerRequest methods */
void   get_remote_libraries_server_request__init
                     (GetRemoteLibrariesServerRequest         *message);
size_t get_remote_libraries_server_request__get_packed_size
                     (const GetRemoteLibrariesServerRequest   *message);
size_t get_remote_libraries_server_request__pack
                     (const GetRemoteLibrariesServerRequest   *message,
                      uint8_t             *out);
size_t get_remote_libraries_server_request__pack_to_buffer
                     (const GetRemoteLibrariesServerRequest   *message,
                      ProtobufCBuffer     *buffer);
GetRemoteLibrariesServerRequest *
       get_remote_libraries_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_remote_libraries_server_request__free_unpacked
                     (GetRemoteLibrariesServerRequest *message,
                      ProtobufCAllocator *allocator);
/* GetRemoteLibrariesServerResponse methods */
void   get_remote_libraries_server_response__init
                     (GetRemoteLibrariesServerResponse         *message);
size_t get_remote_libraries_server_response__get_packed_size
                     (const GetRemoteLibrariesServerResponse   *message);
size_t get_remote_libraries_server_response__pack
                     (const GetRemoteLibrariesServerResponse   *message,
                      uint8_t             *out);
size_t get_remote_libraries_server_response__pack_to_buffer
                     (const GetRemoteLibrariesServerResponse   *message,
                      ProtobufCBuffer     *buffer);
GetRemoteLibrariesServerResponse *
       get_remote_libraries_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_remote_libraries_server_response__free_unpacked
                     (GetRemoteLibrariesServerResponse *message,
                      ProtobufCAllocator *allocator);
/* GetCommandsRemoteServerRequest methods */
void   get_commands_remote_server_request__init
                     (GetCommandsRemoteServerRequest         *message);
size_t get_commands_remote_server_request__get_packed_size
                     (const GetCommandsRemoteServerRequest   *message);
size_t get_commands_remote_server_request__pack
                     (const GetCommandsRemoteServerRequest   *message,
                      uint8_t             *out);
size_t get_commands_remote_server_request__pack_to_buffer
                     (const GetCommandsRemoteServerRequest   *message,
                      ProtobufCBuffer     *buffer);
GetCommandsRemoteServerRequest *
       get_commands_remote_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_commands_remote_server_request__free_unpacked
                     (GetCommandsRemoteServerRequest *message,
                      ProtobufCAllocator *allocator);
/* GetCommandsRemoteServerResponse methods */
void   get_commands_remote_server_response__init
                     (GetCommandsRemoteServerResponse         *message);
size_t get_commands_remote_server_response__get_packed_size
                     (const GetCommandsRemoteServerResponse   *message);
size_t get_commands_remote_server_response__pack
                     (const GetCommandsRemoteServerResponse   *message,
                      uint8_t             *out);
size_t get_commands_remote_server_response__pack_to_buffer
                     (const GetCommandsRemoteServerResponse   *message,
                      ProtobufCBuffer     *buffer);
GetCommandsRemoteServerResponse *
       get_commands_remote_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_commands_remote_server_response__free_unpacked
                     (GetCommandsRemoteServerResponse *message,
                      ProtobufCAllocator *allocator);
/* SendCommandRemoteServerRequest methods */
void   send_command_remote_server_request__init
                     (SendCommandRemoteServerRequest         *message);
size_t send_command_remote_server_request__get_packed_size
                     (const SendCommandRemoteServerRequest   *message);
size_t send_command_remote_server_request__pack
                     (const SendCommandRemoteServerRequest   *message,
                      uint8_t             *out);
size_t send_command_remote_server_request__pack_to_buffer
                     (const SendCommandRemoteServerRequest   *message,
                      ProtobufCBuffer     *buffer);
SendCommandRemoteServerRequest *
       send_command_remote_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   send_command_remote_server_request__free_unpacked
                     (SendCommandRemoteServerRequest *message,
                      ProtobufCAllocator *allocator);
/* SendCommandRemoteServerResponse methods */
void   send_command_remote_server_response__init
                     (SendCommandRemoteServerResponse         *message);
size_t send_command_remote_server_response__get_packed_size
                     (const SendCommandRemoteServerResponse   *message);
size_t send_command_remote_server_response__pack
                     (const SendCommandRemoteServerResponse   *message,
                      uint8_t             *out);
size_t send_command_remote_server_response__pack_to_buffer
                     (const SendCommandRemoteServerResponse   *message,
                      ProtobufCBuffer     *buffer);
SendCommandRemoteServerResponse *
       send_command_remote_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   send_command_remote_server_response__free_unpacked
                     (SendCommandRemoteServerResponse *message,
                      ProtobufCAllocator *allocator);
/* LearnCommandRemoteServerRequest methods */
void   learn_command_remote_server_request__init
                     (LearnCommandRemoteServerRequest         *message);
size_t learn_command_remote_server_request__get_packed_size
                     (const LearnCommandRemoteServerRequest   *message);
size_t learn_command_remote_server_request__pack
                     (const LearnCommandRemoteServerRequest   *message,
                      uint8_t             *out);
size_t learn_command_remote_server_request__pack_to_buffer
                     (const LearnCommandRemoteServerRequest   *message,
                      ProtobufCBuffer     *buffer);
LearnCommandRemoteServerRequest *
       learn_command_remote_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   learn_command_remote_server_request__free_unpacked
                     (LearnCommandRemoteServerRequest *message,
                      ProtobufCAllocator *allocator);
/* LearnCommandRemoteServerResponse methods */
void   learn_command_remote_server_response__init
                     (LearnCommandRemoteServerResponse         *message);
size_t learn_command_remote_server_response__get_packed_size
                     (const LearnCommandRemoteServerResponse   *message);
size_t learn_command_remote_server_response__pack
                     (const LearnCommandRemoteServerResponse   *message,
                      uint8_t             *out);
size_t learn_command_remote_server_response__pack_to_buffer
                     (const LearnCommandRemoteServerResponse   *message,
                      ProtobufCBuffer     *buffer);
LearnCommandRemoteServerResponse *
       learn_command_remote_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   learn_command_remote_server_response__free_unpacked
                     (LearnCommandRemoteServerResponse *message,
                      ProtobufCAllocator *allocator);
/* RestoreCommandRemoteServerRequest methods */
void   restore_command_remote_server_request__init
                     (RestoreCommandRemoteServerRequest         *message);
size_t restore_command_remote_server_request__get_packed_size
                     (const RestoreCommandRemoteServerRequest   *message);
size_t restore_command_remote_server_request__pack
                     (const RestoreCommandRemoteServerRequest   *message,
                      uint8_t             *out);
size_t restore_command_remote_server_request__pack_to_buffer
                     (const RestoreCommandRemoteServerRequest   *message,
                      ProtobufCBuffer     *buffer);
RestoreCommandRemoteServerRequest *
       restore_command_remote_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   restore_command_remote_server_request__free_unpacked
                     (RestoreCommandRemoteServerRequest *message,
                      ProtobufCAllocator *allocator);
/* RestoreCommandRemoteServerResponse methods */
void   restore_command_remote_server_response__init
                     (RestoreCommandRemoteServerResponse         *message);
size_t restore_command_remote_server_response__get_packed_size
                     (const RestoreCommandRemoteServerResponse   *message);
size_t restore_command_remote_server_response__pack
                     (const RestoreCommandRemoteServerResponse   *message,
                      uint8_t             *out);
size_t restore_command_remote_server_response__pack_to_buffer
                     (const RestoreCommandRemoteServerResponse   *message,
                      ProtobufCBuffer     *buffer);
RestoreCommandRemoteServerResponse *
       restore_command_remote_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   restore_command_remote_server_response__free_unpacked
                     (RestoreCommandRemoteServerResponse *message,
                      ProtobufCAllocator *allocator);
/* AddRemoteServerRequest methods */
void   add_remote_server_request__init
                     (AddRemoteServerRequest         *message);
size_t add_remote_server_request__get_packed_size
                     (const AddRemoteServerRequest   *message);
size_t add_remote_server_request__pack
                     (const AddRemoteServerRequest   *message,
                      uint8_t             *out);
size_t add_remote_server_request__pack_to_buffer
                     (const AddRemoteServerRequest   *message,
                      ProtobufCBuffer     *buffer);
AddRemoteServerRequest *
       add_remote_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   add_remote_server_request__free_unpacked
                     (AddRemoteServerRequest *message,
                      ProtobufCAllocator *allocator);
/* AddRemoteServerResponse methods */
void   add_remote_server_response__init
                     (AddRemoteServerResponse         *message);
size_t add_remote_server_response__get_packed_size
                     (const AddRemoteServerResponse   *message);
size_t add_remote_server_response__pack
                     (const AddRemoteServerResponse   *message,
                      uint8_t             *out);
size_t add_remote_server_response__pack_to_buffer
                     (const AddRemoteServerResponse   *message,
                      ProtobufCBuffer     *buffer);
AddRemoteServerResponse *
       add_remote_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   add_remote_server_response__free_unpacked
                     (AddRemoteServerResponse *message,
                      ProtobufCAllocator *allocator);
/* UpdateRemoteServerRequest methods */
void   update_remote_server_request__init
                     (UpdateRemoteServerRequest         *message);
size_t update_remote_server_request__get_packed_size
                     (const UpdateRemoteServerRequest   *message);
size_t update_remote_server_request__pack
                     (const UpdateRemoteServerRequest   *message,
                      uint8_t             *out);
size_t update_remote_server_request__pack_to_buffer
                     (const UpdateRemoteServerRequest   *message,
                      ProtobufCBuffer     *buffer);
UpdateRemoteServerRequest *
       update_remote_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   update_remote_server_request__free_unpacked
                     (UpdateRemoteServerRequest *message,
                      ProtobufCAllocator *allocator);
/* UpdateRemoteServerResponse methods */
void   update_remote_server_response__init
                     (UpdateRemoteServerResponse         *message);
size_t update_remote_server_response__get_packed_size
                     (const UpdateRemoteServerResponse   *message);
size_t update_remote_server_response__pack
                     (const UpdateRemoteServerResponse   *message,
                      uint8_t             *out);
size_t update_remote_server_response__pack_to_buffer
                     (const UpdateRemoteServerResponse   *message,
                      ProtobufCBuffer     *buffer);
UpdateRemoteServerResponse *
       update_remote_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   update_remote_server_response__free_unpacked
                     (UpdateRemoteServerResponse *message,
                      ProtobufCAllocator *allocator);
/* DeleteRemoteServerRequest methods */
void   delete_remote_server_request__init
                     (DeleteRemoteServerRequest         *message);
size_t delete_remote_server_request__get_packed_size
                     (const DeleteRemoteServerRequest   *message);
size_t delete_remote_server_request__pack
                     (const DeleteRemoteServerRequest   *message,
                      uint8_t             *out);
size_t delete_remote_server_request__pack_to_buffer
                     (const DeleteRemoteServerRequest   *message,
                      ProtobufCBuffer     *buffer);
DeleteRemoteServerRequest *
       delete_remote_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   delete_remote_server_request__free_unpacked
                     (DeleteRemoteServerRequest *message,
                      ProtobufCAllocator *allocator);
/* DeleteRemoteServerResponse methods */
void   delete_remote_server_response__init
                     (DeleteRemoteServerResponse         *message);
size_t delete_remote_server_response__get_packed_size
                     (const DeleteRemoteServerResponse   *message);
size_t delete_remote_server_response__pack
                     (const DeleteRemoteServerResponse   *message,
                      uint8_t             *out);
size_t delete_remote_server_response__pack_to_buffer
                     (const DeleteRemoteServerResponse   *message,
                      ProtobufCBuffer     *buffer);
DeleteRemoteServerResponse *
       delete_remote_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   delete_remote_server_response__free_unpacked
                     (DeleteRemoteServerResponse *message,
                      ProtobufCAllocator *allocator);
/* GetRemoteSchedulesServerRequest methods */
void   get_remote_schedules_server_request__init
                     (GetRemoteSchedulesServerRequest         *message);
size_t get_remote_schedules_server_request__get_packed_size
                     (const GetRemoteSchedulesServerRequest   *message);
size_t get_remote_schedules_server_request__pack
                     (const GetRemoteSchedulesServerRequest   *message,
                      uint8_t             *out);
size_t get_remote_schedules_server_request__pack_to_buffer
                     (const GetRemoteSchedulesServerRequest   *message,
                      ProtobufCBuffer     *buffer);
GetRemoteSchedulesServerRequest *
       get_remote_schedules_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_remote_schedules_server_request__free_unpacked
                     (GetRemoteSchedulesServerRequest *message,
                      ProtobufCAllocator *allocator);
/* GetRemoteSchedulesServerResponse methods */
void   get_remote_schedules_server_response__init
                     (GetRemoteSchedulesServerResponse         *message);
size_t get_remote_schedules_server_response__get_packed_size
                     (const GetRemoteSchedulesServerResponse   *message);
size_t get_remote_schedules_server_response__pack
                     (const GetRemoteSchedulesServerResponse   *message,
                      uint8_t             *out);
size_t get_remote_schedules_server_response__pack_to_buffer
                     (const GetRemoteSchedulesServerResponse   *message,
                      ProtobufCBuffer     *buffer);
GetRemoteSchedulesServerResponse *
       get_remote_schedules_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_remote_schedules_server_response__free_unpacked
                     (GetRemoteSchedulesServerResponse *message,
                      ProtobufCAllocator *allocator);
/* GetCountRemoteScheduleServerRequest methods */
void   get_count_remote_schedule_server_request__init
                     (GetCountRemoteScheduleServerRequest         *message);
size_t get_count_remote_schedule_server_request__get_packed_size
                     (const GetCountRemoteScheduleServerRequest   *message);
size_t get_count_remote_schedule_server_request__pack
                     (const GetCountRemoteScheduleServerRequest   *message,
                      uint8_t             *out);
size_t get_count_remote_schedule_server_request__pack_to_buffer
                     (const GetCountRemoteScheduleServerRequest   *message,
                      ProtobufCBuffer     *buffer);
GetCountRemoteScheduleServerRequest *
       get_count_remote_schedule_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_count_remote_schedule_server_request__free_unpacked
                     (GetCountRemoteScheduleServerRequest *message,
                      ProtobufCAllocator *allocator);
/* GetCountRemoteScheduleServerResponse methods */
void   get_count_remote_schedule_server_response__init
                     (GetCountRemoteScheduleServerResponse         *message);
size_t get_count_remote_schedule_server_response__get_packed_size
                     (const GetCountRemoteScheduleServerResponse   *message);
size_t get_count_remote_schedule_server_response__pack
                     (const GetCountRemoteScheduleServerResponse   *message,
                      uint8_t             *out);
size_t get_count_remote_schedule_server_response__pack_to_buffer
                     (const GetCountRemoteScheduleServerResponse   *message,
                      ProtobufCBuffer     *buffer);
GetCountRemoteScheduleServerResponse *
       get_count_remote_schedule_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_count_remote_schedule_server_response__free_unpacked
                     (GetCountRemoteScheduleServerResponse *message,
                      ProtobufCAllocator *allocator);
/* GetRemoteScheduleServerRequest methods */
void   get_remote_schedule_server_request__init
                     (GetRemoteScheduleServerRequest         *message);
size_t get_remote_schedule_server_request__get_packed_size
                     (const GetRemoteScheduleServerRequest   *message);
size_t get_remote_schedule_server_request__pack
                     (const GetRemoteScheduleServerRequest   *message,
                      uint8_t             *out);
size_t get_remote_schedule_server_request__pack_to_buffer
                     (const GetRemoteScheduleServerRequest   *message,
                      ProtobufCBuffer     *buffer);
GetRemoteScheduleServerRequest *
       get_remote_schedule_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_remote_schedule_server_request__free_unpacked
                     (GetRemoteScheduleServerRequest *message,
                      ProtobufCAllocator *allocator);
/* GetRemoteScheduleServerResponse methods */
void   get_remote_schedule_server_response__init
                     (GetRemoteScheduleServerResponse         *message);
size_t get_remote_schedule_server_response__get_packed_size
                     (const GetRemoteScheduleServerResponse   *message);
size_t get_remote_schedule_server_response__pack
                     (const GetRemoteScheduleServerResponse   *message,
                      uint8_t             *out);
size_t get_remote_schedule_server_response__pack_to_buffer
                     (const GetRemoteScheduleServerResponse   *message,
                      ProtobufCBuffer     *buffer);
GetRemoteScheduleServerResponse *
       get_remote_schedule_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_remote_schedule_server_response__free_unpacked
                     (GetRemoteScheduleServerResponse *message,
                      ProtobufCAllocator *allocator);
/* AddRemoteScheduleServerRequest methods */
void   add_remote_schedule_server_request__init
                     (AddRemoteScheduleServerRequest         *message);
size_t add_remote_schedule_server_request__get_packed_size
                     (const AddRemoteScheduleServerRequest   *message);
size_t add_remote_schedule_server_request__pack
                     (const AddRemoteScheduleServerRequest   *message,
                      uint8_t             *out);
size_t add_remote_schedule_server_request__pack_to_buffer
                     (const AddRemoteScheduleServerRequest   *message,
                      ProtobufCBuffer     *buffer);
AddRemoteScheduleServerRequest *
       add_remote_schedule_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   add_remote_schedule_server_request__free_unpacked
                     (AddRemoteScheduleServerRequest *message,
                      ProtobufCAllocator *allocator);
/* AddRemoteScheduleServerResponse methods */
void   add_remote_schedule_server_response__init
                     (AddRemoteScheduleServerResponse         *message);
size_t add_remote_schedule_server_response__get_packed_size
                     (const AddRemoteScheduleServerResponse   *message);
size_t add_remote_schedule_server_response__pack
                     (const AddRemoteScheduleServerResponse   *message,
                      uint8_t             *out);
size_t add_remote_schedule_server_response__pack_to_buffer
                     (const AddRemoteScheduleServerResponse   *message,
                      ProtobufCBuffer     *buffer);
AddRemoteScheduleServerResponse *
       add_remote_schedule_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   add_remote_schedule_server_response__free_unpacked
                     (AddRemoteScheduleServerResponse *message,
                      ProtobufCAllocator *allocator);
/* UpdateRemoteScheduleServerRequest methods */
void   update_remote_schedule_server_request__init
                     (UpdateRemoteScheduleServerRequest         *message);
size_t update_remote_schedule_server_request__get_packed_size
                     (const UpdateRemoteScheduleServerRequest   *message);
size_t update_remote_schedule_server_request__pack
                     (const UpdateRemoteScheduleServerRequest   *message,
                      uint8_t             *out);
size_t update_remote_schedule_server_request__pack_to_buffer
                     (const UpdateRemoteScheduleServerRequest   *message,
                      ProtobufCBuffer     *buffer);
UpdateRemoteScheduleServerRequest *
       update_remote_schedule_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   update_remote_schedule_server_request__free_unpacked
                     (UpdateRemoteScheduleServerRequest *message,
                      ProtobufCAllocator *allocator);
/* UpdateRemoteScheduleServerResponse methods */
void   update_remote_schedule_server_response__init
                     (UpdateRemoteScheduleServerResponse         *message);
size_t update_remote_schedule_server_response__get_packed_size
                     (const UpdateRemoteScheduleServerResponse   *message);
size_t update_remote_schedule_server_response__pack
                     (const UpdateRemoteScheduleServerResponse   *message,
                      uint8_t             *out);
size_t update_remote_schedule_server_response__pack_to_buffer
                     (const UpdateRemoteScheduleServerResponse   *message,
                      ProtobufCBuffer     *buffer);
UpdateRemoteScheduleServerResponse *
       update_remote_schedule_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   update_remote_schedule_server_response__free_unpacked
                     (UpdateRemoteScheduleServerResponse *message,
                      ProtobufCAllocator *allocator);
/* DeleteRemoteScheduleServerRequest methods */
void   delete_remote_schedule_server_request__init
                     (DeleteRemoteScheduleServerRequest         *message);
size_t delete_remote_schedule_server_request__get_packed_size
                     (const DeleteRemoteScheduleServerRequest   *message);
size_t delete_remote_schedule_server_request__pack
                     (const DeleteRemoteScheduleServerRequest   *message,
                      uint8_t             *out);
size_t delete_remote_schedule_server_request__pack_to_buffer
                     (const DeleteRemoteScheduleServerRequest   *message,
                      ProtobufCBuffer     *buffer);
DeleteRemoteScheduleServerRequest *
       delete_remote_schedule_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   delete_remote_schedule_server_request__free_unpacked
                     (DeleteRemoteScheduleServerRequest *message,
                      ProtobufCAllocator *allocator);
/* DeleteRemoteScheduleServerResponse methods */
void   delete_remote_schedule_server_response__init
                     (DeleteRemoteScheduleServerResponse         *message);
size_t delete_remote_schedule_server_response__get_packed_size
                     (const DeleteRemoteScheduleServerResponse   *message);
size_t delete_remote_schedule_server_response__pack
                     (const DeleteRemoteScheduleServerResponse   *message,
                      uint8_t             *out);
size_t delete_remote_schedule_server_response__pack_to_buffer
                     (const DeleteRemoteScheduleServerResponse   *message,
                      ProtobufCBuffer     *buffer);
DeleteRemoteScheduleServerResponse *
       delete_remote_schedule_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   delete_remote_schedule_server_response__free_unpacked
                     (DeleteRemoteScheduleServerResponse *message,
                      ProtobufCAllocator *allocator);
/* SetActiveRemoteScheduleServerRequest methods */
void   set_active_remote_schedule_server_request__init
                     (SetActiveRemoteScheduleServerRequest         *message);
size_t set_active_remote_schedule_server_request__get_packed_size
                     (const SetActiveRemoteScheduleServerRequest   *message);
size_t set_active_remote_schedule_server_request__pack
                     (const SetActiveRemoteScheduleServerRequest   *message,
                      uint8_t             *out);
size_t set_active_remote_schedule_server_request__pack_to_buffer
                     (const SetActiveRemoteScheduleServerRequest   *message,
                      ProtobufCBuffer     *buffer);
SetActiveRemoteScheduleServerRequest *
       set_active_remote_schedule_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   set_active_remote_schedule_server_request__free_unpacked
                     (SetActiveRemoteScheduleServerRequest *message,
                      ProtobufCAllocator *allocator);
/* SetActiveRemoteScheduleServerResponse methods */
void   set_active_remote_schedule_server_response__init
                     (SetActiveRemoteScheduleServerResponse         *message);
size_t set_active_remote_schedule_server_response__get_packed_size
                     (const SetActiveRemoteScheduleServerResponse   *message);
size_t set_active_remote_schedule_server_response__pack
                     (const SetActiveRemoteScheduleServerResponse   *message,
                      uint8_t             *out);
size_t set_active_remote_schedule_server_response__pack_to_buffer
                     (const SetActiveRemoteScheduleServerResponse   *message,
                      ProtobufCBuffer     *buffer);
SetActiveRemoteScheduleServerResponse *
       set_active_remote_schedule_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   set_active_remote_schedule_server_response__free_unpacked
                     (SetActiveRemoteScheduleServerResponse *message,
                      ProtobufCAllocator *allocator);
/* GetRemoteMultisServerRequest methods */
void   get_remote_multis_server_request__init
                     (GetRemoteMultisServerRequest         *message);
size_t get_remote_multis_server_request__get_packed_size
                     (const GetRemoteMultisServerRequest   *message);
size_t get_remote_multis_server_request__pack
                     (const GetRemoteMultisServerRequest   *message,
                      uint8_t             *out);
size_t get_remote_multis_server_request__pack_to_buffer
                     (const GetRemoteMultisServerRequest   *message,
                      ProtobufCBuffer     *buffer);
GetRemoteMultisServerRequest *
       get_remote_multis_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_remote_multis_server_request__free_unpacked
                     (GetRemoteMultisServerRequest *message,
                      ProtobufCAllocator *allocator);
/* GetRemoteMultisServerResponse methods */
void   get_remote_multis_server_response__init
                     (GetRemoteMultisServerResponse         *message);
size_t get_remote_multis_server_response__get_packed_size
                     (const GetRemoteMultisServerResponse   *message);
size_t get_remote_multis_server_response__pack
                     (const GetRemoteMultisServerResponse   *message,
                      uint8_t             *out);
size_t get_remote_multis_server_response__pack_to_buffer
                     (const GetRemoteMultisServerResponse   *message,
                      ProtobufCBuffer     *buffer);
GetRemoteMultisServerResponse *
       get_remote_multis_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_remote_multis_server_response__free_unpacked
                     (GetRemoteMultisServerResponse *message,
                      ProtobufCAllocator *allocator);
/* AddRemoteMultiServerRequest methods */
void   add_remote_multi_server_request__init
                     (AddRemoteMultiServerRequest         *message);
size_t add_remote_multi_server_request__get_packed_size
                     (const AddRemoteMultiServerRequest   *message);
size_t add_remote_multi_server_request__pack
                     (const AddRemoteMultiServerRequest   *message,
                      uint8_t             *out);
size_t add_remote_multi_server_request__pack_to_buffer
                     (const AddRemoteMultiServerRequest   *message,
                      ProtobufCBuffer     *buffer);
AddRemoteMultiServerRequest *
       add_remote_multi_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   add_remote_multi_server_request__free_unpacked
                     (AddRemoteMultiServerRequest *message,
                      ProtobufCAllocator *allocator);
/* AddRemoteMultiServerResponse methods */
void   add_remote_multi_server_response__init
                     (AddRemoteMultiServerResponse         *message);
size_t add_remote_multi_server_response__get_packed_size
                     (const AddRemoteMultiServerResponse   *message);
size_t add_remote_multi_server_response__pack
                     (const AddRemoteMultiServerResponse   *message,
                      uint8_t             *out);
size_t add_remote_multi_server_response__pack_to_buffer
                     (const AddRemoteMultiServerResponse   *message,
                      ProtobufCBuffer     *buffer);
AddRemoteMultiServerResponse *
       add_remote_multi_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   add_remote_multi_server_response__free_unpacked
                     (AddRemoteMultiServerResponse *message,
                      ProtobufCAllocator *allocator);
/* DeleteRemoteMultiServerRequest methods */
void   delete_remote_multi_server_request__init
                     (DeleteRemoteMultiServerRequest         *message);
size_t delete_remote_multi_server_request__get_packed_size
                     (const DeleteRemoteMultiServerRequest   *message);
size_t delete_remote_multi_server_request__pack
                     (const DeleteRemoteMultiServerRequest   *message,
                      uint8_t             *out);
size_t delete_remote_multi_server_request__pack_to_buffer
                     (const DeleteRemoteMultiServerRequest   *message,
                      ProtobufCBuffer     *buffer);
DeleteRemoteMultiServerRequest *
       delete_remote_multi_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   delete_remote_multi_server_request__free_unpacked
                     (DeleteRemoteMultiServerRequest *message,
                      ProtobufCAllocator *allocator);
/* DeleteRemoteMultiServerResponse methods */
void   delete_remote_multi_server_response__init
                     (DeleteRemoteMultiServerResponse         *message);
size_t delete_remote_multi_server_response__get_packed_size
                     (const DeleteRemoteMultiServerResponse   *message);
size_t delete_remote_multi_server_response__pack
                     (const DeleteRemoteMultiServerResponse   *message,
                      uint8_t             *out);
size_t delete_remote_multi_server_response__pack_to_buffer
                     (const DeleteRemoteMultiServerResponse   *message,
                      ProtobufCBuffer     *buffer);
DeleteRemoteMultiServerResponse *
       delete_remote_multi_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   delete_remote_multi_server_response__free_unpacked
                     (DeleteRemoteMultiServerResponse *message,
                      ProtobufCAllocator *allocator);
/* AddRemoteMultiLibraryCmdServerRequest methods */
void   add_remote_multi_library_cmd_server_request__init
                     (AddRemoteMultiLibraryCmdServerRequest         *message);
size_t add_remote_multi_library_cmd_server_request__get_packed_size
                     (const AddRemoteMultiLibraryCmdServerRequest   *message);
size_t add_remote_multi_library_cmd_server_request__pack
                     (const AddRemoteMultiLibraryCmdServerRequest   *message,
                      uint8_t             *out);
size_t add_remote_multi_library_cmd_server_request__pack_to_buffer
                     (const AddRemoteMultiLibraryCmdServerRequest   *message,
                      ProtobufCBuffer     *buffer);
AddRemoteMultiLibraryCmdServerRequest *
       add_remote_multi_library_cmd_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   add_remote_multi_library_cmd_server_request__free_unpacked
                     (AddRemoteMultiLibraryCmdServerRequest *message,
                      ProtobufCAllocator *allocator);
/* AddRemoteMultiLibraryCmdServerResponse methods */
void   add_remote_multi_library_cmd_server_response__init
                     (AddRemoteMultiLibraryCmdServerResponse         *message);
size_t add_remote_multi_library_cmd_server_response__get_packed_size
                     (const AddRemoteMultiLibraryCmdServerResponse   *message);
size_t add_remote_multi_library_cmd_server_response__pack
                     (const AddRemoteMultiLibraryCmdServerResponse   *message,
                      uint8_t             *out);
size_t add_remote_multi_library_cmd_server_response__pack_to_buffer
                     (const AddRemoteMultiLibraryCmdServerResponse   *message,
                      ProtobufCBuffer     *buffer);
AddRemoteMultiLibraryCmdServerResponse *
       add_remote_multi_library_cmd_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   add_remote_multi_library_cmd_server_response__free_unpacked
                     (AddRemoteMultiLibraryCmdServerResponse *message,
                      ProtobufCAllocator *allocator);
/* DeleteRemoteMultiLibraryCmdServerRequest methods */
void   delete_remote_multi_library_cmd_server_request__init
                     (DeleteRemoteMultiLibraryCmdServerRequest         *message);
size_t delete_remote_multi_library_cmd_server_request__get_packed_size
                     (const DeleteRemoteMultiLibraryCmdServerRequest   *message);
size_t delete_remote_multi_library_cmd_server_request__pack
                     (const DeleteRemoteMultiLibraryCmdServerRequest   *message,
                      uint8_t             *out);
size_t delete_remote_multi_library_cmd_server_request__pack_to_buffer
                     (const DeleteRemoteMultiLibraryCmdServerRequest   *message,
                      ProtobufCBuffer     *buffer);
DeleteRemoteMultiLibraryCmdServerRequest *
       delete_remote_multi_library_cmd_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   delete_remote_multi_library_cmd_server_request__free_unpacked
                     (DeleteRemoteMultiLibraryCmdServerRequest *message,
                      ProtobufCAllocator *allocator);
/* DeleteRemoteMultiLibraryCmdServerResponse methods */
void   delete_remote_multi_library_cmd_server_response__init
                     (DeleteRemoteMultiLibraryCmdServerResponse         *message);
size_t delete_remote_multi_library_cmd_server_response__get_packed_size
                     (const DeleteRemoteMultiLibraryCmdServerResponse   *message);
size_t delete_remote_multi_library_cmd_server_response__pack
                     (const DeleteRemoteMultiLibraryCmdServerResponse   *message,
                      uint8_t             *out);
size_t delete_remote_multi_library_cmd_server_response__pack_to_buffer
                     (const DeleteRemoteMultiLibraryCmdServerResponse   *message,
                      ProtobufCBuffer     *buffer);
DeleteRemoteMultiLibraryCmdServerResponse *
       delete_remote_multi_library_cmd_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   delete_remote_multi_library_cmd_server_response__free_unpacked
                     (DeleteRemoteMultiLibraryCmdServerResponse *message,
                      ProtobufCAllocator *allocator);
/* UpdateRemoteMultiLibraryCmdServerRequest methods */
void   update_remote_multi_library_cmd_server_request__init
                     (UpdateRemoteMultiLibraryCmdServerRequest         *message);
size_t update_remote_multi_library_cmd_server_request__get_packed_size
                     (const UpdateRemoteMultiLibraryCmdServerRequest   *message);
size_t update_remote_multi_library_cmd_server_request__pack
                     (const UpdateRemoteMultiLibraryCmdServerRequest   *message,
                      uint8_t             *out);
size_t update_remote_multi_library_cmd_server_request__pack_to_buffer
                     (const UpdateRemoteMultiLibraryCmdServerRequest   *message,
                      ProtobufCBuffer     *buffer);
UpdateRemoteMultiLibraryCmdServerRequest *
       update_remote_multi_library_cmd_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   update_remote_multi_library_cmd_server_request__free_unpacked
                     (UpdateRemoteMultiLibraryCmdServerRequest *message,
                      ProtobufCAllocator *allocator);
/* UpdateRemoteMultiLibraryCmdServerResponse methods */
void   update_remote_multi_library_cmd_server_response__init
                     (UpdateRemoteMultiLibraryCmdServerResponse         *message);
size_t update_remote_multi_library_cmd_server_response__get_packed_size
                     (const UpdateRemoteMultiLibraryCmdServerResponse   *message);
size_t update_remote_multi_library_cmd_server_response__pack
                     (const UpdateRemoteMultiLibraryCmdServerResponse   *message,
                      uint8_t             *out);
size_t update_remote_multi_library_cmd_server_response__pack_to_buffer
                     (const UpdateRemoteMultiLibraryCmdServerResponse   *message,
                      ProtobufCBuffer     *buffer);
UpdateRemoteMultiLibraryCmdServerResponse *
       update_remote_multi_library_cmd_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   update_remote_multi_library_cmd_server_response__free_unpacked
                     (UpdateRemoteMultiLibraryCmdServerResponse *message,
                      ProtobufCAllocator *allocator);
/* UpdateGroupRemoteMultiLibraryCmdServerRequest methods */
void   update_group_remote_multi_library_cmd_server_request__init
                     (UpdateGroupRemoteMultiLibraryCmdServerRequest         *message);
size_t update_group_remote_multi_library_cmd_server_request__get_packed_size
                     (const UpdateGroupRemoteMultiLibraryCmdServerRequest   *message);
size_t update_group_remote_multi_library_cmd_server_request__pack
                     (const UpdateGroupRemoteMultiLibraryCmdServerRequest   *message,
                      uint8_t             *out);
size_t update_group_remote_multi_library_cmd_server_request__pack_to_buffer
                     (const UpdateGroupRemoteMultiLibraryCmdServerRequest   *message,
                      ProtobufCBuffer     *buffer);
UpdateGroupRemoteMultiLibraryCmdServerRequest *
       update_group_remote_multi_library_cmd_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   update_group_remote_multi_library_cmd_server_request__free_unpacked
                     (UpdateGroupRemoteMultiLibraryCmdServerRequest *message,
                      ProtobufCAllocator *allocator);
/* UpdateGroupRemoteMultiLibraryCmdServerResponse methods */
void   update_group_remote_multi_library_cmd_server_response__init
                     (UpdateGroupRemoteMultiLibraryCmdServerResponse         *message);
size_t update_group_remote_multi_library_cmd_server_response__get_packed_size
                     (const UpdateGroupRemoteMultiLibraryCmdServerResponse   *message);
size_t update_group_remote_multi_library_cmd_server_response__pack
                     (const UpdateGroupRemoteMultiLibraryCmdServerResponse   *message,
                      uint8_t             *out);
size_t update_group_remote_multi_library_cmd_server_response__pack_to_buffer
                     (const UpdateGroupRemoteMultiLibraryCmdServerResponse   *message,
                      ProtobufCBuffer     *buffer);
UpdateGroupRemoteMultiLibraryCmdServerResponse *
       update_group_remote_multi_library_cmd_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   update_group_remote_multi_library_cmd_server_response__free_unpacked
                     (UpdateGroupRemoteMultiLibraryCmdServerResponse *message,
                      ProtobufCAllocator *allocator);
/* ChangeRemoteBrandRemoteRequest methods */
void   change_remote_brand_remote_request__init
                     (ChangeRemoteBrandRemoteRequest         *message);
size_t change_remote_brand_remote_request__get_packed_size
                     (const ChangeRemoteBrandRemoteRequest   *message);
size_t change_remote_brand_remote_request__pack
                     (const ChangeRemoteBrandRemoteRequest   *message,
                      uint8_t             *out);
size_t change_remote_brand_remote_request__pack_to_buffer
                     (const ChangeRemoteBrandRemoteRequest   *message,
                      ProtobufCBuffer     *buffer);
ChangeRemoteBrandRemoteRequest *
       change_remote_brand_remote_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   change_remote_brand_remote_request__free_unpacked
                     (ChangeRemoteBrandRemoteRequest *message,
                      ProtobufCAllocator *allocator);
/* ChangeRemoteBrandRemoteResponse methods */
void   change_remote_brand_remote_response__init
                     (ChangeRemoteBrandRemoteResponse         *message);
size_t change_remote_brand_remote_response__get_packed_size
                     (const ChangeRemoteBrandRemoteResponse   *message);
size_t change_remote_brand_remote_response__pack
                     (const ChangeRemoteBrandRemoteResponse   *message,
                      uint8_t             *out);
size_t change_remote_brand_remote_response__pack_to_buffer
                     (const ChangeRemoteBrandRemoteResponse   *message,
                      ProtobufCBuffer     *buffer);
ChangeRemoteBrandRemoteResponse *
       change_remote_brand_remote_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   change_remote_brand_remote_response__free_unpacked
                     (ChangeRemoteBrandRemoteResponse *message,
                      ProtobufCAllocator *allocator);
/* ControlRemoteACCommandRequest methods */
void   control_remote_accommand_request__init
                     (ControlRemoteACCommandRequest         *message);
size_t control_remote_accommand_request__get_packed_size
                     (const ControlRemoteACCommandRequest   *message);
size_t control_remote_accommand_request__pack
                     (const ControlRemoteACCommandRequest   *message,
                      uint8_t             *out);
size_t control_remote_accommand_request__pack_to_buffer
                     (const ControlRemoteACCommandRequest   *message,
                      ProtobufCBuffer     *buffer);
ControlRemoteACCommandRequest *
       control_remote_accommand_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   control_remote_accommand_request__free_unpacked
                     (ControlRemoteACCommandRequest *message,
                      ProtobufCAllocator *allocator);
/* ControlRemoteACCommandResponse methods */
void   control_remote_accommand_response__init
                     (ControlRemoteACCommandResponse         *message);
size_t control_remote_accommand_response__get_packed_size
                     (const ControlRemoteACCommandResponse   *message);
size_t control_remote_accommand_response__pack
                     (const ControlRemoteACCommandResponse   *message,
                      uint8_t             *out);
size_t control_remote_accommand_response__pack_to_buffer
                     (const ControlRemoteACCommandResponse   *message,
                      ProtobufCBuffer     *buffer);
ControlRemoteACCommandResponse *
       control_remote_accommand_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   control_remote_accommand_response__free_unpacked
                     (ControlRemoteACCommandResponse *message,
                      ProtobufCAllocator *allocator);
/* GetScenesServerRequest methods */
void   get_scenes_server_request__init
                     (GetScenesServerRequest         *message);
size_t get_scenes_server_request__get_packed_size
                     (const GetScenesServerRequest   *message);
size_t get_scenes_server_request__pack
                     (const GetScenesServerRequest   *message,
                      uint8_t             *out);
size_t get_scenes_server_request__pack_to_buffer
                     (const GetScenesServerRequest   *message,
                      ProtobufCBuffer     *buffer);
GetScenesServerRequest *
       get_scenes_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_scenes_server_request__free_unpacked
                     (GetScenesServerRequest *message,
                      ProtobufCAllocator *allocator);
/* GetScenesServerResponse methods */
void   get_scenes_server_response__init
                     (GetScenesServerResponse         *message);
size_t get_scenes_server_response__get_packed_size
                     (const GetScenesServerResponse   *message);
size_t get_scenes_server_response__pack
                     (const GetScenesServerResponse   *message,
                      uint8_t             *out);
size_t get_scenes_server_response__pack_to_buffer
                     (const GetScenesServerResponse   *message,
                      ProtobufCBuffer     *buffer);
GetScenesServerResponse *
       get_scenes_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_scenes_server_response__free_unpacked
                     (GetScenesServerResponse *message,
                      ProtobufCAllocator *allocator);
/* GetSceneServerRequest methods */
void   get_scene_server_request__init
                     (GetSceneServerRequest         *message);
size_t get_scene_server_request__get_packed_size
                     (const GetSceneServerRequest   *message);
size_t get_scene_server_request__pack
                     (const GetSceneServerRequest   *message,
                      uint8_t             *out);
size_t get_scene_server_request__pack_to_buffer
                     (const GetSceneServerRequest   *message,
                      ProtobufCBuffer     *buffer);
GetSceneServerRequest *
       get_scene_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_scene_server_request__free_unpacked
                     (GetSceneServerRequest *message,
                      ProtobufCAllocator *allocator);
/* GetSceneServerResponse methods */
void   get_scene_server_response__init
                     (GetSceneServerResponse         *message);
size_t get_scene_server_response__get_packed_size
                     (const GetSceneServerResponse   *message);
size_t get_scene_server_response__pack
                     (const GetSceneServerResponse   *message,
                      uint8_t             *out);
size_t get_scene_server_response__pack_to_buffer
                     (const GetSceneServerResponse   *message,
                      ProtobufCBuffer     *buffer);
GetSceneServerResponse *
       get_scene_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_scene_server_response__free_unpacked
                     (GetSceneServerResponse *message,
                      ProtobufCAllocator *allocator);
/* AddSceneServerRequest methods */
void   add_scene_server_request__init
                     (AddSceneServerRequest         *message);
size_t add_scene_server_request__get_packed_size
                     (const AddSceneServerRequest   *message);
size_t add_scene_server_request__pack
                     (const AddSceneServerRequest   *message,
                      uint8_t             *out);
size_t add_scene_server_request__pack_to_buffer
                     (const AddSceneServerRequest   *message,
                      ProtobufCBuffer     *buffer);
AddSceneServerRequest *
       add_scene_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   add_scene_server_request__free_unpacked
                     (AddSceneServerRequest *message,
                      ProtobufCAllocator *allocator);
/* AddSceneServerResponse methods */
void   add_scene_server_response__init
                     (AddSceneServerResponse         *message);
size_t add_scene_server_response__get_packed_size
                     (const AddSceneServerResponse   *message);
size_t add_scene_server_response__pack
                     (const AddSceneServerResponse   *message,
                      uint8_t             *out);
size_t add_scene_server_response__pack_to_buffer
                     (const AddSceneServerResponse   *message,
                      ProtobufCBuffer     *buffer);
AddSceneServerResponse *
       add_scene_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   add_scene_server_response__free_unpacked
                     (AddSceneServerResponse *message,
                      ProtobufCAllocator *allocator);
/* UpdateSceneServerRequest methods */
void   update_scene_server_request__init
                     (UpdateSceneServerRequest         *message);
size_t update_scene_server_request__get_packed_size
                     (const UpdateSceneServerRequest   *message);
size_t update_scene_server_request__pack
                     (const UpdateSceneServerRequest   *message,
                      uint8_t             *out);
size_t update_scene_server_request__pack_to_buffer
                     (const UpdateSceneServerRequest   *message,
                      ProtobufCBuffer     *buffer);
UpdateSceneServerRequest *
       update_scene_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   update_scene_server_request__free_unpacked
                     (UpdateSceneServerRequest *message,
                      ProtobufCAllocator *allocator);
/* UpdateSceneServerResponse methods */
void   update_scene_server_response__init
                     (UpdateSceneServerResponse         *message);
size_t update_scene_server_response__get_packed_size
                     (const UpdateSceneServerResponse   *message);
size_t update_scene_server_response__pack
                     (const UpdateSceneServerResponse   *message,
                      uint8_t             *out);
size_t update_scene_server_response__pack_to_buffer
                     (const UpdateSceneServerResponse   *message,
                      ProtobufCBuffer     *buffer);
UpdateSceneServerResponse *
       update_scene_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   update_scene_server_response__free_unpacked
                     (UpdateSceneServerResponse *message,
                      ProtobufCAllocator *allocator);
/* DeleteSceneServerRequest methods */
void   delete_scene_server_request__init
                     (DeleteSceneServerRequest         *message);
size_t delete_scene_server_request__get_packed_size
                     (const DeleteSceneServerRequest   *message);
size_t delete_scene_server_request__pack
                     (const DeleteSceneServerRequest   *message,
                      uint8_t             *out);
size_t delete_scene_server_request__pack_to_buffer
                     (const DeleteSceneServerRequest   *message,
                      ProtobufCBuffer     *buffer);
DeleteSceneServerRequest *
       delete_scene_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   delete_scene_server_request__free_unpacked
                     (DeleteSceneServerRequest *message,
                      ProtobufCAllocator *allocator);
/* DeleteSceneServerResponse methods */
void   delete_scene_server_response__init
                     (DeleteSceneServerResponse         *message);
size_t delete_scene_server_response__get_packed_size
                     (const DeleteSceneServerResponse   *message);
size_t delete_scene_server_response__pack
                     (const DeleteSceneServerResponse   *message,
                      uint8_t             *out);
size_t delete_scene_server_response__pack_to_buffer
                     (const DeleteSceneServerResponse   *message,
                      ProtobufCBuffer     *buffer);
DeleteSceneServerResponse *
       delete_scene_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   delete_scene_server_response__free_unpacked
                     (DeleteSceneServerResponse *message,
                      ProtobufCAllocator *allocator);
/* DeleteSwitcherConditionServerRequest methods */
void   delete_switcher_condition_server_request__init
                     (DeleteSwitcherConditionServerRequest         *message);
size_t delete_switcher_condition_server_request__get_packed_size
                     (const DeleteSwitcherConditionServerRequest   *message);
size_t delete_switcher_condition_server_request__pack
                     (const DeleteSwitcherConditionServerRequest   *message,
                      uint8_t             *out);
size_t delete_switcher_condition_server_request__pack_to_buffer
                     (const DeleteSwitcherConditionServerRequest   *message,
                      ProtobufCBuffer     *buffer);
DeleteSwitcherConditionServerRequest *
       delete_switcher_condition_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   delete_switcher_condition_server_request__free_unpacked
                     (DeleteSwitcherConditionServerRequest *message,
                      ProtobufCAllocator *allocator);
/* DeleteSwitcherConditionServerResponse methods */
void   delete_switcher_condition_server_response__init
                     (DeleteSwitcherConditionServerResponse         *message);
size_t delete_switcher_condition_server_response__get_packed_size
                     (const DeleteSwitcherConditionServerResponse   *message);
size_t delete_switcher_condition_server_response__pack
                     (const DeleteSwitcherConditionServerResponse   *message,
                      uint8_t             *out);
size_t delete_switcher_condition_server_response__pack_to_buffer
                     (const DeleteSwitcherConditionServerResponse   *message,
                      ProtobufCBuffer     *buffer);
DeleteSwitcherConditionServerResponse *
       delete_switcher_condition_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   delete_switcher_condition_server_response__free_unpacked
                     (DeleteSwitcherConditionServerResponse *message,
                      ProtobufCAllocator *allocator);
/* DeleteSceneActionServerRequest methods */
void   delete_scene_action_server_request__init
                     (DeleteSceneActionServerRequest         *message);
size_t delete_scene_action_server_request__get_packed_size
                     (const DeleteSceneActionServerRequest   *message);
size_t delete_scene_action_server_request__pack
                     (const DeleteSceneActionServerRequest   *message,
                      uint8_t             *out);
size_t delete_scene_action_server_request__pack_to_buffer
                     (const DeleteSceneActionServerRequest   *message,
                      ProtobufCBuffer     *buffer);
DeleteSceneActionServerRequest *
       delete_scene_action_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   delete_scene_action_server_request__free_unpacked
                     (DeleteSceneActionServerRequest *message,
                      ProtobufCAllocator *allocator);
/* DeleteSceneActionServerResponse methods */
void   delete_scene_action_server_response__init
                     (DeleteSceneActionServerResponse         *message);
size_t delete_scene_action_server_response__get_packed_size
                     (const DeleteSceneActionServerResponse   *message);
size_t delete_scene_action_server_response__pack
                     (const DeleteSceneActionServerResponse   *message,
                      uint8_t             *out);
size_t delete_scene_action_server_response__pack_to_buffer
                     (const DeleteSceneActionServerResponse   *message,
                      ProtobufCBuffer     *buffer);
DeleteSceneActionServerResponse *
       delete_scene_action_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   delete_scene_action_server_response__free_unpacked
                     (DeleteSceneActionServerResponse *message,
                      ProtobufCAllocator *allocator);
/* RunSceneServerRequest methods */
void   run_scene_server_request__init
                     (RunSceneServerRequest         *message);
size_t run_scene_server_request__get_packed_size
                     (const RunSceneServerRequest   *message);
size_t run_scene_server_request__pack
                     (const RunSceneServerRequest   *message,
                      uint8_t             *out);
size_t run_scene_server_request__pack_to_buffer
                     (const RunSceneServerRequest   *message,
                      ProtobufCBuffer     *buffer);
RunSceneServerRequest *
       run_scene_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   run_scene_server_request__free_unpacked
                     (RunSceneServerRequest *message,
                      ProtobufCAllocator *allocator);
/* RunSceneServerResponse methods */
void   run_scene_server_response__init
                     (RunSceneServerResponse         *message);
size_t run_scene_server_response__get_packed_size
                     (const RunSceneServerResponse   *message);
size_t run_scene_server_response__pack
                     (const RunSceneServerResponse   *message,
                      uint8_t             *out);
size_t run_scene_server_response__pack_to_buffer
                     (const RunSceneServerResponse   *message,
                      ProtobufCBuffer     *buffer);
RunSceneServerResponse *
       run_scene_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   run_scene_server_response__free_unpacked
                     (RunSceneServerResponse *message,
                      ProtobufCAllocator *allocator);
/* SceneServerRequest methods */
void   scene_server_request__init
                     (SceneServerRequest         *message);
size_t scene_server_request__get_packed_size
                     (const SceneServerRequest   *message);
size_t scene_server_request__pack
                     (const SceneServerRequest   *message,
                      uint8_t             *out);
size_t scene_server_request__pack_to_buffer
                     (const SceneServerRequest   *message,
                      ProtobufCBuffer     *buffer);
SceneServerRequest *
       scene_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   scene_server_request__free_unpacked
                     (SceneServerRequest *message,
                      ProtobufCAllocator *allocator);
/* SceneServerResponse methods */
void   scene_server_response__init
                     (SceneServerResponse         *message);
size_t scene_server_response__get_packed_size
                     (const SceneServerResponse   *message);
size_t scene_server_response__pack
                     (const SceneServerResponse   *message,
                      uint8_t             *out);
size_t scene_server_response__pack_to_buffer
                     (const SceneServerResponse   *message,
                      ProtobufCBuffer     *buffer);
SceneServerResponse *
       scene_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   scene_server_response__free_unpacked
                     (SceneServerResponse *message,
                      ProtobufCAllocator *allocator);
/* SceneRetryConfirmServerRequest methods */
void   scene_retry_confirm_server_request__init
                     (SceneRetryConfirmServerRequest         *message);
size_t scene_retry_confirm_server_request__get_packed_size
                     (const SceneRetryConfirmServerRequest   *message);
size_t scene_retry_confirm_server_request__pack
                     (const SceneRetryConfirmServerRequest   *message,
                      uint8_t             *out);
size_t scene_retry_confirm_server_request__pack_to_buffer
                     (const SceneRetryConfirmServerRequest   *message,
                      ProtobufCBuffer     *buffer);
SceneRetryConfirmServerRequest *
       scene_retry_confirm_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   scene_retry_confirm_server_request__free_unpacked
                     (SceneRetryConfirmServerRequest *message,
                      ProtobufCAllocator *allocator);
/* SceneRetryConfirmServerResponse methods */
void   scene_retry_confirm_server_response__init
                     (SceneRetryConfirmServerResponse         *message);
size_t scene_retry_confirm_server_response__get_packed_size
                     (const SceneRetryConfirmServerResponse   *message);
size_t scene_retry_confirm_server_response__pack
                     (const SceneRetryConfirmServerResponse   *message,
                      uint8_t             *out);
size_t scene_retry_confirm_server_response__pack_to_buffer
                     (const SceneRetryConfirmServerResponse   *message,
                      ProtobufCBuffer     *buffer);
SceneRetryConfirmServerResponse *
       scene_retry_confirm_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   scene_retry_confirm_server_response__free_unpacked
                     (SceneRetryConfirmServerResponse *message,
                      ProtobufCAllocator *allocator);
/* SetSceneStatusServerRequest methods */
void   set_scene_status_server_request__init
                     (SetSceneStatusServerRequest         *message);
size_t set_scene_status_server_request__get_packed_size
                     (const SetSceneStatusServerRequest   *message);
size_t set_scene_status_server_request__pack
                     (const SetSceneStatusServerRequest   *message,
                      uint8_t             *out);
size_t set_scene_status_server_request__pack_to_buffer
                     (const SetSceneStatusServerRequest   *message,
                      ProtobufCBuffer     *buffer);
SetSceneStatusServerRequest *
       set_scene_status_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   set_scene_status_server_request__free_unpacked
                     (SetSceneStatusServerRequest *message,
                      ProtobufCAllocator *allocator);
/* SetSceneStatusServerResponse methods */
void   set_scene_status_server_response__init
                     (SetSceneStatusServerResponse         *message);
size_t set_scene_status_server_response__get_packed_size
                     (const SetSceneStatusServerResponse   *message);
size_t set_scene_status_server_response__pack
                     (const SetSceneStatusServerResponse   *message,
                      uint8_t             *out);
size_t set_scene_status_server_response__pack_to_buffer
                     (const SetSceneStatusServerResponse   *message,
                      ProtobufCBuffer     *buffer);
SetSceneStatusServerResponse *
       set_scene_status_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   set_scene_status_server_response__free_unpacked
                     (SetSceneStatusServerResponse *message,
                      ProtobufCAllocator *allocator);
/* TestSceneServerRequest methods */
void   test_scene_server_request__init
                     (TestSceneServerRequest         *message);
size_t test_scene_server_request__get_packed_size
                     (const TestSceneServerRequest   *message);
size_t test_scene_server_request__pack
                     (const TestSceneServerRequest   *message,
                      uint8_t             *out);
size_t test_scene_server_request__pack_to_buffer
                     (const TestSceneServerRequest   *message,
                      ProtobufCBuffer     *buffer);
TestSceneServerRequest *
       test_scene_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   test_scene_server_request__free_unpacked
                     (TestSceneServerRequest *message,
                      ProtobufCAllocator *allocator);
/* TestSceneServerResponse methods */
void   test_scene_server_response__init
                     (TestSceneServerResponse         *message);
size_t test_scene_server_response__get_packed_size
                     (const TestSceneServerResponse   *message);
size_t test_scene_server_response__pack
                     (const TestSceneServerResponse   *message,
                      uint8_t             *out);
size_t test_scene_server_response__pack_to_buffer
                     (const TestSceneServerResponse   *message,
                      ProtobufCBuffer     *buffer);
TestSceneServerResponse *
       test_scene_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   test_scene_server_response__free_unpacked
                     (TestSceneServerResponse *message,
                      ProtobufCAllocator *allocator);
/* SceneTriggerServerRequest methods */
void   scene_trigger_server_request__init
                     (SceneTriggerServerRequest         *message);
size_t scene_trigger_server_request__get_packed_size
                     (const SceneTriggerServerRequest   *message);
size_t scene_trigger_server_request__pack
                     (const SceneTriggerServerRequest   *message,
                      uint8_t             *out);
size_t scene_trigger_server_request__pack_to_buffer
                     (const SceneTriggerServerRequest   *message,
                      ProtobufCBuffer     *buffer);
SceneTriggerServerRequest *
       scene_trigger_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   scene_trigger_server_request__free_unpacked
                     (SceneTriggerServerRequest *message,
                      ProtobufCAllocator *allocator);
/* SceneTriggerServerResponse methods */
void   scene_trigger_server_response__init
                     (SceneTriggerServerResponse         *message);
size_t scene_trigger_server_response__get_packed_size
                     (const SceneTriggerServerResponse   *message);
size_t scene_trigger_server_response__pack
                     (const SceneTriggerServerResponse   *message,
                      uint8_t             *out);
size_t scene_trigger_server_response__pack_to_buffer
                     (const SceneTriggerServerResponse   *message,
                      ProtobufCBuffer     *buffer);
SceneTriggerServerResponse *
       scene_trigger_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   scene_trigger_server_response__free_unpacked
                     (SceneTriggerServerResponse *message,
                      ProtobufCAllocator *allocator);
/* GetHomeTabServerRequest methods */
void   get_home_tab_server_request__init
                     (GetHomeTabServerRequest         *message);
size_t get_home_tab_server_request__get_packed_size
                     (const GetHomeTabServerRequest   *message);
size_t get_home_tab_server_request__pack
                     (const GetHomeTabServerRequest   *message,
                      uint8_t             *out);
size_t get_home_tab_server_request__pack_to_buffer
                     (const GetHomeTabServerRequest   *message,
                      ProtobufCBuffer     *buffer);
GetHomeTabServerRequest *
       get_home_tab_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_home_tab_server_request__free_unpacked
                     (GetHomeTabServerRequest *message,
                      ProtobufCAllocator *allocator);
/* GetHomeTabServerResponse methods */
void   get_home_tab_server_response__init
                     (GetHomeTabServerResponse         *message);
size_t get_home_tab_server_response__get_packed_size
                     (const GetHomeTabServerResponse   *message);
size_t get_home_tab_server_response__pack
                     (const GetHomeTabServerResponse   *message,
                      uint8_t             *out);
size_t get_home_tab_server_response__pack_to_buffer
                     (const GetHomeTabServerResponse   *message,
                      ProtobufCBuffer     *buffer);
GetHomeTabServerResponse *
       get_home_tab_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_home_tab_server_response__free_unpacked
                     (GetHomeTabServerResponse *message,
                      ProtobufCAllocator *allocator);
/* GetElectricTabServerRequest methods */
void   get_electric_tab_server_request__init
                     (GetElectricTabServerRequest         *message);
size_t get_electric_tab_server_request__get_packed_size
                     (const GetElectricTabServerRequest   *message);
size_t get_electric_tab_server_request__pack
                     (const GetElectricTabServerRequest   *message,
                      uint8_t             *out);
size_t get_electric_tab_server_request__pack_to_buffer
                     (const GetElectricTabServerRequest   *message,
                      ProtobufCBuffer     *buffer);
GetElectricTabServerRequest *
       get_electric_tab_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_electric_tab_server_request__free_unpacked
                     (GetElectricTabServerRequest *message,
                      ProtobufCAllocator *allocator);
/* GetElectricTabServerResponse methods */
void   get_electric_tab_server_response__init
                     (GetElectricTabServerResponse         *message);
size_t get_electric_tab_server_response__get_packed_size
                     (const GetElectricTabServerResponse   *message);
size_t get_electric_tab_server_response__pack
                     (const GetElectricTabServerResponse   *message,
                      uint8_t             *out);
size_t get_electric_tab_server_response__pack_to_buffer
                     (const GetElectricTabServerResponse   *message,
                      ProtobufCBuffer     *buffer);
GetElectricTabServerResponse *
       get_electric_tab_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_electric_tab_server_response__free_unpacked
                     (GetElectricTabServerResponse *message,
                      ProtobufCAllocator *allocator);
/* GetSwitcherTabServerRequest methods */
void   get_switcher_tab_server_request__init
                     (GetSwitcherTabServerRequest         *message);
size_t get_switcher_tab_server_request__get_packed_size
                     (const GetSwitcherTabServerRequest   *message);
size_t get_switcher_tab_server_request__pack
                     (const GetSwitcherTabServerRequest   *message,
                      uint8_t             *out);
size_t get_switcher_tab_server_request__pack_to_buffer
                     (const GetSwitcherTabServerRequest   *message,
                      ProtobufCBuffer     *buffer);
GetSwitcherTabServerRequest *
       get_switcher_tab_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_switcher_tab_server_request__free_unpacked
                     (GetSwitcherTabServerRequest *message,
                      ProtobufCAllocator *allocator);
/* GetSwitcherTabServerResponse methods */
void   get_switcher_tab_server_response__init
                     (GetSwitcherTabServerResponse         *message);
size_t get_switcher_tab_server_response__get_packed_size
                     (const GetSwitcherTabServerResponse   *message);
size_t get_switcher_tab_server_response__pack
                     (const GetSwitcherTabServerResponse   *message,
                      uint8_t             *out);
size_t get_switcher_tab_server_response__pack_to_buffer
                     (const GetSwitcherTabServerResponse   *message,
                      ProtobufCBuffer     *buffer);
GetSwitcherTabServerResponse *
       get_switcher_tab_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_switcher_tab_server_response__free_unpacked
                     (GetSwitcherTabServerResponse *message,
                      ProtobufCAllocator *allocator);
/* SwitcherOnChangedServerResponse methods */
void   switcher_on_changed_server_response__init
                     (SwitcherOnChangedServerResponse         *message);
size_t switcher_on_changed_server_response__get_packed_size
                     (const SwitcherOnChangedServerResponse   *message);
size_t switcher_on_changed_server_response__pack
                     (const SwitcherOnChangedServerResponse   *message,
                      uint8_t             *out);
size_t switcher_on_changed_server_response__pack_to_buffer
                     (const SwitcherOnChangedServerResponse   *message,
                      ProtobufCBuffer     *buffer);
SwitcherOnChangedServerResponse *
       switcher_on_changed_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   switcher_on_changed_server_response__free_unpacked
                     (SwitcherOnChangedServerResponse *message,
                      ProtobufCAllocator *allocator);
/* CurtainSwitcherOnChangedServerResponse methods */
void   curtain_switcher_on_changed_server_response__init
                     (CurtainSwitcherOnChangedServerResponse         *message);
size_t curtain_switcher_on_changed_server_response__get_packed_size
                     (const CurtainSwitcherOnChangedServerResponse   *message);
size_t curtain_switcher_on_changed_server_response__pack
                     (const CurtainSwitcherOnChangedServerResponse   *message,
                      uint8_t             *out);
size_t curtain_switcher_on_changed_server_response__pack_to_buffer
                     (const CurtainSwitcherOnChangedServerResponse   *message,
                      ProtobufCBuffer     *buffer);
CurtainSwitcherOnChangedServerResponse *
       curtain_switcher_on_changed_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   curtain_switcher_on_changed_server_response__free_unpacked
                     (CurtainSwitcherOnChangedServerResponse *message,
                      ProtobufCAllocator *allocator);
/* AirConditionerOnChangedServerResponse methods */
void   air_conditioner_on_changed_server_response__init
                     (AirConditionerOnChangedServerResponse         *message);
size_t air_conditioner_on_changed_server_response__get_packed_size
                     (const AirConditionerOnChangedServerResponse   *message);
size_t air_conditioner_on_changed_server_response__pack
                     (const AirConditionerOnChangedServerResponse   *message,
                      uint8_t             *out);
size_t air_conditioner_on_changed_server_response__pack_to_buffer
                     (const AirConditionerOnChangedServerResponse   *message,
                      ProtobufCBuffer     *buffer);
AirConditionerOnChangedServerResponse *
       air_conditioner_on_changed_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   air_conditioner_on_changed_server_response__free_unpacked
                     (AirConditionerOnChangedServerResponse *message,
                      ProtobufCAllocator *allocator);
/* RemoteOnChangedServerResponse methods */
void   remote_on_changed_server_response__init
                     (RemoteOnChangedServerResponse         *message);
size_t remote_on_changed_server_response__get_packed_size
                     (const RemoteOnChangedServerResponse   *message);
size_t remote_on_changed_server_response__pack
                     (const RemoteOnChangedServerResponse   *message,
                      uint8_t             *out);
size_t remote_on_changed_server_response__pack_to_buffer
                     (const RemoteOnChangedServerResponse   *message,
                      ProtobufCBuffer     *buffer);
RemoteOnChangedServerResponse *
       remote_on_changed_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   remote_on_changed_server_response__free_unpacked
                     (RemoteOnChangedServerResponse *message,
                      ProtobufCAllocator *allocator);
/* MeterOnChangedServerResponse methods */
void   meter_on_changed_server_response__init
                     (MeterOnChangedServerResponse         *message);
size_t meter_on_changed_server_response__get_packed_size
                     (const MeterOnChangedServerResponse   *message);
size_t meter_on_changed_server_response__pack
                     (const MeterOnChangedServerResponse   *message,
                      uint8_t             *out);
size_t meter_on_changed_server_response__pack_to_buffer
                     (const MeterOnChangedServerResponse   *message,
                      ProtobufCBuffer     *buffer);
MeterOnChangedServerResponse *
       meter_on_changed_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   meter_on_changed_server_response__free_unpacked
                     (MeterOnChangedServerResponse *message,
                      ProtobufCAllocator *allocator);
/* DeviceOnChangedDeviceServerResponse methods */
void   device_on_changed_device_server_response__init
                     (DeviceOnChangedDeviceServerResponse         *message);
size_t device_on_changed_device_server_response__get_packed_size
                     (const DeviceOnChangedDeviceServerResponse   *message);
size_t device_on_changed_device_server_response__pack
                     (const DeviceOnChangedDeviceServerResponse   *message,
                      uint8_t             *out);
size_t device_on_changed_device_server_response__pack_to_buffer
                     (const DeviceOnChangedDeviceServerResponse   *message,
                      ProtobufCBuffer     *buffer);
DeviceOnChangedDeviceServerResponse *
       device_on_changed_device_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   device_on_changed_device_server_response__free_unpacked
                     (DeviceOnChangedDeviceServerResponse *message,
                      ProtobufCAllocator *allocator);
/* ProgressUpdateFirmwareOnChangedDeviceServerResponse methods */
void   progress_update_firmware_on_changed_device_server_response__init
                     (ProgressUpdateFirmwareOnChangedDeviceServerResponse         *message);
size_t progress_update_firmware_on_changed_device_server_response__get_packed_size
                     (const ProgressUpdateFirmwareOnChangedDeviceServerResponse   *message);
size_t progress_update_firmware_on_changed_device_server_response__pack
                     (const ProgressUpdateFirmwareOnChangedDeviceServerResponse   *message,
                      uint8_t             *out);
size_t progress_update_firmware_on_changed_device_server_response__pack_to_buffer
                     (const ProgressUpdateFirmwareOnChangedDeviceServerResponse   *message,
                      ProtobufCBuffer     *buffer);
ProgressUpdateFirmwareOnChangedDeviceServerResponse *
       progress_update_firmware_on_changed_device_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   progress_update_firmware_on_changed_device_server_response__free_unpacked
                     (ProgressUpdateFirmwareOnChangedDeviceServerResponse *message,
                      ProtobufCAllocator *allocator);
/* DownloadFirmwareOnChangedDeviceServerResponse methods */
void   download_firmware_on_changed_device_server_response__init
                     (DownloadFirmwareOnChangedDeviceServerResponse         *message);
size_t download_firmware_on_changed_device_server_response__get_packed_size
                     (const DownloadFirmwareOnChangedDeviceServerResponse   *message);
size_t download_firmware_on_changed_device_server_response__pack
                     (const DownloadFirmwareOnChangedDeviceServerResponse   *message,
                      uint8_t             *out);
size_t download_firmware_on_changed_device_server_response__pack_to_buffer
                     (const DownloadFirmwareOnChangedDeviceServerResponse   *message,
                      ProtobufCBuffer     *buffer);
DownloadFirmwareOnChangedDeviceServerResponse *
       download_firmware_on_changed_device_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   download_firmware_on_changed_device_server_response__free_unpacked
                     (DownloadFirmwareOnChangedDeviceServerResponse *message,
                      ProtobufCAllocator *allocator);
/* MotionOnChangedServerResponse methods */
void   motion_on_changed_server_response__init
                     (MotionOnChangedServerResponse         *message);
size_t motion_on_changed_server_response__get_packed_size
                     (const MotionOnChangedServerResponse   *message);
size_t motion_on_changed_server_response__pack
                     (const MotionOnChangedServerResponse   *message,
                      uint8_t             *out);
size_t motion_on_changed_server_response__pack_to_buffer
                     (const MotionOnChangedServerResponse   *message,
                      ProtobufCBuffer     *buffer);
MotionOnChangedServerResponse *
       motion_on_changed_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   motion_on_changed_server_response__free_unpacked
                     (MotionOnChangedServerResponse *message,
                      ProtobufCAllocator *allocator);
/* SceneOnChangedServerResponse methods */
void   scene_on_changed_server_response__init
                     (SceneOnChangedServerResponse         *message);
size_t scene_on_changed_server_response__get_packed_size
                     (const SceneOnChangedServerResponse   *message);
size_t scene_on_changed_server_response__pack
                     (const SceneOnChangedServerResponse   *message,
                      uint8_t             *out);
size_t scene_on_changed_server_response__pack_to_buffer
                     (const SceneOnChangedServerResponse   *message,
                      ProtobufCBuffer     *buffer);
SceneOnChangedServerResponse *
       scene_on_changed_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   scene_on_changed_server_response__free_unpacked
                     (SceneOnChangedServerResponse *message,
                      ProtobufCAllocator *allocator);
/* HomekitOnChangedServerResponse methods */
void   homekit_on_changed_server_response__init
                     (HomekitOnChangedServerResponse         *message);
size_t homekit_on_changed_server_response__get_packed_size
                     (const HomekitOnChangedServerResponse   *message);
size_t homekit_on_changed_server_response__pack
                     (const HomekitOnChangedServerResponse   *message,
                      uint8_t             *out);
size_t homekit_on_changed_server_response__pack_to_buffer
                     (const HomekitOnChangedServerResponse   *message,
                      ProtobufCBuffer     *buffer);
HomekitOnChangedServerResponse *
       homekit_on_changed_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   homekit_on_changed_server_response__free_unpacked
                     (HomekitOnChangedServerResponse *message,
                      ProtobufCAllocator *allocator);
/* ButtonOnChangedServerResponse methods */
void   button_on_changed_server_response__init
                     (ButtonOnChangedServerResponse         *message);
size_t button_on_changed_server_response__get_packed_size
                     (const ButtonOnChangedServerResponse   *message);
size_t button_on_changed_server_response__pack
                     (const ButtonOnChangedServerResponse   *message,
                      uint8_t             *out);
size_t button_on_changed_server_response__pack_to_buffer
                     (const ButtonOnChangedServerResponse   *message,
                      ProtobufCBuffer     *buffer);
ButtonOnChangedServerResponse *
       button_on_changed_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   button_on_changed_server_response__free_unpacked
                     (ButtonOnChangedServerResponse *message,
                      ProtobufCAllocator *allocator);
/* GroupControlOnChangedServerResponse methods */
void   group_control_on_changed_server_response__init
                     (GroupControlOnChangedServerResponse         *message);
size_t group_control_on_changed_server_response__get_packed_size
                     (const GroupControlOnChangedServerResponse   *message);
size_t group_control_on_changed_server_response__pack
                     (const GroupControlOnChangedServerResponse   *message,
                      uint8_t             *out);
size_t group_control_on_changed_server_response__pack_to_buffer
                     (const GroupControlOnChangedServerResponse   *message,
                      ProtobufCBuffer     *buffer);
GroupControlOnChangedServerResponse *
       group_control_on_changed_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   group_control_on_changed_server_response__free_unpacked
                     (GroupControlOnChangedServerResponse *message,
                      ProtobufCAllocator *allocator);
/* LedDriverOnChangedServerResponse methods */
void   led_driver_on_changed_server_response__init
                     (LedDriverOnChangedServerResponse         *message);
size_t led_driver_on_changed_server_response__get_packed_size
                     (const LedDriverOnChangedServerResponse   *message);
size_t led_driver_on_changed_server_response__pack
                     (const LedDriverOnChangedServerResponse   *message,
                      uint8_t             *out);
size_t led_driver_on_changed_server_response__pack_to_buffer
                     (const LedDriverOnChangedServerResponse   *message,
                      ProtobufCBuffer     *buffer);
LedDriverOnChangedServerResponse *
       led_driver_on_changed_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   led_driver_on_changed_server_response__free_unpacked
                     (LedDriverOnChangedServerResponse *message,
                      ProtobufCAllocator *allocator);
/* EnvironmentSensorOnChangedServerResponse methods */
void   environment_sensor_on_changed_server_response__init
                     (EnvironmentSensorOnChangedServerResponse         *message);
size_t environment_sensor_on_changed_server_response__get_packed_size
                     (const EnvironmentSensorOnChangedServerResponse   *message);
size_t environment_sensor_on_changed_server_response__pack
                     (const EnvironmentSensorOnChangedServerResponse   *message,
                      uint8_t             *out);
size_t environment_sensor_on_changed_server_response__pack_to_buffer
                     (const EnvironmentSensorOnChangedServerResponse   *message,
                      ProtobufCBuffer     *buffer);
EnvironmentSensorOnChangedServerResponse *
       environment_sensor_on_changed_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   environment_sensor_on_changed_server_response__free_unpacked
                     (EnvironmentSensorOnChangedServerResponse *message,
                      ProtobufCAllocator *allocator);
/* SmartPlugOnChangedServerResponse methods */
void   smart_plug_on_changed_server_response__init
                     (SmartPlugOnChangedServerResponse         *message);
size_t smart_plug_on_changed_server_response__get_packed_size
                     (const SmartPlugOnChangedServerResponse   *message);
size_t smart_plug_on_changed_server_response__pack
                     (const SmartPlugOnChangedServerResponse   *message,
                      uint8_t             *out);
size_t smart_plug_on_changed_server_response__pack_to_buffer
                     (const SmartPlugOnChangedServerResponse   *message,
                      ProtobufCBuffer     *buffer);
SmartPlugOnChangedServerResponse *
       smart_plug_on_changed_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   smart_plug_on_changed_server_response__free_unpacked
                     (SmartPlugOnChangedServerResponse *message,
                      ProtobufCAllocator *allocator);
/* CurtainOnChangedServerResponse methods */
void   curtain_on_changed_server_response__init
                     (CurtainOnChangedServerResponse         *message);
size_t curtain_on_changed_server_response__get_packed_size
                     (const CurtainOnChangedServerResponse   *message);
size_t curtain_on_changed_server_response__pack
                     (const CurtainOnChangedServerResponse   *message,
                      uint8_t             *out);
size_t curtain_on_changed_server_response__pack_to_buffer
                     (const CurtainOnChangedServerResponse   *message,
                      ProtobufCBuffer     *buffer);
CurtainOnChangedServerResponse *
       curtain_on_changed_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   curtain_on_changed_server_response__free_unpacked
                     (CurtainOnChangedServerResponse *message,
                      ProtobufCAllocator *allocator);
/* EchoServerRequest methods */
void   echo_server_request__init
                     (EchoServerRequest         *message);
size_t echo_server_request__get_packed_size
                     (const EchoServerRequest   *message);
size_t echo_server_request__pack
                     (const EchoServerRequest   *message,
                      uint8_t             *out);
size_t echo_server_request__pack_to_buffer
                     (const EchoServerRequest   *message,
                      ProtobufCBuffer     *buffer);
EchoServerRequest *
       echo_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   echo_server_request__free_unpacked
                     (EchoServerRequest *message,
                      ProtobufCAllocator *allocator);
/* EchoServerResponse methods */
void   echo_server_response__init
                     (EchoServerResponse         *message);
size_t echo_server_response__get_packed_size
                     (const EchoServerResponse   *message);
size_t echo_server_response__pack
                     (const EchoServerResponse   *message,
                      uint8_t             *out);
size_t echo_server_response__pack_to_buffer
                     (const EchoServerResponse   *message,
                      ProtobufCBuffer     *buffer);
EchoServerResponse *
       echo_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   echo_server_response__free_unpacked
                     (EchoServerResponse *message,
                      ProtobufCAllocator *allocator);
/* MotionServerRequest methods */
void   motion_server_request__init
                     (MotionServerRequest         *message);
size_t motion_server_request__get_packed_size
                     (const MotionServerRequest   *message);
size_t motion_server_request__pack
                     (const MotionServerRequest   *message,
                      uint8_t             *out);
size_t motion_server_request__pack_to_buffer
                     (const MotionServerRequest   *message,
                      ProtobufCBuffer     *buffer);
MotionServerRequest *
       motion_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   motion_server_request__free_unpacked
                     (MotionServerRequest *message,
                      ProtobufCAllocator *allocator);
/* MotionServerResponse methods */
void   motion_server_response__init
                     (MotionServerResponse         *message);
size_t motion_server_response__get_packed_size
                     (const MotionServerResponse   *message);
size_t motion_server_response__pack
                     (const MotionServerResponse   *message,
                      uint8_t             *out);
size_t motion_server_response__pack_to_buffer
                     (const MotionServerResponse   *message,
                      ProtobufCBuffer     *buffer);
MotionServerResponse *
       motion_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   motion_server_response__free_unpacked
                     (MotionServerResponse *message,
                      ProtobufCAllocator *allocator);
/* GetMotionServerRequest methods */
void   get_motion_server_request__init
                     (GetMotionServerRequest         *message);
size_t get_motion_server_request__get_packed_size
                     (const GetMotionServerRequest   *message);
size_t get_motion_server_request__pack
                     (const GetMotionServerRequest   *message,
                      uint8_t             *out);
size_t get_motion_server_request__pack_to_buffer
                     (const GetMotionServerRequest   *message,
                      ProtobufCBuffer     *buffer);
GetMotionServerRequest *
       get_motion_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_motion_server_request__free_unpacked
                     (GetMotionServerRequest *message,
                      ProtobufCAllocator *allocator);
/* GetMotionServerResponse methods */
void   get_motion_server_response__init
                     (GetMotionServerResponse         *message);
size_t get_motion_server_response__get_packed_size
                     (const GetMotionServerResponse   *message);
size_t get_motion_server_response__pack
                     (const GetMotionServerResponse   *message,
                      uint8_t             *out);
size_t get_motion_server_response__pack_to_buffer
                     (const GetMotionServerResponse   *message,
                      ProtobufCBuffer     *buffer);
GetMotionServerResponse *
       get_motion_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_motion_server_response__free_unpacked
                     (GetMotionServerResponse *message,
                      ProtobufCAllocator *allocator);
/* UpdateMotionServerRequest methods */
void   update_motion_server_request__init
                     (UpdateMotionServerRequest         *message);
size_t update_motion_server_request__get_packed_size
                     (const UpdateMotionServerRequest   *message);
size_t update_motion_server_request__pack
                     (const UpdateMotionServerRequest   *message,
                      uint8_t             *out);
size_t update_motion_server_request__pack_to_buffer
                     (const UpdateMotionServerRequest   *message,
                      ProtobufCBuffer     *buffer);
UpdateMotionServerRequest *
       update_motion_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   update_motion_server_request__free_unpacked
                     (UpdateMotionServerRequest *message,
                      ProtobufCAllocator *allocator);
/* UpdateMotionServerResponse methods */
void   update_motion_server_response__init
                     (UpdateMotionServerResponse         *message);
size_t update_motion_server_response__get_packed_size
                     (const UpdateMotionServerResponse   *message);
size_t update_motion_server_response__pack
                     (const UpdateMotionServerResponse   *message,
                      uint8_t             *out);
size_t update_motion_server_response__pack_to_buffer
                     (const UpdateMotionServerResponse   *message,
                      ProtobufCBuffer     *buffer);
UpdateMotionServerResponse *
       update_motion_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   update_motion_server_response__free_unpacked
                     (UpdateMotionServerResponse *message,
                      ProtobufCAllocator *allocator);
/* GetHomekitInfoServerRequest methods */
void   get_homekit_info_server_request__init
                     (GetHomekitInfoServerRequest         *message);
size_t get_homekit_info_server_request__get_packed_size
                     (const GetHomekitInfoServerRequest   *message);
size_t get_homekit_info_server_request__pack
                     (const GetHomekitInfoServerRequest   *message,
                      uint8_t             *out);
size_t get_homekit_info_server_request__pack_to_buffer
                     (const GetHomekitInfoServerRequest   *message,
                      ProtobufCBuffer     *buffer);
GetHomekitInfoServerRequest *
       get_homekit_info_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_homekit_info_server_request__free_unpacked
                     (GetHomekitInfoServerRequest *message,
                      ProtobufCAllocator *allocator);
/* GetHomekitInfoServerResponse methods */
void   get_homekit_info_server_response__init
                     (GetHomekitInfoServerResponse         *message);
size_t get_homekit_info_server_response__get_packed_size
                     (const GetHomekitInfoServerResponse   *message);
size_t get_homekit_info_server_response__pack
                     (const GetHomekitInfoServerResponse   *message,
                      uint8_t             *out);
size_t get_homekit_info_server_response__pack_to_buffer
                     (const GetHomekitInfoServerResponse   *message,
                      ProtobufCBuffer     *buffer);
GetHomekitInfoServerResponse *
       get_homekit_info_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_homekit_info_server_response__free_unpacked
                     (GetHomekitInfoServerResponse *message,
                      ProtobufCAllocator *allocator);
/* UpdateHomekitServerRequest methods */
void   update_homekit_server_request__init
                     (UpdateHomekitServerRequest         *message);
size_t update_homekit_server_request__get_packed_size
                     (const UpdateHomekitServerRequest   *message);
size_t update_homekit_server_request__pack
                     (const UpdateHomekitServerRequest   *message,
                      uint8_t             *out);
size_t update_homekit_server_request__pack_to_buffer
                     (const UpdateHomekitServerRequest   *message,
                      ProtobufCBuffer     *buffer);
UpdateHomekitServerRequest *
       update_homekit_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   update_homekit_server_request__free_unpacked
                     (UpdateHomekitServerRequest *message,
                      ProtobufCAllocator *allocator);
/* UpdateHomekitServerResponse methods */
void   update_homekit_server_response__init
                     (UpdateHomekitServerResponse         *message);
size_t update_homekit_server_response__get_packed_size
                     (const UpdateHomekitServerResponse   *message);
size_t update_homekit_server_response__pack
                     (const UpdateHomekitServerResponse   *message,
                      uint8_t             *out);
size_t update_homekit_server_response__pack_to_buffer
                     (const UpdateHomekitServerResponse   *message,
                      ProtobufCBuffer     *buffer);
UpdateHomekitServerResponse *
       update_homekit_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   update_homekit_server_response__free_unpacked
                     (UpdateHomekitServerResponse *message,
                      ProtobufCAllocator *allocator);
/* SetHomekitModeServerRequest methods */
void   set_homekit_mode_server_request__init
                     (SetHomekitModeServerRequest         *message);
size_t set_homekit_mode_server_request__get_packed_size
                     (const SetHomekitModeServerRequest   *message);
size_t set_homekit_mode_server_request__pack
                     (const SetHomekitModeServerRequest   *message,
                      uint8_t             *out);
size_t set_homekit_mode_server_request__pack_to_buffer
                     (const SetHomekitModeServerRequest   *message,
                      ProtobufCBuffer     *buffer);
SetHomekitModeServerRequest *
       set_homekit_mode_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   set_homekit_mode_server_request__free_unpacked
                     (SetHomekitModeServerRequest *message,
                      ProtobufCAllocator *allocator);
/* SetHomekitModeServerResponse methods */
void   set_homekit_mode_server_response__init
                     (SetHomekitModeServerResponse         *message);
size_t set_homekit_mode_server_response__get_packed_size
                     (const SetHomekitModeServerResponse   *message);
size_t set_homekit_mode_server_response__pack
                     (const SetHomekitModeServerResponse   *message,
                      uint8_t             *out);
size_t set_homekit_mode_server_response__pack_to_buffer
                     (const SetHomekitModeServerResponse   *message,
                      ProtobufCBuffer     *buffer);
SetHomekitModeServerResponse *
       set_homekit_mode_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   set_homekit_mode_server_response__free_unpacked
                     (SetHomekitModeServerResponse *message,
                      ProtobufCAllocator *allocator);
/* GetProjectsServerRequest methods */
void   get_projects_server_request__init
                     (GetProjectsServerRequest         *message);
size_t get_projects_server_request__get_packed_size
                     (const GetProjectsServerRequest   *message);
size_t get_projects_server_request__pack
                     (const GetProjectsServerRequest   *message,
                      uint8_t             *out);
size_t get_projects_server_request__pack_to_buffer
                     (const GetProjectsServerRequest   *message,
                      ProtobufCBuffer     *buffer);
GetProjectsServerRequest *
       get_projects_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_projects_server_request__free_unpacked
                     (GetProjectsServerRequest *message,
                      ProtobufCAllocator *allocator);
/* GetProjectsServerResponse methods */
void   get_projects_server_response__init
                     (GetProjectsServerResponse         *message);
size_t get_projects_server_response__get_packed_size
                     (const GetProjectsServerResponse   *message);
size_t get_projects_server_response__pack
                     (const GetProjectsServerResponse   *message,
                      uint8_t             *out);
size_t get_projects_server_response__pack_to_buffer
                     (const GetProjectsServerResponse   *message,
                      ProtobufCBuffer     *buffer);
GetProjectsServerResponse *
       get_projects_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_projects_server_response__free_unpacked
                     (GetProjectsServerResponse *message,
                      ProtobufCAllocator *allocator);
/* GetBuildingsServerRequest methods */
void   get_buildings_server_request__init
                     (GetBuildingsServerRequest         *message);
size_t get_buildings_server_request__get_packed_size
                     (const GetBuildingsServerRequest   *message);
size_t get_buildings_server_request__pack
                     (const GetBuildingsServerRequest   *message,
                      uint8_t             *out);
size_t get_buildings_server_request__pack_to_buffer
                     (const GetBuildingsServerRequest   *message,
                      ProtobufCBuffer     *buffer);
GetBuildingsServerRequest *
       get_buildings_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_buildings_server_request__free_unpacked
                     (GetBuildingsServerRequest *message,
                      ProtobufCAllocator *allocator);
/* GetBuildingsServerResponse methods */
void   get_buildings_server_response__init
                     (GetBuildingsServerResponse         *message);
size_t get_buildings_server_response__get_packed_size
                     (const GetBuildingsServerResponse   *message);
size_t get_buildings_server_response__pack
                     (const GetBuildingsServerResponse   *message,
                      uint8_t             *out);
size_t get_buildings_server_response__pack_to_buffer
                     (const GetBuildingsServerResponse   *message,
                      ProtobufCBuffer     *buffer);
GetBuildingsServerResponse *
       get_buildings_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_buildings_server_response__free_unpacked
                     (GetBuildingsServerResponse *message,
                      ProtobufCAllocator *allocator);
/* GetFloorsServerRequest methods */
void   get_floors_server_request__init
                     (GetFloorsServerRequest         *message);
size_t get_floors_server_request__get_packed_size
                     (const GetFloorsServerRequest   *message);
size_t get_floors_server_request__pack
                     (const GetFloorsServerRequest   *message,
                      uint8_t             *out);
size_t get_floors_server_request__pack_to_buffer
                     (const GetFloorsServerRequest   *message,
                      ProtobufCBuffer     *buffer);
GetFloorsServerRequest *
       get_floors_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_floors_server_request__free_unpacked
                     (GetFloorsServerRequest *message,
                      ProtobufCAllocator *allocator);
/* GetFloorsServerResponse methods */
void   get_floors_server_response__init
                     (GetFloorsServerResponse         *message);
size_t get_floors_server_response__get_packed_size
                     (const GetFloorsServerResponse   *message);
size_t get_floors_server_response__pack
                     (const GetFloorsServerResponse   *message,
                      uint8_t             *out);
size_t get_floors_server_response__pack_to_buffer
                     (const GetFloorsServerResponse   *message,
                      ProtobufCBuffer     *buffer);
GetFloorsServerResponse *
       get_floors_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_floors_server_response__free_unpacked
                     (GetFloorsServerResponse *message,
                      ProtobufCAllocator *allocator);
/* GetApartmentsServerRequest methods */
void   get_apartments_server_request__init
                     (GetApartmentsServerRequest         *message);
size_t get_apartments_server_request__get_packed_size
                     (const GetApartmentsServerRequest   *message);
size_t get_apartments_server_request__pack
                     (const GetApartmentsServerRequest   *message,
                      uint8_t             *out);
size_t get_apartments_server_request__pack_to_buffer
                     (const GetApartmentsServerRequest   *message,
                      ProtobufCBuffer     *buffer);
GetApartmentsServerRequest *
       get_apartments_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_apartments_server_request__free_unpacked
                     (GetApartmentsServerRequest *message,
                      ProtobufCAllocator *allocator);
/* GetApartmentsServerResponse methods */
void   get_apartments_server_response__init
                     (GetApartmentsServerResponse         *message);
size_t get_apartments_server_response__get_packed_size
                     (const GetApartmentsServerResponse   *message);
size_t get_apartments_server_response__pack
                     (const GetApartmentsServerResponse   *message,
                      uint8_t             *out);
size_t get_apartments_server_response__pack_to_buffer
                     (const GetApartmentsServerResponse   *message,
                      ProtobufCBuffer     *buffer);
GetApartmentsServerResponse *
       get_apartments_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_apartments_server_response__free_unpacked
                     (GetApartmentsServerResponse *message,
                      ProtobufCAllocator *allocator);
/* AddUserHomeServerRequest methods */
void   add_user_home_server_request__init
                     (AddUserHomeServerRequest         *message);
size_t add_user_home_server_request__get_packed_size
                     (const AddUserHomeServerRequest   *message);
size_t add_user_home_server_request__pack
                     (const AddUserHomeServerRequest   *message,
                      uint8_t             *out);
size_t add_user_home_server_request__pack_to_buffer
                     (const AddUserHomeServerRequest   *message,
                      ProtobufCBuffer     *buffer);
AddUserHomeServerRequest *
       add_user_home_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   add_user_home_server_request__free_unpacked
                     (AddUserHomeServerRequest *message,
                      ProtobufCAllocator *allocator);
/* AddUserHomeServerResponse methods */
void   add_user_home_server_response__init
                     (AddUserHomeServerResponse         *message);
size_t add_user_home_server_response__get_packed_size
                     (const AddUserHomeServerResponse   *message);
size_t add_user_home_server_response__pack
                     (const AddUserHomeServerResponse   *message,
                      uint8_t             *out);
size_t add_user_home_server_response__pack_to_buffer
                     (const AddUserHomeServerResponse   *message,
                      ProtobufCBuffer     *buffer);
AddUserHomeServerResponse *
       add_user_home_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   add_user_home_server_response__free_unpacked
                     (AddUserHomeServerResponse *message,
                      ProtobufCAllocator *allocator);
/* DeleteUserHomeServerRequest methods */
void   delete_user_home_server_request__init
                     (DeleteUserHomeServerRequest         *message);
size_t delete_user_home_server_request__get_packed_size
                     (const DeleteUserHomeServerRequest   *message);
size_t delete_user_home_server_request__pack
                     (const DeleteUserHomeServerRequest   *message,
                      uint8_t             *out);
size_t delete_user_home_server_request__pack_to_buffer
                     (const DeleteUserHomeServerRequest   *message,
                      ProtobufCBuffer     *buffer);
DeleteUserHomeServerRequest *
       delete_user_home_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   delete_user_home_server_request__free_unpacked
                     (DeleteUserHomeServerRequest *message,
                      ProtobufCAllocator *allocator);
/* DeleteUserHomeServerResponse methods */
void   delete_user_home_server_response__init
                     (DeleteUserHomeServerResponse         *message);
size_t delete_user_home_server_response__get_packed_size
                     (const DeleteUserHomeServerResponse   *message);
size_t delete_user_home_server_response__pack
                     (const DeleteUserHomeServerResponse   *message,
                      uint8_t             *out);
size_t delete_user_home_server_response__pack_to_buffer
                     (const DeleteUserHomeServerResponse   *message,
                      ProtobufCBuffer     *buffer);
DeleteUserHomeServerResponse *
       delete_user_home_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   delete_user_home_server_response__free_unpacked
                     (DeleteUserHomeServerResponse *message,
                      ProtobufCAllocator *allocator);
/* GetUnreadServerRequest methods */
void   get_unread_server_request__init
                     (GetUnreadServerRequest         *message);
size_t get_unread_server_request__get_packed_size
                     (const GetUnreadServerRequest   *message);
size_t get_unread_server_request__pack
                     (const GetUnreadServerRequest   *message,
                      uint8_t             *out);
size_t get_unread_server_request__pack_to_buffer
                     (const GetUnreadServerRequest   *message,
                      ProtobufCBuffer     *buffer);
GetUnreadServerRequest *
       get_unread_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_unread_server_request__free_unpacked
                     (GetUnreadServerRequest *message,
                      ProtobufCAllocator *allocator);
/* GetUnreadServerResponse methods */
void   get_unread_server_response__init
                     (GetUnreadServerResponse         *message);
size_t get_unread_server_response__get_packed_size
                     (const GetUnreadServerResponse   *message);
size_t get_unread_server_response__pack
                     (const GetUnreadServerResponse   *message,
                      uint8_t             *out);
size_t get_unread_server_response__pack_to_buffer
                     (const GetUnreadServerResponse   *message,
                      ProtobufCBuffer     *buffer);
GetUnreadServerResponse *
       get_unread_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_unread_server_response__free_unpacked
                     (GetUnreadServerResponse *message,
                      ProtobufCAllocator *allocator);
/* SetReadServerRequest methods */
void   set_read_server_request__init
                     (SetReadServerRequest         *message);
size_t set_read_server_request__get_packed_size
                     (const SetReadServerRequest   *message);
size_t set_read_server_request__pack
                     (const SetReadServerRequest   *message,
                      uint8_t             *out);
size_t set_read_server_request__pack_to_buffer
                     (const SetReadServerRequest   *message,
                      ProtobufCBuffer     *buffer);
SetReadServerRequest *
       set_read_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   set_read_server_request__free_unpacked
                     (SetReadServerRequest *message,
                      ProtobufCAllocator *allocator);
/* SetReadServerResponse methods */
void   set_read_server_response__init
                     (SetReadServerResponse         *message);
size_t set_read_server_response__get_packed_size
                     (const SetReadServerResponse   *message);
size_t set_read_server_response__pack
                     (const SetReadServerResponse   *message,
                      uint8_t             *out);
size_t set_read_server_response__pack_to_buffer
                     (const SetReadServerResponse   *message,
                      ProtobufCBuffer     *buffer);
SetReadServerResponse *
       set_read_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   set_read_server_response__free_unpacked
                     (SetReadServerResponse *message,
                      ProtobufCAllocator *allocator);
/* GetBackgroundsServerRequest methods */
void   get_backgrounds_server_request__init
                     (GetBackgroundsServerRequest         *message);
size_t get_backgrounds_server_request__get_packed_size
                     (const GetBackgroundsServerRequest   *message);
size_t get_backgrounds_server_request__pack
                     (const GetBackgroundsServerRequest   *message,
                      uint8_t             *out);
size_t get_backgrounds_server_request__pack_to_buffer
                     (const GetBackgroundsServerRequest   *message,
                      ProtobufCBuffer     *buffer);
GetBackgroundsServerRequest *
       get_backgrounds_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_backgrounds_server_request__free_unpacked
                     (GetBackgroundsServerRequest *message,
                      ProtobufCAllocator *allocator);
/* GetBackgroundsServerResponse methods */
void   get_backgrounds_server_response__init
                     (GetBackgroundsServerResponse         *message);
size_t get_backgrounds_server_response__get_packed_size
                     (const GetBackgroundsServerResponse   *message);
size_t get_backgrounds_server_response__pack
                     (const GetBackgroundsServerResponse   *message,
                      uint8_t             *out);
size_t get_backgrounds_server_response__pack_to_buffer
                     (const GetBackgroundsServerResponse   *message,
                      ProtobufCBuffer     *buffer);
GetBackgroundsServerResponse *
       get_backgrounds_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_backgrounds_server_response__free_unpacked
                     (GetBackgroundsServerResponse *message,
                      ProtobufCAllocator *allocator);
/* GetAutoOffsServerRequest methods */
void   get_auto_offs_server_request__init
                     (GetAutoOffsServerRequest         *message);
size_t get_auto_offs_server_request__get_packed_size
                     (const GetAutoOffsServerRequest   *message);
size_t get_auto_offs_server_request__pack
                     (const GetAutoOffsServerRequest   *message,
                      uint8_t             *out);
size_t get_auto_offs_server_request__pack_to_buffer
                     (const GetAutoOffsServerRequest   *message,
                      ProtobufCBuffer     *buffer);
GetAutoOffsServerRequest *
       get_auto_offs_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_auto_offs_server_request__free_unpacked
                     (GetAutoOffsServerRequest *message,
                      ProtobufCAllocator *allocator);
/* GetAutoOffsServerResponse methods */
void   get_auto_offs_server_response__init
                     (GetAutoOffsServerResponse         *message);
size_t get_auto_offs_server_response__get_packed_size
                     (const GetAutoOffsServerResponse   *message);
size_t get_auto_offs_server_response__pack
                     (const GetAutoOffsServerResponse   *message,
                      uint8_t             *out);
size_t get_auto_offs_server_response__pack_to_buffer
                     (const GetAutoOffsServerResponse   *message,
                      ProtobufCBuffer     *buffer);
GetAutoOffsServerResponse *
       get_auto_offs_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_auto_offs_server_response__free_unpacked
                     (GetAutoOffsServerResponse *message,
                      ProtobufCAllocator *allocator);
/* GetTypeDevicesServerRequest methods */
void   get_type_devices_server_request__init
                     (GetTypeDevicesServerRequest         *message);
size_t get_type_devices_server_request__get_packed_size
                     (const GetTypeDevicesServerRequest   *message);
size_t get_type_devices_server_request__pack
                     (const GetTypeDevicesServerRequest   *message,
                      uint8_t             *out);
size_t get_type_devices_server_request__pack_to_buffer
                     (const GetTypeDevicesServerRequest   *message,
                      ProtobufCBuffer     *buffer);
GetTypeDevicesServerRequest *
       get_type_devices_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_type_devices_server_request__free_unpacked
                     (GetTypeDevicesServerRequest *message,
                      ProtobufCAllocator *allocator);
/* GetTypeDevicesServerResponse methods */
void   get_type_devices_server_response__init
                     (GetTypeDevicesServerResponse         *message);
size_t get_type_devices_server_response__get_packed_size
                     (const GetTypeDevicesServerResponse   *message);
size_t get_type_devices_server_response__pack
                     (const GetTypeDevicesServerResponse   *message,
                      uint8_t             *out);
size_t get_type_devices_server_response__pack_to_buffer
                     (const GetTypeDevicesServerResponse   *message,
                      ProtobufCBuffer     *buffer);
GetTypeDevicesServerResponse *
       get_type_devices_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_type_devices_server_response__free_unpacked
                     (GetTypeDevicesServerResponse *message,
                      ProtobufCAllocator *allocator);
/* GetButtonInfoServerRequest methods */
void   get_button_info_server_request__init
                     (GetButtonInfoServerRequest         *message);
size_t get_button_info_server_request__get_packed_size
                     (const GetButtonInfoServerRequest   *message);
size_t get_button_info_server_request__pack
                     (const GetButtonInfoServerRequest   *message,
                      uint8_t             *out);
size_t get_button_info_server_request__pack_to_buffer
                     (const GetButtonInfoServerRequest   *message,
                      ProtobufCBuffer     *buffer);
GetButtonInfoServerRequest *
       get_button_info_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_button_info_server_request__free_unpacked
                     (GetButtonInfoServerRequest *message,
                      ProtobufCAllocator *allocator);
/* GetButtonInfoServerResponse methods */
void   get_button_info_server_response__init
                     (GetButtonInfoServerResponse         *message);
size_t get_button_info_server_response__get_packed_size
                     (const GetButtonInfoServerResponse   *message);
size_t get_button_info_server_response__pack
                     (const GetButtonInfoServerResponse   *message,
                      uint8_t             *out);
size_t get_button_info_server_response__pack_to_buffer
                     (const GetButtonInfoServerResponse   *message,
                      ProtobufCBuffer     *buffer);
GetButtonInfoServerResponse *
       get_button_info_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_button_info_server_response__free_unpacked
                     (GetButtonInfoServerResponse *message,
                      ProtobufCAllocator *allocator);
/* UpdateButtonServerRequest methods */
void   update_button_server_request__init
                     (UpdateButtonServerRequest         *message);
size_t update_button_server_request__get_packed_size
                     (const UpdateButtonServerRequest   *message);
size_t update_button_server_request__pack
                     (const UpdateButtonServerRequest   *message,
                      uint8_t             *out);
size_t update_button_server_request__pack_to_buffer
                     (const UpdateButtonServerRequest   *message,
                      ProtobufCBuffer     *buffer);
UpdateButtonServerRequest *
       update_button_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   update_button_server_request__free_unpacked
                     (UpdateButtonServerRequest *message,
                      ProtobufCAllocator *allocator);
/* UpdateButtonServerResponse methods */
void   update_button_server_response__init
                     (UpdateButtonServerResponse         *message);
size_t update_button_server_response__get_packed_size
                     (const UpdateButtonServerResponse   *message);
size_t update_button_server_response__pack
                     (const UpdateButtonServerResponse   *message,
                      uint8_t             *out);
size_t update_button_server_response__pack_to_buffer
                     (const UpdateButtonServerResponse   *message,
                      ProtobufCBuffer     *buffer);
UpdateButtonServerResponse *
       update_button_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   update_button_server_response__free_unpacked
                     (UpdateButtonServerResponse *message,
                      ProtobufCAllocator *allocator);
/* GroupControlServerRequest methods */
void   group_control_server_request__init
                     (GroupControlServerRequest         *message);
size_t group_control_server_request__get_packed_size
                     (const GroupControlServerRequest   *message);
size_t group_control_server_request__pack
                     (const GroupControlServerRequest   *message,
                      uint8_t             *out);
size_t group_control_server_request__pack_to_buffer
                     (const GroupControlServerRequest   *message,
                      ProtobufCBuffer     *buffer);
GroupControlServerRequest *
       group_control_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   group_control_server_request__free_unpacked
                     (GroupControlServerRequest *message,
                      ProtobufCAllocator *allocator);
/* GroupControlServerResponse methods */
void   group_control_server_response__init
                     (GroupControlServerResponse         *message);
size_t group_control_server_response__get_packed_size
                     (const GroupControlServerResponse   *message);
size_t group_control_server_response__pack
                     (const GroupControlServerResponse   *message,
                      uint8_t             *out);
size_t group_control_server_response__pack_to_buffer
                     (const GroupControlServerResponse   *message,
                      ProtobufCBuffer     *buffer);
GroupControlServerResponse *
       group_control_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   group_control_server_response__free_unpacked
                     (GroupControlServerResponse *message,
                      ProtobufCAllocator *allocator);
/* GetGroupControlInfoServerRequest methods */
void   get_group_control_info_server_request__init
                     (GetGroupControlInfoServerRequest         *message);
size_t get_group_control_info_server_request__get_packed_size
                     (const GetGroupControlInfoServerRequest   *message);
size_t get_group_control_info_server_request__pack
                     (const GetGroupControlInfoServerRequest   *message,
                      uint8_t             *out);
size_t get_group_control_info_server_request__pack_to_buffer
                     (const GetGroupControlInfoServerRequest   *message,
                      ProtobufCBuffer     *buffer);
GetGroupControlInfoServerRequest *
       get_group_control_info_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_group_control_info_server_request__free_unpacked
                     (GetGroupControlInfoServerRequest *message,
                      ProtobufCAllocator *allocator);
/* GetGroupControlInfoServerResponse methods */
void   get_group_control_info_server_response__init
                     (GetGroupControlInfoServerResponse         *message);
size_t get_group_control_info_server_response__get_packed_size
                     (const GetGroupControlInfoServerResponse   *message);
size_t get_group_control_info_server_response__pack
                     (const GetGroupControlInfoServerResponse   *message,
                      uint8_t             *out);
size_t get_group_control_info_server_response__pack_to_buffer
                     (const GetGroupControlInfoServerResponse   *message,
                      ProtobufCBuffer     *buffer);
GetGroupControlInfoServerResponse *
       get_group_control_info_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_group_control_info_server_response__free_unpacked
                     (GetGroupControlInfoServerResponse *message,
                      ProtobufCAllocator *allocator);
/* GetControlsServerRequest methods */
void   get_controls_server_request__init
                     (GetControlsServerRequest         *message);
size_t get_controls_server_request__get_packed_size
                     (const GetControlsServerRequest   *message);
size_t get_controls_server_request__pack
                     (const GetControlsServerRequest   *message,
                      uint8_t             *out);
size_t get_controls_server_request__pack_to_buffer
                     (const GetControlsServerRequest   *message,
                      ProtobufCBuffer     *buffer);
GetControlsServerRequest *
       get_controls_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_controls_server_request__free_unpacked
                     (GetControlsServerRequest *message,
                      ProtobufCAllocator *allocator);
/* GetControlsServerResponse methods */
void   get_controls_server_response__init
                     (GetControlsServerResponse         *message);
size_t get_controls_server_response__get_packed_size
                     (const GetControlsServerResponse   *message);
size_t get_controls_server_response__pack
                     (const GetControlsServerResponse   *message,
                      uint8_t             *out);
size_t get_controls_server_response__pack_to_buffer
                     (const GetControlsServerResponse   *message,
                      ProtobufCBuffer     *buffer);
GetControlsServerResponse *
       get_controls_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_controls_server_response__free_unpacked
                     (GetControlsServerResponse *message,
                      ProtobufCAllocator *allocator);
/* AddGroupControlServerRequest methods */
void   add_group_control_server_request__init
                     (AddGroupControlServerRequest         *message);
size_t add_group_control_server_request__get_packed_size
                     (const AddGroupControlServerRequest   *message);
size_t add_group_control_server_request__pack
                     (const AddGroupControlServerRequest   *message,
                      uint8_t             *out);
size_t add_group_control_server_request__pack_to_buffer
                     (const AddGroupControlServerRequest   *message,
                      ProtobufCBuffer     *buffer);
AddGroupControlServerRequest *
       add_group_control_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   add_group_control_server_request__free_unpacked
                     (AddGroupControlServerRequest *message,
                      ProtobufCAllocator *allocator);
/* AddGroupControlServerResponse methods */
void   add_group_control_server_response__init
                     (AddGroupControlServerResponse         *message);
size_t add_group_control_server_response__get_packed_size
                     (const AddGroupControlServerResponse   *message);
size_t add_group_control_server_response__pack
                     (const AddGroupControlServerResponse   *message,
                      uint8_t             *out);
size_t add_group_control_server_response__pack_to_buffer
                     (const AddGroupControlServerResponse   *message,
                      ProtobufCBuffer     *buffer);
AddGroupControlServerResponse *
       add_group_control_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   add_group_control_server_response__free_unpacked
                     (AddGroupControlServerResponse *message,
                      ProtobufCAllocator *allocator);
/* UpdateGroupControlServerRequest methods */
void   update_group_control_server_request__init
                     (UpdateGroupControlServerRequest         *message);
size_t update_group_control_server_request__get_packed_size
                     (const UpdateGroupControlServerRequest   *message);
size_t update_group_control_server_request__pack
                     (const UpdateGroupControlServerRequest   *message,
                      uint8_t             *out);
size_t update_group_control_server_request__pack_to_buffer
                     (const UpdateGroupControlServerRequest   *message,
                      ProtobufCBuffer     *buffer);
UpdateGroupControlServerRequest *
       update_group_control_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   update_group_control_server_request__free_unpacked
                     (UpdateGroupControlServerRequest *message,
                      ProtobufCAllocator *allocator);
/* UpdateGroupControlServerResponse methods */
void   update_group_control_server_response__init
                     (UpdateGroupControlServerResponse         *message);
size_t update_group_control_server_response__get_packed_size
                     (const UpdateGroupControlServerResponse   *message);
size_t update_group_control_server_response__pack
                     (const UpdateGroupControlServerResponse   *message,
                      uint8_t             *out);
size_t update_group_control_server_response__pack_to_buffer
                     (const UpdateGroupControlServerResponse   *message,
                      ProtobufCBuffer     *buffer);
UpdateGroupControlServerResponse *
       update_group_control_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   update_group_control_server_response__free_unpacked
                     (UpdateGroupControlServerResponse *message,
                      ProtobufCAllocator *allocator);
/* DeleteGroupControlServerRequest methods */
void   delete_group_control_server_request__init
                     (DeleteGroupControlServerRequest         *message);
size_t delete_group_control_server_request__get_packed_size
                     (const DeleteGroupControlServerRequest   *message);
size_t delete_group_control_server_request__pack
                     (const DeleteGroupControlServerRequest   *message,
                      uint8_t             *out);
size_t delete_group_control_server_request__pack_to_buffer
                     (const DeleteGroupControlServerRequest   *message,
                      ProtobufCBuffer     *buffer);
DeleteGroupControlServerRequest *
       delete_group_control_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   delete_group_control_server_request__free_unpacked
                     (DeleteGroupControlServerRequest *message,
                      ProtobufCAllocator *allocator);
/* DeleteGroupControlServerResponse methods */
void   delete_group_control_server_response__init
                     (DeleteGroupControlServerResponse         *message);
size_t delete_group_control_server_response__get_packed_size
                     (const DeleteGroupControlServerResponse   *message);
size_t delete_group_control_server_response__pack
                     (const DeleteGroupControlServerResponse   *message,
                      uint8_t             *out);
size_t delete_group_control_server_response__pack_to_buffer
                     (const DeleteGroupControlServerResponse   *message,
                      ProtobufCBuffer     *buffer);
DeleteGroupControlServerResponse *
       delete_group_control_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   delete_group_control_server_response__free_unpacked
                     (DeleteGroupControlServerResponse *message,
                      ProtobufCAllocator *allocator);
/* LedDriverServerRequest methods */
void   led_driver_server_request__init
                     (LedDriverServerRequest         *message);
size_t led_driver_server_request__get_packed_size
                     (const LedDriverServerRequest   *message);
size_t led_driver_server_request__pack
                     (const LedDriverServerRequest   *message,
                      uint8_t             *out);
size_t led_driver_server_request__pack_to_buffer
                     (const LedDriverServerRequest   *message,
                      ProtobufCBuffer     *buffer);
LedDriverServerRequest *
       led_driver_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   led_driver_server_request__free_unpacked
                     (LedDriverServerRequest *message,
                      ProtobufCAllocator *allocator);
/* LedDriverServerResponse methods */
void   led_driver_server_response__init
                     (LedDriverServerResponse         *message);
size_t led_driver_server_response__get_packed_size
                     (const LedDriverServerResponse   *message);
size_t led_driver_server_response__pack
                     (const LedDriverServerResponse   *message,
                      uint8_t             *out);
size_t led_driver_server_response__pack_to_buffer
                     (const LedDriverServerResponse   *message,
                      ProtobufCBuffer     *buffer);
LedDriverServerResponse *
       led_driver_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   led_driver_server_response__free_unpacked
                     (LedDriverServerResponse *message,
                      ProtobufCAllocator *allocator);
/* GetLedDriverServerRequest methods */
void   get_led_driver_server_request__init
                     (GetLedDriverServerRequest         *message);
size_t get_led_driver_server_request__get_packed_size
                     (const GetLedDriverServerRequest   *message);
size_t get_led_driver_server_request__pack
                     (const GetLedDriverServerRequest   *message,
                      uint8_t             *out);
size_t get_led_driver_server_request__pack_to_buffer
                     (const GetLedDriverServerRequest   *message,
                      ProtobufCBuffer     *buffer);
GetLedDriverServerRequest *
       get_led_driver_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_led_driver_server_request__free_unpacked
                     (GetLedDriverServerRequest *message,
                      ProtobufCAllocator *allocator);
/* GetLedDriverServerResponse methods */
void   get_led_driver_server_response__init
                     (GetLedDriverServerResponse         *message);
size_t get_led_driver_server_response__get_packed_size
                     (const GetLedDriverServerResponse   *message);
size_t get_led_driver_server_response__pack
                     (const GetLedDriverServerResponse   *message,
                      uint8_t             *out);
size_t get_led_driver_server_response__pack_to_buffer
                     (const GetLedDriverServerResponse   *message,
                      ProtobufCBuffer     *buffer);
GetLedDriverServerResponse *
       get_led_driver_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_led_driver_server_response__free_unpacked
                     (GetLedDriverServerResponse *message,
                      ProtobufCAllocator *allocator);
/* GetLedDriverItemServerRequest methods */
void   get_led_driver_item_server_request__init
                     (GetLedDriverItemServerRequest         *message);
size_t get_led_driver_item_server_request__get_packed_size
                     (const GetLedDriverItemServerRequest   *message);
size_t get_led_driver_item_server_request__pack
                     (const GetLedDriverItemServerRequest   *message,
                      uint8_t             *out);
size_t get_led_driver_item_server_request__pack_to_buffer
                     (const GetLedDriverItemServerRequest   *message,
                      ProtobufCBuffer     *buffer);
GetLedDriverItemServerRequest *
       get_led_driver_item_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_led_driver_item_server_request__free_unpacked
                     (GetLedDriverItemServerRequest *message,
                      ProtobufCAllocator *allocator);
/* GetLedDriverItemServerResponse methods */
void   get_led_driver_item_server_response__init
                     (GetLedDriverItemServerResponse         *message);
size_t get_led_driver_item_server_response__get_packed_size
                     (const GetLedDriverItemServerResponse   *message);
size_t get_led_driver_item_server_response__pack
                     (const GetLedDriverItemServerResponse   *message,
                      uint8_t             *out);
size_t get_led_driver_item_server_response__pack_to_buffer
                     (const GetLedDriverItemServerResponse   *message,
                      ProtobufCBuffer     *buffer);
GetLedDriverItemServerResponse *
       get_led_driver_item_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_led_driver_item_server_response__free_unpacked
                     (GetLedDriverItemServerResponse *message,
                      ProtobufCAllocator *allocator);
/* UpdateLedDriverServerRequest methods */
void   update_led_driver_server_request__init
                     (UpdateLedDriverServerRequest         *message);
size_t update_led_driver_server_request__get_packed_size
                     (const UpdateLedDriverServerRequest   *message);
size_t update_led_driver_server_request__pack
                     (const UpdateLedDriverServerRequest   *message,
                      uint8_t             *out);
size_t update_led_driver_server_request__pack_to_buffer
                     (const UpdateLedDriverServerRequest   *message,
                      ProtobufCBuffer     *buffer);
UpdateLedDriverServerRequest *
       update_led_driver_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   update_led_driver_server_request__free_unpacked
                     (UpdateLedDriverServerRequest *message,
                      ProtobufCAllocator *allocator);
/* UpdateLedDriverServerResponse methods */
void   update_led_driver_server_response__init
                     (UpdateLedDriverServerResponse         *message);
size_t update_led_driver_server_response__get_packed_size
                     (const UpdateLedDriverServerResponse   *message);
size_t update_led_driver_server_response__pack
                     (const UpdateLedDriverServerResponse   *message,
                      uint8_t             *out);
size_t update_led_driver_server_response__pack_to_buffer
                     (const UpdateLedDriverServerResponse   *message,
                      ProtobufCBuffer     *buffer);
UpdateLedDriverServerResponse *
       update_led_driver_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   update_led_driver_server_response__free_unpacked
                     (UpdateLedDriverServerResponse *message,
                      ProtobufCAllocator *allocator);
/* UpdateLedDriverItemServerRequest methods */
void   update_led_driver_item_server_request__init
                     (UpdateLedDriverItemServerRequest         *message);
size_t update_led_driver_item_server_request__get_packed_size
                     (const UpdateLedDriverItemServerRequest   *message);
size_t update_led_driver_item_server_request__pack
                     (const UpdateLedDriverItemServerRequest   *message,
                      uint8_t             *out);
size_t update_led_driver_item_server_request__pack_to_buffer
                     (const UpdateLedDriverItemServerRequest   *message,
                      ProtobufCBuffer     *buffer);
UpdateLedDriverItemServerRequest *
       update_led_driver_item_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   update_led_driver_item_server_request__free_unpacked
                     (UpdateLedDriverItemServerRequest *message,
                      ProtobufCAllocator *allocator);
/* UpdateLedDriverItemServerResponse methods */
void   update_led_driver_item_server_response__init
                     (UpdateLedDriverItemServerResponse         *message);
size_t update_led_driver_item_server_response__get_packed_size
                     (const UpdateLedDriverItemServerResponse   *message);
size_t update_led_driver_item_server_response__pack
                     (const UpdateLedDriverItemServerResponse   *message,
                      uint8_t             *out);
size_t update_led_driver_item_server_response__pack_to_buffer
                     (const UpdateLedDriverItemServerResponse   *message,
                      ProtobufCBuffer     *buffer);
UpdateLedDriverItemServerResponse *
       update_led_driver_item_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   update_led_driver_item_server_response__free_unpacked
                     (UpdateLedDriverItemServerResponse *message,
                      ProtobufCAllocator *allocator);
/* TouchPanelChangeComponentServerRequest methods */
void   touch_panel_change_component_server_request__init
                     (TouchPanelChangeComponentServerRequest         *message);
size_t touch_panel_change_component_server_request__get_packed_size
                     (const TouchPanelChangeComponentServerRequest   *message);
size_t touch_panel_change_component_server_request__pack
                     (const TouchPanelChangeComponentServerRequest   *message,
                      uint8_t             *out);
size_t touch_panel_change_component_server_request__pack_to_buffer
                     (const TouchPanelChangeComponentServerRequest   *message,
                      ProtobufCBuffer     *buffer);
TouchPanelChangeComponentServerRequest *
       touch_panel_change_component_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   touch_panel_change_component_server_request__free_unpacked
                     (TouchPanelChangeComponentServerRequest *message,
                      ProtobufCAllocator *allocator);
/* TouchPanelControlSwitcherServerRequest methods */
void   touch_panel_control_switcher_server_request__init
                     (TouchPanelControlSwitcherServerRequest         *message);
size_t touch_panel_control_switcher_server_request__get_packed_size
                     (const TouchPanelControlSwitcherServerRequest   *message);
size_t touch_panel_control_switcher_server_request__pack
                     (const TouchPanelControlSwitcherServerRequest   *message,
                      uint8_t             *out);
size_t touch_panel_control_switcher_server_request__pack_to_buffer
                     (const TouchPanelControlSwitcherServerRequest   *message,
                      ProtobufCBuffer     *buffer);
TouchPanelControlSwitcherServerRequest *
       touch_panel_control_switcher_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   touch_panel_control_switcher_server_request__free_unpacked
                     (TouchPanelControlSwitcherServerRequest *message,
                      ProtobufCAllocator *allocator);
/* TouchPanelUpdateSwitcherServerRequest methods */
void   touch_panel_update_switcher_server_request__init
                     (TouchPanelUpdateSwitcherServerRequest         *message);
size_t touch_panel_update_switcher_server_request__get_packed_size
                     (const TouchPanelUpdateSwitcherServerRequest   *message);
size_t touch_panel_update_switcher_server_request__pack
                     (const TouchPanelUpdateSwitcherServerRequest   *message,
                      uint8_t             *out);
size_t touch_panel_update_switcher_server_request__pack_to_buffer
                     (const TouchPanelUpdateSwitcherServerRequest   *message,
                      ProtobufCBuffer     *buffer);
TouchPanelUpdateSwitcherServerRequest *
       touch_panel_update_switcher_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   touch_panel_update_switcher_server_request__free_unpacked
                     (TouchPanelUpdateSwitcherServerRequest *message,
                      ProtobufCAllocator *allocator);
/* TouchPanelControlCurtainSwitcherServerRequest methods */
void   touch_panel_control_curtain_switcher_server_request__init
                     (TouchPanelControlCurtainSwitcherServerRequest         *message);
size_t touch_panel_control_curtain_switcher_server_request__get_packed_size
                     (const TouchPanelControlCurtainSwitcherServerRequest   *message);
size_t touch_panel_control_curtain_switcher_server_request__pack
                     (const TouchPanelControlCurtainSwitcherServerRequest   *message,
                      uint8_t             *out);
size_t touch_panel_control_curtain_switcher_server_request__pack_to_buffer
                     (const TouchPanelControlCurtainSwitcherServerRequest   *message,
                      ProtobufCBuffer     *buffer);
TouchPanelControlCurtainSwitcherServerRequest *
       touch_panel_control_curtain_switcher_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   touch_panel_control_curtain_switcher_server_request__free_unpacked
                     (TouchPanelControlCurtainSwitcherServerRequest *message,
                      ProtobufCAllocator *allocator);
/* TouchPanelUpdateCurtainSwitcherServerRequest methods */
void   touch_panel_update_curtain_switcher_server_request__init
                     (TouchPanelUpdateCurtainSwitcherServerRequest         *message);
size_t touch_panel_update_curtain_switcher_server_request__get_packed_size
                     (const TouchPanelUpdateCurtainSwitcherServerRequest   *message);
size_t touch_panel_update_curtain_switcher_server_request__pack
                     (const TouchPanelUpdateCurtainSwitcherServerRequest   *message,
                      uint8_t             *out);
size_t touch_panel_update_curtain_switcher_server_request__pack_to_buffer
                     (const TouchPanelUpdateCurtainSwitcherServerRequest   *message,
                      ProtobufCBuffer     *buffer);
TouchPanelUpdateCurtainSwitcherServerRequest *
       touch_panel_update_curtain_switcher_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   touch_panel_update_curtain_switcher_server_request__free_unpacked
                     (TouchPanelUpdateCurtainSwitcherServerRequest *message,
                      ProtobufCAllocator *allocator);
/* TouchPanelUpdateSceneServerRequest methods */
void   touch_panel_update_scene_server_request__init
                     (TouchPanelUpdateSceneServerRequest         *message);
size_t touch_panel_update_scene_server_request__get_packed_size
                     (const TouchPanelUpdateSceneServerRequest   *message);
size_t touch_panel_update_scene_server_request__pack
                     (const TouchPanelUpdateSceneServerRequest   *message,
                      uint8_t             *out);
size_t touch_panel_update_scene_server_request__pack_to_buffer
                     (const TouchPanelUpdateSceneServerRequest   *message,
                      ProtobufCBuffer     *buffer);
TouchPanelUpdateSceneServerRequest *
       touch_panel_update_scene_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   touch_panel_update_scene_server_request__free_unpacked
                     (TouchPanelUpdateSceneServerRequest *message,
                      ProtobufCAllocator *allocator);
/* TouchPanelControlLedDriverServerRequest methods */
void   touch_panel_control_led_driver_server_request__init
                     (TouchPanelControlLedDriverServerRequest         *message);
size_t touch_panel_control_led_driver_server_request__get_packed_size
                     (const TouchPanelControlLedDriverServerRequest   *message);
size_t touch_panel_control_led_driver_server_request__pack
                     (const TouchPanelControlLedDriverServerRequest   *message,
                      uint8_t             *out);
size_t touch_panel_control_led_driver_server_request__pack_to_buffer
                     (const TouchPanelControlLedDriverServerRequest   *message,
                      ProtobufCBuffer     *buffer);
TouchPanelControlLedDriverServerRequest *
       touch_panel_control_led_driver_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   touch_panel_control_led_driver_server_request__free_unpacked
                     (TouchPanelControlLedDriverServerRequest *message,
                      ProtobufCAllocator *allocator);
/* TouchPanelUpdateLedDriverServerRequest methods */
void   touch_panel_update_led_driver_server_request__init
                     (TouchPanelUpdateLedDriverServerRequest         *message);
size_t touch_panel_update_led_driver_server_request__get_packed_size
                     (const TouchPanelUpdateLedDriverServerRequest   *message);
size_t touch_panel_update_led_driver_server_request__pack
                     (const TouchPanelUpdateLedDriverServerRequest   *message,
                      uint8_t             *out);
size_t touch_panel_update_led_driver_server_request__pack_to_buffer
                     (const TouchPanelUpdateLedDriverServerRequest   *message,
                      ProtobufCBuffer     *buffer);
TouchPanelUpdateLedDriverServerRequest *
       touch_panel_update_led_driver_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   touch_panel_update_led_driver_server_request__free_unpacked
                     (TouchPanelUpdateLedDriverServerRequest *message,
                      ProtobufCAllocator *allocator);
/* CurtainServerRequest methods */
void   curtain_server_request__init
                     (CurtainServerRequest         *message);
size_t curtain_server_request__get_packed_size
                     (const CurtainServerRequest   *message);
size_t curtain_server_request__pack
                     (const CurtainServerRequest   *message,
                      uint8_t             *out);
size_t curtain_server_request__pack_to_buffer
                     (const CurtainServerRequest   *message,
                      ProtobufCBuffer     *buffer);
CurtainServerRequest *
       curtain_server_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   curtain_server_request__free_unpacked
                     (CurtainServerRequest *message,
                      ProtobufCAllocator *allocator);
/* CurtainServerResponse methods */
void   curtain_server_response__init
                     (CurtainServerResponse         *message);
size_t curtain_server_response__get_packed_size
                     (const CurtainServerResponse   *message);
size_t curtain_server_response__pack
                     (const CurtainServerResponse   *message,
                      uint8_t             *out);
size_t curtain_server_response__pack_to_buffer
                     (const CurtainServerResponse   *message,
                      ProtobufCBuffer     *buffer);
CurtainServerResponse *
       curtain_server_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   curtain_server_response__free_unpacked
                     (CurtainServerResponse *message,
                      ProtobufCAllocator *allocator);
/* AuthServerMessage methods */
void   auth_server_message__init
                     (AuthServerMessage         *message);
size_t auth_server_message__get_packed_size
                     (const AuthServerMessage   *message);
size_t auth_server_message__pack
                     (const AuthServerMessage   *message,
                      uint8_t             *out);
size_t auth_server_message__pack_to_buffer
                     (const AuthServerMessage   *message,
                      ProtobufCBuffer     *buffer);
AuthServerMessage *
       auth_server_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   auth_server_message__free_unpacked
                     (AuthServerMessage *message,
                      ProtobufCAllocator *allocator);
/* UserServerMessage methods */
void   user_server_message__init
                     (UserServerMessage         *message);
size_t user_server_message__get_packed_size
                     (const UserServerMessage   *message);
size_t user_server_message__pack
                     (const UserServerMessage   *message,
                      uint8_t             *out);
size_t user_server_message__pack_to_buffer
                     (const UserServerMessage   *message,
                      ProtobufCBuffer     *buffer);
UserServerMessage *
       user_server_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   user_server_message__free_unpacked
                     (UserServerMessage *message,
                      ProtobufCAllocator *allocator);
/* HomeServerMessage methods */
void   home_server_message__init
                     (HomeServerMessage         *message);
size_t home_server_message__get_packed_size
                     (const HomeServerMessage   *message);
size_t home_server_message__pack
                     (const HomeServerMessage   *message,
                      uint8_t             *out);
size_t home_server_message__pack_to_buffer
                     (const HomeServerMessage   *message,
                      ProtobufCBuffer     *buffer);
HomeServerMessage *
       home_server_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   home_server_message__free_unpacked
                     (HomeServerMessage *message,
                      ProtobufCAllocator *allocator);
/* RoomServerMessage methods */
void   room_server_message__init
                     (RoomServerMessage         *message);
size_t room_server_message__get_packed_size
                     (const RoomServerMessage   *message);
size_t room_server_message__pack
                     (const RoomServerMessage   *message,
                      uint8_t             *out);
size_t room_server_message__pack_to_buffer
                     (const RoomServerMessage   *message,
                      ProtobufCBuffer     *buffer);
RoomServerMessage *
       room_server_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   room_server_message__free_unpacked
                     (RoomServerMessage *message,
                      ProtobufCAllocator *allocator);
/* DeviceServerMessage methods */
void   device_server_message__init
                     (DeviceServerMessage         *message);
size_t device_server_message__get_packed_size
                     (const DeviceServerMessage   *message);
size_t device_server_message__pack
                     (const DeviceServerMessage   *message,
                      uint8_t             *out);
size_t device_server_message__pack_to_buffer
                     (const DeviceServerMessage   *message,
                      ProtobufCBuffer     *buffer);
DeviceServerMessage *
       device_server_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   device_server_message__free_unpacked
                     (DeviceServerMessage *message,
                      ProtobufCAllocator *allocator);
/* SwitcherServerMessage methods */
void   switcher_server_message__init
                     (SwitcherServerMessage         *message);
size_t switcher_server_message__get_packed_size
                     (const SwitcherServerMessage   *message);
size_t switcher_server_message__pack
                     (const SwitcherServerMessage   *message,
                      uint8_t             *out);
size_t switcher_server_message__pack_to_buffer
                     (const SwitcherServerMessage   *message,
                      ProtobufCBuffer     *buffer);
SwitcherServerMessage *
       switcher_server_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   switcher_server_message__free_unpacked
                     (SwitcherServerMessage *message,
                      ProtobufCAllocator *allocator);
/* CurtainSwitcherServerMessage methods */
void   curtain_switcher_server_message__init
                     (CurtainSwitcherServerMessage         *message);
size_t curtain_switcher_server_message__get_packed_size
                     (const CurtainSwitcherServerMessage   *message);
size_t curtain_switcher_server_message__pack
                     (const CurtainSwitcherServerMessage   *message,
                      uint8_t             *out);
size_t curtain_switcher_server_message__pack_to_buffer
                     (const CurtainSwitcherServerMessage   *message,
                      ProtobufCBuffer     *buffer);
CurtainSwitcherServerMessage *
       curtain_switcher_server_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   curtain_switcher_server_message__free_unpacked
                     (CurtainSwitcherServerMessage *message,
                      ProtobufCAllocator *allocator);
/* MeterServerMessage methods */
void   meter_server_message__init
                     (MeterServerMessage         *message);
size_t meter_server_message__get_packed_size
                     (const MeterServerMessage   *message);
size_t meter_server_message__pack
                     (const MeterServerMessage   *message,
                      uint8_t             *out);
size_t meter_server_message__pack_to_buffer
                     (const MeterServerMessage   *message,
                      ProtobufCBuffer     *buffer);
MeterServerMessage *
       meter_server_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   meter_server_message__free_unpacked
                     (MeterServerMessage *message,
                      ProtobufCAllocator *allocator);
/* AirConditionerServerMessage methods */
void   air_conditioner_server_message__init
                     (AirConditionerServerMessage         *message);
size_t air_conditioner_server_message__get_packed_size
                     (const AirConditionerServerMessage   *message);
size_t air_conditioner_server_message__pack
                     (const AirConditionerServerMessage   *message,
                      uint8_t             *out);
size_t air_conditioner_server_message__pack_to_buffer
                     (const AirConditionerServerMessage   *message,
                      ProtobufCBuffer     *buffer);
AirConditionerServerMessage *
       air_conditioner_server_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   air_conditioner_server_message__free_unpacked
                     (AirConditionerServerMessage *message,
                      ProtobufCAllocator *allocator);
/* RemoteServerMessage methods */
void   remote_server_message__init
                     (RemoteServerMessage         *message);
size_t remote_server_message__get_packed_size
                     (const RemoteServerMessage   *message);
size_t remote_server_message__pack
                     (const RemoteServerMessage   *message,
                      uint8_t             *out);
size_t remote_server_message__pack_to_buffer
                     (const RemoteServerMessage   *message,
                      ProtobufCBuffer     *buffer);
RemoteServerMessage *
       remote_server_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   remote_server_message__free_unpacked
                     (RemoteServerMessage *message,
                      ProtobufCAllocator *allocator);
/* SceneServerMessage methods */
void   scene_server_message__init
                     (SceneServerMessage         *message);
size_t scene_server_message__get_packed_size
                     (const SceneServerMessage   *message);
size_t scene_server_message__pack
                     (const SceneServerMessage   *message,
                      uint8_t             *out);
size_t scene_server_message__pack_to_buffer
                     (const SceneServerMessage   *message,
                      ProtobufCBuffer     *buffer);
SceneServerMessage *
       scene_server_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   scene_server_message__free_unpacked
                     (SceneServerMessage *message,
                      ProtobufCAllocator *allocator);
/* GeneralTabServerMessage methods */
void   general_tab_server_message__init
                     (GeneralTabServerMessage         *message);
size_t general_tab_server_message__get_packed_size
                     (const GeneralTabServerMessage   *message);
size_t general_tab_server_message__pack
                     (const GeneralTabServerMessage   *message,
                      uint8_t             *out);
size_t general_tab_server_message__pack_to_buffer
                     (const GeneralTabServerMessage   *message,
                      ProtobufCBuffer     *buffer);
GeneralTabServerMessage *
       general_tab_server_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   general_tab_server_message__free_unpacked
                     (GeneralTabServerMessage *message,
                      ProtobufCAllocator *allocator);
/* OnChangedServerMessage methods */
void   on_changed_server_message__init
                     (OnChangedServerMessage         *message);
size_t on_changed_server_message__get_packed_size
                     (const OnChangedServerMessage   *message);
size_t on_changed_server_message__pack
                     (const OnChangedServerMessage   *message,
                      uint8_t             *out);
size_t on_changed_server_message__pack_to_buffer
                     (const OnChangedServerMessage   *message,
                      ProtobufCBuffer     *buffer);
OnChangedServerMessage *
       on_changed_server_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   on_changed_server_message__free_unpacked
                     (OnChangedServerMessage *message,
                      ProtobufCAllocator *allocator);
/* SimulatorServerMessage methods */
void   simulator_server_message__init
                     (SimulatorServerMessage         *message);
size_t simulator_server_message__get_packed_size
                     (const SimulatorServerMessage   *message);
size_t simulator_server_message__pack
                     (const SimulatorServerMessage   *message,
                      uint8_t             *out);
size_t simulator_server_message__pack_to_buffer
                     (const SimulatorServerMessage   *message,
                      ProtobufCBuffer     *buffer);
SimulatorServerMessage *
       simulator_server_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   simulator_server_message__free_unpacked
                     (SimulatorServerMessage *message,
                      ProtobufCAllocator *allocator);
/* MotionServerMessage methods */
void   motion_server_message__init
                     (MotionServerMessage         *message);
size_t motion_server_message__get_packed_size
                     (const MotionServerMessage   *message);
size_t motion_server_message__pack
                     (const MotionServerMessage   *message,
                      uint8_t             *out);
size_t motion_server_message__pack_to_buffer
                     (const MotionServerMessage   *message,
                      ProtobufCBuffer     *buffer);
MotionServerMessage *
       motion_server_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   motion_server_message__free_unpacked
                     (MotionServerMessage *message,
                      ProtobufCAllocator *allocator);
/* HomekitServerMessage methods */
void   homekit_server_message__init
                     (HomekitServerMessage         *message);
size_t homekit_server_message__get_packed_size
                     (const HomekitServerMessage   *message);
size_t homekit_server_message__pack
                     (const HomekitServerMessage   *message,
                      uint8_t             *out);
size_t homekit_server_message__pack_to_buffer
                     (const HomekitServerMessage   *message,
                      ProtobufCBuffer     *buffer);
HomekitServerMessage *
       homekit_server_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   homekit_server_message__free_unpacked
                     (HomekitServerMessage *message,
                      ProtobufCAllocator *allocator);
/* ProjectServerMessage methods */
void   project_server_message__init
                     (ProjectServerMessage         *message);
size_t project_server_message__get_packed_size
                     (const ProjectServerMessage   *message);
size_t project_server_message__pack
                     (const ProjectServerMessage   *message,
                      uint8_t             *out);
size_t project_server_message__pack_to_buffer
                     (const ProjectServerMessage   *message,
                      ProtobufCBuffer     *buffer);
ProjectServerMessage *
       project_server_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   project_server_message__free_unpacked
                     (ProjectServerMessage *message,
                      ProtobufCAllocator *allocator);
/* BuildingServerMessage methods */
void   building_server_message__init
                     (BuildingServerMessage         *message);
size_t building_server_message__get_packed_size
                     (const BuildingServerMessage   *message);
size_t building_server_message__pack
                     (const BuildingServerMessage   *message,
                      uint8_t             *out);
size_t building_server_message__pack_to_buffer
                     (const BuildingServerMessage   *message,
                      ProtobufCBuffer     *buffer);
BuildingServerMessage *
       building_server_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   building_server_message__free_unpacked
                     (BuildingServerMessage *message,
                      ProtobufCAllocator *allocator);
/* FloorServerMessage methods */
void   floor_server_message__init
                     (FloorServerMessage         *message);
size_t floor_server_message__get_packed_size
                     (const FloorServerMessage   *message);
size_t floor_server_message__pack
                     (const FloorServerMessage   *message,
                      uint8_t             *out);
size_t floor_server_message__pack_to_buffer
                     (const FloorServerMessage   *message,
                      ProtobufCBuffer     *buffer);
FloorServerMessage *
       floor_server_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   floor_server_message__free_unpacked
                     (FloorServerMessage *message,
                      ProtobufCAllocator *allocator);
/* ApartmentServerMessage methods */
void   apartment_server_message__init
                     (ApartmentServerMessage         *message);
size_t apartment_server_message__get_packed_size
                     (const ApartmentServerMessage   *message);
size_t apartment_server_message__pack
                     (const ApartmentServerMessage   *message,
                      uint8_t             *out);
size_t apartment_server_message__pack_to_buffer
                     (const ApartmentServerMessage   *message,
                      ProtobufCBuffer     *buffer);
ApartmentServerMessage *
       apartment_server_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   apartment_server_message__free_unpacked
                     (ApartmentServerMessage *message,
                      ProtobufCAllocator *allocator);
/* UserHomeServerMessage methods */
void   user_home_server_message__init
                     (UserHomeServerMessage         *message);
size_t user_home_server_message__get_packed_size
                     (const UserHomeServerMessage   *message);
size_t user_home_server_message__pack
                     (const UserHomeServerMessage   *message,
                      uint8_t             *out);
size_t user_home_server_message__pack_to_buffer
                     (const UserHomeServerMessage   *message,
                      ProtobufCBuffer     *buffer);
UserHomeServerMessage *
       user_home_server_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   user_home_server_message__free_unpacked
                     (UserHomeServerMessage *message,
                      ProtobufCAllocator *allocator);
/* InboxServerMessage methods */
void   inbox_server_message__init
                     (InboxServerMessage         *message);
size_t inbox_server_message__get_packed_size
                     (const InboxServerMessage   *message);
size_t inbox_server_message__pack
                     (const InboxServerMessage   *message,
                      uint8_t             *out);
size_t inbox_server_message__pack_to_buffer
                     (const InboxServerMessage   *message,
                      ProtobufCBuffer     *buffer);
InboxServerMessage *
       inbox_server_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   inbox_server_message__free_unpacked
                     (InboxServerMessage *message,
                      ProtobufCAllocator *allocator);
/* SettingServerMessage methods */
void   setting_server_message__init
                     (SettingServerMessage         *message);
size_t setting_server_message__get_packed_size
                     (const SettingServerMessage   *message);
size_t setting_server_message__pack
                     (const SettingServerMessage   *message,
                      uint8_t             *out);
size_t setting_server_message__pack_to_buffer
                     (const SettingServerMessage   *message,
                      ProtobufCBuffer     *buffer);
SettingServerMessage *
       setting_server_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   setting_server_message__free_unpacked
                     (SettingServerMessage *message,
                      ProtobufCAllocator *allocator);
/* ButtonServerMessage methods */
void   button_server_message__init
                     (ButtonServerMessage         *message);
size_t button_server_message__get_packed_size
                     (const ButtonServerMessage   *message);
size_t button_server_message__pack
                     (const ButtonServerMessage   *message,
                      uint8_t             *out);
size_t button_server_message__pack_to_buffer
                     (const ButtonServerMessage   *message,
                      ProtobufCBuffer     *buffer);
ButtonServerMessage *
       button_server_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   button_server_message__free_unpacked
                     (ButtonServerMessage *message,
                      ProtobufCAllocator *allocator);
/* GroupControlServerMessage methods */
void   group_control_server_message__init
                     (GroupControlServerMessage         *message);
size_t group_control_server_message__get_packed_size
                     (const GroupControlServerMessage   *message);
size_t group_control_server_message__pack
                     (const GroupControlServerMessage   *message,
                      uint8_t             *out);
size_t group_control_server_message__pack_to_buffer
                     (const GroupControlServerMessage   *message,
                      ProtobufCBuffer     *buffer);
GroupControlServerMessage *
       group_control_server_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   group_control_server_message__free_unpacked
                     (GroupControlServerMessage *message,
                      ProtobufCAllocator *allocator);
/* LedDriverServerMessage methods */
void   led_driver_server_message__init
                     (LedDriverServerMessage         *message);
size_t led_driver_server_message__get_packed_size
                     (const LedDriverServerMessage   *message);
size_t led_driver_server_message__pack
                     (const LedDriverServerMessage   *message,
                      uint8_t             *out);
size_t led_driver_server_message__pack_to_buffer
                     (const LedDriverServerMessage   *message,
                      ProtobufCBuffer     *buffer);
LedDriverServerMessage *
       led_driver_server_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   led_driver_server_message__free_unpacked
                     (LedDriverServerMessage *message,
                      ProtobufCAllocator *allocator);
/* TouchPanelServerMessage methods */
void   touch_panel_server_message__init
                     (TouchPanelServerMessage         *message);
size_t touch_panel_server_message__get_packed_size
                     (const TouchPanelServerMessage   *message);
size_t touch_panel_server_message__pack
                     (const TouchPanelServerMessage   *message,
                      uint8_t             *out);
size_t touch_panel_server_message__pack_to_buffer
                     (const TouchPanelServerMessage   *message,
                      ProtobufCBuffer     *buffer);
TouchPanelServerMessage *
       touch_panel_server_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   touch_panel_server_message__free_unpacked
                     (TouchPanelServerMessage *message,
                      ProtobufCAllocator *allocator);
/* CurtainServerMessage methods */
void   curtain_server_message__init
                     (CurtainServerMessage         *message);
size_t curtain_server_message__get_packed_size
                     (const CurtainServerMessage   *message);
size_t curtain_server_message__pack
                     (const CurtainServerMessage   *message,
                      uint8_t             *out);
size_t curtain_server_message__pack_to_buffer
                     (const CurtainServerMessage   *message,
                      ProtobufCBuffer     *buffer);
CurtainServerMessage *
       curtain_server_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   curtain_server_message__free_unpacked
                     (CurtainServerMessage *message,
                      ProtobufCAllocator *allocator);
/* ServerMessage methods */
void   server_message__init
                     (ServerMessage         *message);
size_t server_message__get_packed_size
                     (const ServerMessage   *message);
size_t server_message__pack
                     (const ServerMessage   *message,
                      uint8_t             *out);
size_t server_message__pack_to_buffer
                     (const ServerMessage   *message,
                      ProtobufCBuffer     *buffer);
ServerMessage *
       server_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   server_message__free_unpacked
                     (ServerMessage *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*LoginServerRequest_Closure)
                 (const LoginServerRequest *message,
                  void *closure_data);
typedef void (*LoginServerResponse_Closure)
                 (const LoginServerResponse *message,
                  void *closure_data);
typedef void (*RefreshTokenServerRequest_Closure)
                 (const RefreshTokenServerRequest *message,
                  void *closure_data);
typedef void (*RefreshTokenServerResponse_Closure)
                 (const RefreshTokenServerResponse *message,
                  void *closure_data);
typedef void (*SendCodeServerRequest_Closure)
                 (const SendCodeServerRequest *message,
                  void *closure_data);
typedef void (*SendCodeServerResponse_Closure)
                 (const SendCodeServerResponse *message,
                  void *closure_data);
typedef void (*VerifyCodeServerRequest_Closure)
                 (const VerifyCodeServerRequest *message,
                  void *closure_data);
typedef void (*VerifyCodeServerResponse_Closure)
                 (const VerifyCodeServerResponse *message,
                  void *closure_data);
typedef void (*GetUserInfoServerRequest_Closure)
                 (const GetUserInfoServerRequest *message,
                  void *closure_data);
typedef void (*GetUserInfoServerResponse_Closure)
                 (const GetUserInfoServerResponse *message,
                  void *closure_data);
typedef void (*UpdateUserInfoServerRequest_Closure)
                 (const UpdateUserInfoServerRequest *message,
                  void *closure_data);
typedef void (*UpdateUserInfoServerResponse_Closure)
                 (const UpdateUserInfoServerResponse *message,
                  void *closure_data);
typedef void (*SetOnesignalForUserServerRequest_Closure)
                 (const SetOnesignalForUserServerRequest *message,
                  void *closure_data);
typedef void (*SetOnesignalForUserServerResponse_Closure)
                 (const SetOnesignalForUserServerResponse *message,
                  void *closure_data);
typedef void (*ChangedHomeForUserServerRequest_Closure)
                 (const ChangedHomeForUserServerRequest *message,
                  void *closure_data);
typedef void (*ChangedHomeForUserServerResponse_Closure)
                 (const ChangedHomeForUserServerResponse *message,
                  void *closure_data);
typedef void (*GetUsersServerRequest_Closure)
                 (const GetUsersServerRequest *message,
                  void *closure_data);
typedef void (*GetUsersServerResponse_Closure)
                 (const GetUsersServerResponse *message,
                  void *closure_data);
typedef void (*SearchUserServerRequest_Closure)
                 (const SearchUserServerRequest *message,
                  void *closure_data);
typedef void (*SearchUserServerResponse_Closure)
                 (const SearchUserServerResponse *message,
                  void *closure_data);
typedef void (*AvatarUploadServerRequest_Closure)
                 (const AvatarUploadServerRequest *message,
                  void *closure_data);
typedef void (*AvatarUploadServerResponse_Closure)
                 (const AvatarUploadServerResponse *message,
                  void *closure_data);
typedef void (*GetUserOtpServerRequest_Closure)
                 (const GetUserOtpServerRequest *message,
                  void *closure_data);
typedef void (*GetUserOtpServerResponse_Closure)
                 (const GetUserOtpServerResponse *message,
                  void *closure_data);
typedef void (*GetHomesServerRequest_Closure)
                 (const GetHomesServerRequest *message,
                  void *closure_data);
typedef void (*GetHomesServerResponse_Closure)
                 (const GetHomesServerResponse *message,
                  void *closure_data);
typedef void (*AddHomeServerRequest_Closure)
                 (const AddHomeServerRequest *message,
                  void *closure_data);
typedef void (*AddHomeServerResponse_Closure)
                 (const AddHomeServerResponse *message,
                  void *closure_data);
typedef void (*UpdateHomeServerRequest_Closure)
                 (const UpdateHomeServerRequest *message,
                  void *closure_data);
typedef void (*UpdateHomeServerResponse_Closure)
                 (const UpdateHomeServerResponse *message,
                  void *closure_data);
typedef void (*DeleteHomeServerRequest_Closure)
                 (const DeleteHomeServerRequest *message,
                  void *closure_data);
typedef void (*DeleteHomeServerResponse_Closure)
                 (const DeleteHomeServerResponse *message,
                  void *closure_data);
typedef void (*GetCitizenInfoServerRequest_Closure)
                 (const GetCitizenInfoServerRequest *message,
                  void *closure_data);
typedef void (*GetCitizenInfoServerResponse_Closure)
                 (const GetCitizenInfoServerResponse *message,
                  void *closure_data);
typedef void (*SetCitizenServerRequest_Closure)
                 (const SetCitizenServerRequest *message,
                  void *closure_data);
typedef void (*SetCitizenServerResponse_Closure)
                 (const SetCitizenServerResponse *message,
                  void *closure_data);
typedef void (*SetGpsForHomeServerRequest_Closure)
                 (const SetGpsForHomeServerRequest *message,
                  void *closure_data);
typedef void (*SetGpsForHomeServerResponse_Closure)
                 (const SetGpsForHomeServerResponse *message,
                  void *closure_data);
typedef void (*GetHomeInfoServerRequest_Closure)
                 (const GetHomeInfoServerRequest *message,
                  void *closure_data);
typedef void (*GetHomeInfoServerResponse_Closure)
                 (const GetHomeInfoServerResponse *message,
                  void *closure_data);
typedef void (*GetHomesByPhoneServerRequest_Closure)
                 (const GetHomesByPhoneServerRequest *message,
                  void *closure_data);
typedef void (*GetHomesByPhoneServerResponse_Closure)
                 (const GetHomesByPhoneServerResponse *message,
                  void *closure_data);
typedef void (*UploadHomeBackgroundServerRequest_Closure)
                 (const UploadHomeBackgroundServerRequest *message,
                  void *closure_data);
typedef void (*UploadHomeBackgroundServerResponse_Closure)
                 (const UploadHomeBackgroundServerResponse *message,
                  void *closure_data);
typedef void (*GetRoomsServerRequest_Closure)
                 (const GetRoomsServerRequest *message,
                  void *closure_data);
typedef void (*GetRoomsServerResponse_Closure)
                 (const GetRoomsServerResponse *message,
                  void *closure_data);
typedef void (*AddRoomServerRequest_Closure)
                 (const AddRoomServerRequest *message,
                  void *closure_data);
typedef void (*AddRoomServerResponse_Closure)
                 (const AddRoomServerResponse *message,
                  void *closure_data);
typedef void (*DeleteRoomServerRequest_Closure)
                 (const DeleteRoomServerRequest *message,
                  void *closure_data);
typedef void (*DeleteRoomServerResponse_Closure)
                 (const DeleteRoomServerResponse *message,
                  void *closure_data);
typedef void (*UpdateRoomServerRequest_Closure)
                 (const UpdateRoomServerRequest *message,
                  void *closure_data);
typedef void (*UpdateRoomServerResponse_Closure)
                 (const UpdateRoomServerResponse *message,
                  void *closure_data);
typedef void (*UploadRoomBackgroundServerRequest_Closure)
                 (const UploadRoomBackgroundServerRequest *message,
                  void *closure_data);
typedef void (*UploadRoomBackgroundServerResponse_Closure)
                 (const UploadRoomBackgroundServerResponse *message,
                  void *closure_data);
typedef void (*GetDevicesServerRequest_Closure)
                 (const GetDevicesServerRequest *message,
                  void *closure_data);
typedef void (*GetDevicesServerResponse_Closure)
                 (const GetDevicesServerResponse *message,
                  void *closure_data);
typedef void (*GetDeviceServerRequest_Closure)
                 (const GetDeviceServerRequest *message,
                  void *closure_data);
typedef void (*GetDeviceServerResponse_Closure)
                 (const GetDeviceServerResponse *message,
                  void *closure_data);
typedef void (*AddDevicesServerRequest_Closure)
                 (const AddDevicesServerRequest *message,
                  void *closure_data);
typedef void (*AddDevicesServerResponse_Closure)
                 (const AddDevicesServerResponse *message,
                  void *closure_data);
typedef void (*UpdateDeviceServerRequest_Closure)
                 (const UpdateDeviceServerRequest *message,
                  void *closure_data);
typedef void (*UpdateDeviceServerResponse_Closure)
                 (const UpdateDeviceServerResponse *message,
                  void *closure_data);
typedef void (*DeleteDeviceServerRequest_Closure)
                 (const DeleteDeviceServerRequest *message,
                  void *closure_data);
typedef void (*DeleteDeviceServerResponse_Closure)
                 (const DeleteDeviceServerResponse *message,
                  void *closure_data);
typedef void (*GetFirmwareLatestDeviceServerRequest_Closure)
                 (const GetFirmwareLatestDeviceServerRequest *message,
                  void *closure_data);
typedef void (*GetFirmwareLatestDeviceServerResponse_Closure)
                 (const GetFirmwareLatestDeviceServerResponse *message,
                  void *closure_data);
typedef void (*DownloadFirmwareDeviceServerRequest_Closure)
                 (const DownloadFirmwareDeviceServerRequest *message,
                  void *closure_data);
typedef void (*DownloadFirmwareDeviceServerResponse_Closure)
                 (const DownloadFirmwareDeviceServerResponse *message,
                  void *closure_data);
typedef void (*ForceUpdateFirmwareDeviceServerRequest_Closure)
                 (const ForceUpdateFirmwareDeviceServerRequest *message,
                  void *closure_data);
typedef void (*ForceUpdateFirmwareDeviceServerResponse_Closure)
                 (const ForceUpdateFirmwareDeviceServerResponse *message,
                  void *closure_data);
typedef void (*RegisterDeviceServerRequest_Closure)
                 (const RegisterDeviceServerRequest *message,
                  void *closure_data);
typedef void (*RegisterDeviceServerResponse_Closure)
                 (const RegisterDeviceServerResponse *message,
                  void *closure_data);
typedef void (*UpdateWSEndpointDeviceServerRequest_Closure)
                 (const UpdateWSEndpointDeviceServerRequest *message,
                  void *closure_data);
typedef void (*UpdateWSEndpointDeviceServerResponse_Closure)
                 (const UpdateWSEndpointDeviceServerResponse *message,
                  void *closure_data);
typedef void (*ForceUpdateFirmwareAllDevicesByPhoneServerRequest_Closure)
                 (const ForceUpdateFirmwareAllDevicesByPhoneServerRequest *message,
                  void *closure_data);
typedef void (*ForceUpdateFirmwareAllDevicesByPhoneServerResponse_Closure)
                 (const ForceUpdateFirmwareAllDevicesByPhoneServerResponse *message,
                  void *closure_data);
typedef void (*ListSceneDeviceServerRequest_Closure)
                 (const ListSceneDeviceServerRequest *message,
                  void *closure_data);
typedef void (*ListSceneDeviceServerResponse_Closure)
                 (const ListSceneDeviceServerResponse *message,
                  void *closure_data);
typedef void (*GetSwitchersServerRequest_Closure)
                 (const GetSwitchersServerRequest *message,
                  void *closure_data);
typedef void (*GetSwitchersServerResponse_Closure)
                 (const GetSwitchersServerResponse *message,
                  void *closure_data);
typedef void (*GetSwitcherServerRequest_Closure)
                 (const GetSwitcherServerRequest *message,
                  void *closure_data);
typedef void (*GetSwitcherServerResponse_Closure)
                 (const GetSwitcherServerResponse *message,
                  void *closure_data);
typedef void (*GetLogSwitcherServerRequest_Closure)
                 (const GetLogSwitcherServerRequest *message,
                  void *closure_data);
typedef void (*GetLogSwitcherServerResponse_Closure)
                 (const GetLogSwitcherServerResponse *message,
                  void *closure_data);
typedef void (*GetIconSwitchersServerRequest_Closure)
                 (const GetIconSwitchersServerRequest *message,
                  void *closure_data);
typedef void (*GetIconSwitchersServerResponse_Closure)
                 (const GetIconSwitchersServerResponse *message,
                  void *closure_data);
typedef void (*UpdateSwitcherServerRequest_Closure)
                 (const UpdateSwitcherServerRequest *message,
                  void *closure_data);
typedef void (*UpdateSwitcherServerResponse_Closure)
                 (const UpdateSwitcherServerResponse *message,
                  void *closure_data);
typedef void (*SwitcherServerRequest_Closure)
                 (const SwitcherServerRequest *message,
                  void *closure_data);
typedef void (*SwitcherServerResponse_Closure)
                 (const SwitcherServerResponse *message,
                  void *closure_data);
typedef void (*GetSwitcherSchedulesServerRequest_Closure)
                 (const GetSwitcherSchedulesServerRequest *message,
                  void *closure_data);
typedef void (*GetSwitcherSchedulesServerResponse_Closure)
                 (const GetSwitcherSchedulesServerResponse *message,
                  void *closure_data);
typedef void (*GetSwitcherScheduleServerRequest_Closure)
                 (const GetSwitcherScheduleServerRequest *message,
                  void *closure_data);
typedef void (*GetSwitcherScheduleServerResponse_Closure)
                 (const GetSwitcherScheduleServerResponse *message,
                  void *closure_data);
typedef void (*GetCountSwitcherScheduleServerRequest_Closure)
                 (const GetCountSwitcherScheduleServerRequest *message,
                  void *closure_data);
typedef void (*GetCountSwitcherScheduleServerResponse_Closure)
                 (const GetCountSwitcherScheduleServerResponse *message,
                  void *closure_data);
typedef void (*AddSwitcherScheduleServerRequest_Closure)
                 (const AddSwitcherScheduleServerRequest *message,
                  void *closure_data);
typedef void (*AddSwitcherScheduleServerResponse_Closure)
                 (const AddSwitcherScheduleServerResponse *message,
                  void *closure_data);
typedef void (*UpdateSwitcherScheduleServerRequest_Closure)
                 (const UpdateSwitcherScheduleServerRequest *message,
                  void *closure_data);
typedef void (*UpdateSwitcherScheduleServerResponse_Closure)
                 (const UpdateSwitcherScheduleServerResponse *message,
                  void *closure_data);
typedef void (*DeleteSwitcherScheduleServerRequest_Closure)
                 (const DeleteSwitcherScheduleServerRequest *message,
                  void *closure_data);
typedef void (*DeleteSwitcherScheduleServerResponse_Closure)
                 (const DeleteSwitcherScheduleServerResponse *message,
                  void *closure_data);
typedef void (*SetActiveSwitcherScheduleServerRequest_Closure)
                 (const SetActiveSwitcherScheduleServerRequest *message,
                  void *closure_data);
typedef void (*SetActiveSwitcherScheduleServerResponse_Closure)
                 (const SetActiveSwitcherScheduleServerResponse *message,
                  void *closure_data);
typedef void (*GetCurtainSwitcherServerRequest_Closure)
                 (const GetCurtainSwitcherServerRequest *message,
                  void *closure_data);
typedef void (*GetCurtainSwitcherServerResponse_Closure)
                 (const GetCurtainSwitcherServerResponse *message,
                  void *closure_data);
typedef void (*UpdateCurtainSwitcherServerRequest_Closure)
                 (const UpdateCurtainSwitcherServerRequest *message,
                  void *closure_data);
typedef void (*UpdateCurtainSwitcherServerResponse_Closure)
                 (const UpdateCurtainSwitcherServerResponse *message,
                  void *closure_data);
typedef void (*GetCurtainSwitcherStateServerRequest_Closure)
                 (const GetCurtainSwitcherStateServerRequest *message,
                  void *closure_data);
typedef void (*GetCurtainSwitcherStateServerResponse_Closure)
                 (const GetCurtainSwitcherStateServerResponse *message,
                  void *closure_data);
typedef void (*CurtainSwitcherServerRequest_Closure)
                 (const CurtainSwitcherServerRequest *message,
                  void *closure_data);
typedef void (*CurtainSwitcherServerResponse_Closure)
                 (const CurtainSwitcherServerResponse *message,
                  void *closure_data);
typedef void (*GetCurtainSwitcherSchedulesServerRequest_Closure)
                 (const GetCurtainSwitcherSchedulesServerRequest *message,
                  void *closure_data);
typedef void (*GetCurtainSwitcherSchedulesServerResponse_Closure)
                 (const GetCurtainSwitcherSchedulesServerResponse *message,
                  void *closure_data);
typedef void (*GetCurtainSwitcherScheduleServerRequest_Closure)
                 (const GetCurtainSwitcherScheduleServerRequest *message,
                  void *closure_data);
typedef void (*GetCurtainSwitcherScheduleServerResponse_Closure)
                 (const GetCurtainSwitcherScheduleServerResponse *message,
                  void *closure_data);
typedef void (*GetCountCurtainSwitcherScheduleServerRequest_Closure)
                 (const GetCountCurtainSwitcherScheduleServerRequest *message,
                  void *closure_data);
typedef void (*GetCountCurtainSwitcherScheduleServerResponse_Closure)
                 (const GetCountCurtainSwitcherScheduleServerResponse *message,
                  void *closure_data);
typedef void (*AddCurtainSwitcherScheduleServerRequest_Closure)
                 (const AddCurtainSwitcherScheduleServerRequest *message,
                  void *closure_data);
typedef void (*AddCurtainSwitcherScheduleServerResponse_Closure)
                 (const AddCurtainSwitcherScheduleServerResponse *message,
                  void *closure_data);
typedef void (*UpdateCurtainSwitcherScheduleServerRequest_Closure)
                 (const UpdateCurtainSwitcherScheduleServerRequest *message,
                  void *closure_data);
typedef void (*UpdateCurtainSwitcherScheduleServerResponse_Closure)
                 (const UpdateCurtainSwitcherScheduleServerResponse *message,
                  void *closure_data);
typedef void (*DeleteCurtainSwitcherScheduleServerRequest_Closure)
                 (const DeleteCurtainSwitcherScheduleServerRequest *message,
                  void *closure_data);
typedef void (*DeleteCurtainSwitcherScheduleServerResponse_Closure)
                 (const DeleteCurtainSwitcherScheduleServerResponse *message,
                  void *closure_data);
typedef void (*SetActiveCurtainSwitcherScheduleServerRequest_Closure)
                 (const SetActiveCurtainSwitcherScheduleServerRequest *message,
                  void *closure_data);
typedef void (*SetActiveCurtainSwitcherScheduleServerResponse_Closure)
                 (const SetActiveCurtainSwitcherScheduleServerResponse *message,
                  void *closure_data);
typedef void (*GetMeterServerRequest_Closure)
                 (const GetMeterServerRequest *message,
                  void *closure_data);
typedef void (*GetMeterServerResponse_Closure)
                 (const GetMeterServerResponse *message,
                  void *closure_data);
typedef void (*UpdateMeterServerRequest_Closure)
                 (const UpdateMeterServerRequest *message,
                  void *closure_data);
typedef void (*UpdateMeterServerResponse_Closure)
                 (const UpdateMeterServerResponse *message,
                  void *closure_data);
typedef void (*GetMeterEstimatesDayInMonthServerRequest_Closure)
                 (const GetMeterEstimatesDayInMonthServerRequest *message,
                  void *closure_data);
typedef void (*GetMeterEstimatesDayInMonthServerResponse_Closure)
                 (const GetMeterEstimatesDayInMonthServerResponse *message,
                  void *closure_data);
typedef void (*GetMeterEstimatesHourInDayServerRequest_Closure)
                 (const GetMeterEstimatesHourInDayServerRequest *message,
                  void *closure_data);
typedef void (*GetMeterEstimatesHourInDayServerResponse_Closure)
                 (const GetMeterEstimatesHourInDayServerResponse *message,
                  void *closure_data);
typedef void (*GetMetersByHomeIdServerRequest_Closure)
                 (const GetMetersByHomeIdServerRequest *message,
                  void *closure_data);
typedef void (*GetMetersByHomeIdServerResponse_Closure)
                 (const GetMetersByHomeIdServerResponse *message,
                  void *closure_data);
typedef void (*GetMeterMissingInDayServerRequest_Closure)
                 (const GetMeterMissingInDayServerRequest *message,
                  void *closure_data);
typedef void (*GetMeterMissingInDayServerResponse_Closure)
                 (const GetMeterMissingInDayServerResponse *message,
                  void *closure_data);
typedef void (*GetAirConditionerStateServerRequest_Closure)
                 (const GetAirConditionerStateServerRequest *message,
                  void *closure_data);
typedef void (*GetAirConditionerStateServerResponse_Closure)
                 (const GetAirConditionerStateServerResponse *message,
                  void *closure_data);
typedef void (*AirConditionerServerRequest_Closure)
                 (const AirConditionerServerRequest *message,
                  void *closure_data);
typedef void (*AirConditionerServerResponse_Closure)
                 (const AirConditionerServerResponse *message,
                  void *closure_data);
typedef void (*GetRemotesServerRequest_Closure)
                 (const GetRemotesServerRequest *message,
                  void *closure_data);
typedef void (*GetRemotesServerResponse_Closure)
                 (const GetRemotesServerResponse *message,
                  void *closure_data);
typedef void (*GetRemoteServerRequest_Closure)
                 (const GetRemoteServerRequest *message,
                  void *closure_data);
typedef void (*GetRemoteServerResponse_Closure)
                 (const GetRemoteServerResponse *message,
                  void *closure_data);
typedef void (*GetRemoteLibrariesServerRequest_Closure)
                 (const GetRemoteLibrariesServerRequest *message,
                  void *closure_data);
typedef void (*GetRemoteLibrariesServerResponse_Closure)
                 (const GetRemoteLibrariesServerResponse *message,
                  void *closure_data);
typedef void (*GetCommandsRemoteServerRequest_Closure)
                 (const GetCommandsRemoteServerRequest *message,
                  void *closure_data);
typedef void (*GetCommandsRemoteServerResponse_Closure)
                 (const GetCommandsRemoteServerResponse *message,
                  void *closure_data);
typedef void (*SendCommandRemoteServerRequest_Closure)
                 (const SendCommandRemoteServerRequest *message,
                  void *closure_data);
typedef void (*SendCommandRemoteServerResponse_Closure)
                 (const SendCommandRemoteServerResponse *message,
                  void *closure_data);
typedef void (*LearnCommandRemoteServerRequest_Closure)
                 (const LearnCommandRemoteServerRequest *message,
                  void *closure_data);
typedef void (*LearnCommandRemoteServerResponse_Closure)
                 (const LearnCommandRemoteServerResponse *message,
                  void *closure_data);
typedef void (*RestoreCommandRemoteServerRequest_Closure)
                 (const RestoreCommandRemoteServerRequest *message,
                  void *closure_data);
typedef void (*RestoreCommandRemoteServerResponse_Closure)
                 (const RestoreCommandRemoteServerResponse *message,
                  void *closure_data);
typedef void (*AddRemoteServerRequest_Closure)
                 (const AddRemoteServerRequest *message,
                  void *closure_data);
typedef void (*AddRemoteServerResponse_Closure)
                 (const AddRemoteServerResponse *message,
                  void *closure_data);
typedef void (*UpdateRemoteServerRequest_Closure)
                 (const UpdateRemoteServerRequest *message,
                  void *closure_data);
typedef void (*UpdateRemoteServerResponse_Closure)
                 (const UpdateRemoteServerResponse *message,
                  void *closure_data);
typedef void (*DeleteRemoteServerRequest_Closure)
                 (const DeleteRemoteServerRequest *message,
                  void *closure_data);
typedef void (*DeleteRemoteServerResponse_Closure)
                 (const DeleteRemoteServerResponse *message,
                  void *closure_data);
typedef void (*GetRemoteSchedulesServerRequest_Closure)
                 (const GetRemoteSchedulesServerRequest *message,
                  void *closure_data);
typedef void (*GetRemoteSchedulesServerResponse_Closure)
                 (const GetRemoteSchedulesServerResponse *message,
                  void *closure_data);
typedef void (*GetCountRemoteScheduleServerRequest_Closure)
                 (const GetCountRemoteScheduleServerRequest *message,
                  void *closure_data);
typedef void (*GetCountRemoteScheduleServerResponse_Closure)
                 (const GetCountRemoteScheduleServerResponse *message,
                  void *closure_data);
typedef void (*GetRemoteScheduleServerRequest_Closure)
                 (const GetRemoteScheduleServerRequest *message,
                  void *closure_data);
typedef void (*GetRemoteScheduleServerResponse_Closure)
                 (const GetRemoteScheduleServerResponse *message,
                  void *closure_data);
typedef void (*AddRemoteScheduleServerRequest_Closure)
                 (const AddRemoteScheduleServerRequest *message,
                  void *closure_data);
typedef void (*AddRemoteScheduleServerResponse_Closure)
                 (const AddRemoteScheduleServerResponse *message,
                  void *closure_data);
typedef void (*UpdateRemoteScheduleServerRequest_Closure)
                 (const UpdateRemoteScheduleServerRequest *message,
                  void *closure_data);
typedef void (*UpdateRemoteScheduleServerResponse_Closure)
                 (const UpdateRemoteScheduleServerResponse *message,
                  void *closure_data);
typedef void (*DeleteRemoteScheduleServerRequest_Closure)
                 (const DeleteRemoteScheduleServerRequest *message,
                  void *closure_data);
typedef void (*DeleteRemoteScheduleServerResponse_Closure)
                 (const DeleteRemoteScheduleServerResponse *message,
                  void *closure_data);
typedef void (*SetActiveRemoteScheduleServerRequest_Closure)
                 (const SetActiveRemoteScheduleServerRequest *message,
                  void *closure_data);
typedef void (*SetActiveRemoteScheduleServerResponse_Closure)
                 (const SetActiveRemoteScheduleServerResponse *message,
                  void *closure_data);
typedef void (*GetRemoteMultisServerRequest_Closure)
                 (const GetRemoteMultisServerRequest *message,
                  void *closure_data);
typedef void (*GetRemoteMultisServerResponse_Closure)
                 (const GetRemoteMultisServerResponse *message,
                  void *closure_data);
typedef void (*AddRemoteMultiServerRequest_Closure)
                 (const AddRemoteMultiServerRequest *message,
                  void *closure_data);
typedef void (*AddRemoteMultiServerResponse_Closure)
                 (const AddRemoteMultiServerResponse *message,
                  void *closure_data);
typedef void (*DeleteRemoteMultiServerRequest_Closure)
                 (const DeleteRemoteMultiServerRequest *message,
                  void *closure_data);
typedef void (*DeleteRemoteMultiServerResponse_Closure)
                 (const DeleteRemoteMultiServerResponse *message,
                  void *closure_data);
typedef void (*AddRemoteMultiLibraryCmdServerRequest_Closure)
                 (const AddRemoteMultiLibraryCmdServerRequest *message,
                  void *closure_data);
typedef void (*AddRemoteMultiLibraryCmdServerResponse_Closure)
                 (const AddRemoteMultiLibraryCmdServerResponse *message,
                  void *closure_data);
typedef void (*DeleteRemoteMultiLibraryCmdServerRequest_Closure)
                 (const DeleteRemoteMultiLibraryCmdServerRequest *message,
                  void *closure_data);
typedef void (*DeleteRemoteMultiLibraryCmdServerResponse_Closure)
                 (const DeleteRemoteMultiLibraryCmdServerResponse *message,
                  void *closure_data);
typedef void (*UpdateRemoteMultiLibraryCmdServerRequest_Closure)
                 (const UpdateRemoteMultiLibraryCmdServerRequest *message,
                  void *closure_data);
typedef void (*UpdateRemoteMultiLibraryCmdServerResponse_Closure)
                 (const UpdateRemoteMultiLibraryCmdServerResponse *message,
                  void *closure_data);
typedef void (*UpdateGroupRemoteMultiLibraryCmdServerRequest_Closure)
                 (const UpdateGroupRemoteMultiLibraryCmdServerRequest *message,
                  void *closure_data);
typedef void (*UpdateGroupRemoteMultiLibraryCmdServerResponse_Closure)
                 (const UpdateGroupRemoteMultiLibraryCmdServerResponse *message,
                  void *closure_data);
typedef void (*ChangeRemoteBrandRemoteRequest_Closure)
                 (const ChangeRemoteBrandRemoteRequest *message,
                  void *closure_data);
typedef void (*ChangeRemoteBrandRemoteResponse_Closure)
                 (const ChangeRemoteBrandRemoteResponse *message,
                  void *closure_data);
typedef void (*ControlRemoteACCommandRequest_Closure)
                 (const ControlRemoteACCommandRequest *message,
                  void *closure_data);
typedef void (*ControlRemoteACCommandResponse_Closure)
                 (const ControlRemoteACCommandResponse *message,
                  void *closure_data);
typedef void (*GetScenesServerRequest_Closure)
                 (const GetScenesServerRequest *message,
                  void *closure_data);
typedef void (*GetScenesServerResponse_Closure)
                 (const GetScenesServerResponse *message,
                  void *closure_data);
typedef void (*GetSceneServerRequest_Closure)
                 (const GetSceneServerRequest *message,
                  void *closure_data);
typedef void (*GetSceneServerResponse_Closure)
                 (const GetSceneServerResponse *message,
                  void *closure_data);
typedef void (*AddSceneServerRequest_Closure)
                 (const AddSceneServerRequest *message,
                  void *closure_data);
typedef void (*AddSceneServerResponse_Closure)
                 (const AddSceneServerResponse *message,
                  void *closure_data);
typedef void (*UpdateSceneServerRequest_Closure)
                 (const UpdateSceneServerRequest *message,
                  void *closure_data);
typedef void (*UpdateSceneServerResponse_Closure)
                 (const UpdateSceneServerResponse *message,
                  void *closure_data);
typedef void (*DeleteSceneServerRequest_Closure)
                 (const DeleteSceneServerRequest *message,
                  void *closure_data);
typedef void (*DeleteSceneServerResponse_Closure)
                 (const DeleteSceneServerResponse *message,
                  void *closure_data);
typedef void (*DeleteSwitcherConditionServerRequest_Closure)
                 (const DeleteSwitcherConditionServerRequest *message,
                  void *closure_data);
typedef void (*DeleteSwitcherConditionServerResponse_Closure)
                 (const DeleteSwitcherConditionServerResponse *message,
                  void *closure_data);
typedef void (*DeleteSceneActionServerRequest_Closure)
                 (const DeleteSceneActionServerRequest *message,
                  void *closure_data);
typedef void (*DeleteSceneActionServerResponse_Closure)
                 (const DeleteSceneActionServerResponse *message,
                  void *closure_data);
typedef void (*RunSceneServerRequest_Closure)
                 (const RunSceneServerRequest *message,
                  void *closure_data);
typedef void (*RunSceneServerResponse_Closure)
                 (const RunSceneServerResponse *message,
                  void *closure_data);
typedef void (*SceneServerRequest_Closure)
                 (const SceneServerRequest *message,
                  void *closure_data);
typedef void (*SceneServerResponse_Closure)
                 (const SceneServerResponse *message,
                  void *closure_data);
typedef void (*SceneRetryConfirmServerRequest_Closure)
                 (const SceneRetryConfirmServerRequest *message,
                  void *closure_data);
typedef void (*SceneRetryConfirmServerResponse_Closure)
                 (const SceneRetryConfirmServerResponse *message,
                  void *closure_data);
typedef void (*SetSceneStatusServerRequest_Closure)
                 (const SetSceneStatusServerRequest *message,
                  void *closure_data);
typedef void (*SetSceneStatusServerResponse_Closure)
                 (const SetSceneStatusServerResponse *message,
                  void *closure_data);
typedef void (*TestSceneServerRequest_Closure)
                 (const TestSceneServerRequest *message,
                  void *closure_data);
typedef void (*TestSceneServerResponse_Closure)
                 (const TestSceneServerResponse *message,
                  void *closure_data);
typedef void (*SceneTriggerServerRequest_Closure)
                 (const SceneTriggerServerRequest *message,
                  void *closure_data);
typedef void (*SceneTriggerServerResponse_Closure)
                 (const SceneTriggerServerResponse *message,
                  void *closure_data);
typedef void (*GetHomeTabServerRequest_Closure)
                 (const GetHomeTabServerRequest *message,
                  void *closure_data);
typedef void (*GetHomeTabServerResponse_Closure)
                 (const GetHomeTabServerResponse *message,
                  void *closure_data);
typedef void (*GetElectricTabServerRequest_Closure)
                 (const GetElectricTabServerRequest *message,
                  void *closure_data);
typedef void (*GetElectricTabServerResponse_Closure)
                 (const GetElectricTabServerResponse *message,
                  void *closure_data);
typedef void (*GetSwitcherTabServerRequest_Closure)
                 (const GetSwitcherTabServerRequest *message,
                  void *closure_data);
typedef void (*GetSwitcherTabServerResponse_Closure)
                 (const GetSwitcherTabServerResponse *message,
                  void *closure_data);
typedef void (*SwitcherOnChangedServerResponse_Closure)
                 (const SwitcherOnChangedServerResponse *message,
                  void *closure_data);
typedef void (*CurtainSwitcherOnChangedServerResponse_Closure)
                 (const CurtainSwitcherOnChangedServerResponse *message,
                  void *closure_data);
typedef void (*AirConditionerOnChangedServerResponse_Closure)
                 (const AirConditionerOnChangedServerResponse *message,
                  void *closure_data);
typedef void (*RemoteOnChangedServerResponse_Closure)
                 (const RemoteOnChangedServerResponse *message,
                  void *closure_data);
typedef void (*MeterOnChangedServerResponse_Closure)
                 (const MeterOnChangedServerResponse *message,
                  void *closure_data);
typedef void (*DeviceOnChangedDeviceServerResponse_Closure)
                 (const DeviceOnChangedDeviceServerResponse *message,
                  void *closure_data);
typedef void (*ProgressUpdateFirmwareOnChangedDeviceServerResponse_Closure)
                 (const ProgressUpdateFirmwareOnChangedDeviceServerResponse *message,
                  void *closure_data);
typedef void (*DownloadFirmwareOnChangedDeviceServerResponse_Closure)
                 (const DownloadFirmwareOnChangedDeviceServerResponse *message,
                  void *closure_data);
typedef void (*MotionOnChangedServerResponse_Closure)
                 (const MotionOnChangedServerResponse *message,
                  void *closure_data);
typedef void (*SceneOnChangedServerResponse_Closure)
                 (const SceneOnChangedServerResponse *message,
                  void *closure_data);
typedef void (*HomekitOnChangedServerResponse_Closure)
                 (const HomekitOnChangedServerResponse *message,
                  void *closure_data);
typedef void (*ButtonOnChangedServerResponse_Closure)
                 (const ButtonOnChangedServerResponse *message,
                  void *closure_data);
typedef void (*GroupControlOnChangedServerResponse_Closure)
                 (const GroupControlOnChangedServerResponse *message,
                  void *closure_data);
typedef void (*LedDriverOnChangedServerResponse_Closure)
                 (const LedDriverOnChangedServerResponse *message,
                  void *closure_data);
typedef void (*EnvironmentSensorOnChangedServerResponse_Closure)
                 (const EnvironmentSensorOnChangedServerResponse *message,
                  void *closure_data);
typedef void (*SmartPlugOnChangedServerResponse_Closure)
                 (const SmartPlugOnChangedServerResponse *message,
                  void *closure_data);
typedef void (*CurtainOnChangedServerResponse_Closure)
                 (const CurtainOnChangedServerResponse *message,
                  void *closure_data);
typedef void (*EchoServerRequest_Closure)
                 (const EchoServerRequest *message,
                  void *closure_data);
typedef void (*EchoServerResponse_Closure)
                 (const EchoServerResponse *message,
                  void *closure_data);
typedef void (*MotionServerRequest_Closure)
                 (const MotionServerRequest *message,
                  void *closure_data);
typedef void (*MotionServerResponse_Closure)
                 (const MotionServerResponse *message,
                  void *closure_data);
typedef void (*GetMotionServerRequest_Closure)
                 (const GetMotionServerRequest *message,
                  void *closure_data);
typedef void (*GetMotionServerResponse_Closure)
                 (const GetMotionServerResponse *message,
                  void *closure_data);
typedef void (*UpdateMotionServerRequest_Closure)
                 (const UpdateMotionServerRequest *message,
                  void *closure_data);
typedef void (*UpdateMotionServerResponse_Closure)
                 (const UpdateMotionServerResponse *message,
                  void *closure_data);
typedef void (*GetHomekitInfoServerRequest_Closure)
                 (const GetHomekitInfoServerRequest *message,
                  void *closure_data);
typedef void (*GetHomekitInfoServerResponse_Closure)
                 (const GetHomekitInfoServerResponse *message,
                  void *closure_data);
typedef void (*UpdateHomekitServerRequest_Closure)
                 (const UpdateHomekitServerRequest *message,
                  void *closure_data);
typedef void (*UpdateHomekitServerResponse_Closure)
                 (const UpdateHomekitServerResponse *message,
                  void *closure_data);
typedef void (*SetHomekitModeServerRequest_Closure)
                 (const SetHomekitModeServerRequest *message,
                  void *closure_data);
typedef void (*SetHomekitModeServerResponse_Closure)
                 (const SetHomekitModeServerResponse *message,
                  void *closure_data);
typedef void (*GetProjectsServerRequest_Closure)
                 (const GetProjectsServerRequest *message,
                  void *closure_data);
typedef void (*GetProjectsServerResponse_Closure)
                 (const GetProjectsServerResponse *message,
                  void *closure_data);
typedef void (*GetBuildingsServerRequest_Closure)
                 (const GetBuildingsServerRequest *message,
                  void *closure_data);
typedef void (*GetBuildingsServerResponse_Closure)
                 (const GetBuildingsServerResponse *message,
                  void *closure_data);
typedef void (*GetFloorsServerRequest_Closure)
                 (const GetFloorsServerRequest *message,
                  void *closure_data);
typedef void (*GetFloorsServerResponse_Closure)
                 (const GetFloorsServerResponse *message,
                  void *closure_data);
typedef void (*GetApartmentsServerRequest_Closure)
                 (const GetApartmentsServerRequest *message,
                  void *closure_data);
typedef void (*GetApartmentsServerResponse_Closure)
                 (const GetApartmentsServerResponse *message,
                  void *closure_data);
typedef void (*AddUserHomeServerRequest_Closure)
                 (const AddUserHomeServerRequest *message,
                  void *closure_data);
typedef void (*AddUserHomeServerResponse_Closure)
                 (const AddUserHomeServerResponse *message,
                  void *closure_data);
typedef void (*DeleteUserHomeServerRequest_Closure)
                 (const DeleteUserHomeServerRequest *message,
                  void *closure_data);
typedef void (*DeleteUserHomeServerResponse_Closure)
                 (const DeleteUserHomeServerResponse *message,
                  void *closure_data);
typedef void (*GetUnreadServerRequest_Closure)
                 (const GetUnreadServerRequest *message,
                  void *closure_data);
typedef void (*GetUnreadServerResponse_Closure)
                 (const GetUnreadServerResponse *message,
                  void *closure_data);
typedef void (*SetReadServerRequest_Closure)
                 (const SetReadServerRequest *message,
                  void *closure_data);
typedef void (*SetReadServerResponse_Closure)
                 (const SetReadServerResponse *message,
                  void *closure_data);
typedef void (*GetBackgroundsServerRequest_Closure)
                 (const GetBackgroundsServerRequest *message,
                  void *closure_data);
typedef void (*GetBackgroundsServerResponse_Closure)
                 (const GetBackgroundsServerResponse *message,
                  void *closure_data);
typedef void (*GetAutoOffsServerRequest_Closure)
                 (const GetAutoOffsServerRequest *message,
                  void *closure_data);
typedef void (*GetAutoOffsServerResponse_Closure)
                 (const GetAutoOffsServerResponse *message,
                  void *closure_data);
typedef void (*GetTypeDevicesServerRequest_Closure)
                 (const GetTypeDevicesServerRequest *message,
                  void *closure_data);
typedef void (*GetTypeDevicesServerResponse_Closure)
                 (const GetTypeDevicesServerResponse *message,
                  void *closure_data);
typedef void (*GetButtonInfoServerRequest_Closure)
                 (const GetButtonInfoServerRequest *message,
                  void *closure_data);
typedef void (*GetButtonInfoServerResponse_Closure)
                 (const GetButtonInfoServerResponse *message,
                  void *closure_data);
typedef void (*UpdateButtonServerRequest_Closure)
                 (const UpdateButtonServerRequest *message,
                  void *closure_data);
typedef void (*UpdateButtonServerResponse_Closure)
                 (const UpdateButtonServerResponse *message,
                  void *closure_data);
typedef void (*GroupControlServerRequest_Closure)
                 (const GroupControlServerRequest *message,
                  void *closure_data);
typedef void (*GroupControlServerResponse_Closure)
                 (const GroupControlServerResponse *message,
                  void *closure_data);
typedef void (*GetGroupControlInfoServerRequest_Closure)
                 (const GetGroupControlInfoServerRequest *message,
                  void *closure_data);
typedef void (*GetGroupControlInfoServerResponse_Closure)
                 (const GetGroupControlInfoServerResponse *message,
                  void *closure_data);
typedef void (*GetControlsServerRequest_Closure)
                 (const GetControlsServerRequest *message,
                  void *closure_data);
typedef void (*GetControlsServerResponse_Closure)
                 (const GetControlsServerResponse *message,
                  void *closure_data);
typedef void (*AddGroupControlServerRequest_Closure)
                 (const AddGroupControlServerRequest *message,
                  void *closure_data);
typedef void (*AddGroupControlServerResponse_Closure)
                 (const AddGroupControlServerResponse *message,
                  void *closure_data);
typedef void (*UpdateGroupControlServerRequest_Closure)
                 (const UpdateGroupControlServerRequest *message,
                  void *closure_data);
typedef void (*UpdateGroupControlServerResponse_Closure)
                 (const UpdateGroupControlServerResponse *message,
                  void *closure_data);
typedef void (*DeleteGroupControlServerRequest_Closure)
                 (const DeleteGroupControlServerRequest *message,
                  void *closure_data);
typedef void (*DeleteGroupControlServerResponse_Closure)
                 (const DeleteGroupControlServerResponse *message,
                  void *closure_data);
typedef void (*LedDriverServerRequest_Closure)
                 (const LedDriverServerRequest *message,
                  void *closure_data);
typedef void (*LedDriverServerResponse_Closure)
                 (const LedDriverServerResponse *message,
                  void *closure_data);
typedef void (*GetLedDriverServerRequest_Closure)
                 (const GetLedDriverServerRequest *message,
                  void *closure_data);
typedef void (*GetLedDriverServerResponse_Closure)
                 (const GetLedDriverServerResponse *message,
                  void *closure_data);
typedef void (*GetLedDriverItemServerRequest_Closure)
                 (const GetLedDriverItemServerRequest *message,
                  void *closure_data);
typedef void (*GetLedDriverItemServerResponse_Closure)
                 (const GetLedDriverItemServerResponse *message,
                  void *closure_data);
typedef void (*UpdateLedDriverServerRequest_Closure)
                 (const UpdateLedDriverServerRequest *message,
                  void *closure_data);
typedef void (*UpdateLedDriverServerResponse_Closure)
                 (const UpdateLedDriverServerResponse *message,
                  void *closure_data);
typedef void (*UpdateLedDriverItemServerRequest_Closure)
                 (const UpdateLedDriverItemServerRequest *message,
                  void *closure_data);
typedef void (*UpdateLedDriverItemServerResponse_Closure)
                 (const UpdateLedDriverItemServerResponse *message,
                  void *closure_data);
typedef void (*TouchPanelChangeComponentServerRequest_Closure)
                 (const TouchPanelChangeComponentServerRequest *message,
                  void *closure_data);
typedef void (*TouchPanelControlSwitcherServerRequest_Closure)
                 (const TouchPanelControlSwitcherServerRequest *message,
                  void *closure_data);
typedef void (*TouchPanelUpdateSwitcherServerRequest_Closure)
                 (const TouchPanelUpdateSwitcherServerRequest *message,
                  void *closure_data);
typedef void (*TouchPanelControlCurtainSwitcherServerRequest_Closure)
                 (const TouchPanelControlCurtainSwitcherServerRequest *message,
                  void *closure_data);
typedef void (*TouchPanelUpdateCurtainSwitcherServerRequest_Closure)
                 (const TouchPanelUpdateCurtainSwitcherServerRequest *message,
                  void *closure_data);
typedef void (*TouchPanelUpdateSceneServerRequest_Closure)
                 (const TouchPanelUpdateSceneServerRequest *message,
                  void *closure_data);
typedef void (*TouchPanelControlLedDriverServerRequest_Closure)
                 (const TouchPanelControlLedDriverServerRequest *message,
                  void *closure_data);
typedef void (*TouchPanelUpdateLedDriverServerRequest_Closure)
                 (const TouchPanelUpdateLedDriverServerRequest *message,
                  void *closure_data);
typedef void (*CurtainServerRequest_Closure)
                 (const CurtainServerRequest *message,
                  void *closure_data);
typedef void (*CurtainServerResponse_Closure)
                 (const CurtainServerResponse *message,
                  void *closure_data);
typedef void (*AuthServerMessage_Closure)
                 (const AuthServerMessage *message,
                  void *closure_data);
typedef void (*UserServerMessage_Closure)
                 (const UserServerMessage *message,
                  void *closure_data);
typedef void (*HomeServerMessage_Closure)
                 (const HomeServerMessage *message,
                  void *closure_data);
typedef void (*RoomServerMessage_Closure)
                 (const RoomServerMessage *message,
                  void *closure_data);
typedef void (*DeviceServerMessage_Closure)
                 (const DeviceServerMessage *message,
                  void *closure_data);
typedef void (*SwitcherServerMessage_Closure)
                 (const SwitcherServerMessage *message,
                  void *closure_data);
typedef void (*CurtainSwitcherServerMessage_Closure)
                 (const CurtainSwitcherServerMessage *message,
                  void *closure_data);
typedef void (*MeterServerMessage_Closure)
                 (const MeterServerMessage *message,
                  void *closure_data);
typedef void (*AirConditionerServerMessage_Closure)
                 (const AirConditionerServerMessage *message,
                  void *closure_data);
typedef void (*RemoteServerMessage_Closure)
                 (const RemoteServerMessage *message,
                  void *closure_data);
typedef void (*SceneServerMessage_Closure)
                 (const SceneServerMessage *message,
                  void *closure_data);
typedef void (*GeneralTabServerMessage_Closure)
                 (const GeneralTabServerMessage *message,
                  void *closure_data);
typedef void (*OnChangedServerMessage_Closure)
                 (const OnChangedServerMessage *message,
                  void *closure_data);
typedef void (*SimulatorServerMessage_Closure)
                 (const SimulatorServerMessage *message,
                  void *closure_data);
typedef void (*MotionServerMessage_Closure)
                 (const MotionServerMessage *message,
                  void *closure_data);
typedef void (*HomekitServerMessage_Closure)
                 (const HomekitServerMessage *message,
                  void *closure_data);
typedef void (*ProjectServerMessage_Closure)
                 (const ProjectServerMessage *message,
                  void *closure_data);
typedef void (*BuildingServerMessage_Closure)
                 (const BuildingServerMessage *message,
                  void *closure_data);
typedef void (*FloorServerMessage_Closure)
                 (const FloorServerMessage *message,
                  void *closure_data);
typedef void (*ApartmentServerMessage_Closure)
                 (const ApartmentServerMessage *message,
                  void *closure_data);
typedef void (*UserHomeServerMessage_Closure)
                 (const UserHomeServerMessage *message,
                  void *closure_data);
typedef void (*InboxServerMessage_Closure)
                 (const InboxServerMessage *message,
                  void *closure_data);
typedef void (*SettingServerMessage_Closure)
                 (const SettingServerMessage *message,
                  void *closure_data);
typedef void (*ButtonServerMessage_Closure)
                 (const ButtonServerMessage *message,
                  void *closure_data);
typedef void (*GroupControlServerMessage_Closure)
                 (const GroupControlServerMessage *message,
                  void *closure_data);
typedef void (*LedDriverServerMessage_Closure)
                 (const LedDriverServerMessage *message,
                  void *closure_data);
typedef void (*TouchPanelServerMessage_Closure)
                 (const TouchPanelServerMessage *message,
                  void *closure_data);
typedef void (*CurtainServerMessage_Closure)
                 (const CurtainServerMessage *message,
                  void *closure_data);
typedef void (*ServerMessage_Closure)
                 (const ServerMessage *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor login_server_request__descriptor;
extern const ProtobufCMessageDescriptor login_server_response__descriptor;
extern const ProtobufCMessageDescriptor refresh_token_server_request__descriptor;
extern const ProtobufCMessageDescriptor refresh_token_server_response__descriptor;
extern const ProtobufCMessageDescriptor send_code_server_request__descriptor;
extern const ProtobufCMessageDescriptor send_code_server_response__descriptor;
extern const ProtobufCMessageDescriptor verify_code_server_request__descriptor;
extern const ProtobufCMessageDescriptor verify_code_server_response__descriptor;
extern const ProtobufCMessageDescriptor get_user_info_server_request__descriptor;
extern const ProtobufCMessageDescriptor get_user_info_server_response__descriptor;
extern const ProtobufCMessageDescriptor update_user_info_server_request__descriptor;
extern const ProtobufCMessageDescriptor update_user_info_server_response__descriptor;
extern const ProtobufCMessageDescriptor set_onesignal_for_user_server_request__descriptor;
extern const ProtobufCMessageDescriptor set_onesignal_for_user_server_response__descriptor;
extern const ProtobufCMessageDescriptor changed_home_for_user_server_request__descriptor;
extern const ProtobufCMessageDescriptor changed_home_for_user_server_response__descriptor;
extern const ProtobufCMessageDescriptor get_users_server_request__descriptor;
extern const ProtobufCMessageDescriptor get_users_server_response__descriptor;
extern const ProtobufCMessageDescriptor search_user_server_request__descriptor;
extern const ProtobufCMessageDescriptor search_user_server_response__descriptor;
extern const ProtobufCMessageDescriptor avatar_upload_server_request__descriptor;
extern const ProtobufCMessageDescriptor avatar_upload_server_response__descriptor;
extern const ProtobufCMessageDescriptor get_user_otp_server_request__descriptor;
extern const ProtobufCMessageDescriptor get_user_otp_server_response__descriptor;
extern const ProtobufCMessageDescriptor get_homes_server_request__descriptor;
extern const ProtobufCMessageDescriptor get_homes_server_response__descriptor;
extern const ProtobufCMessageDescriptor add_home_server_request__descriptor;
extern const ProtobufCMessageDescriptor add_home_server_response__descriptor;
extern const ProtobufCMessageDescriptor update_home_server_request__descriptor;
extern const ProtobufCMessageDescriptor update_home_server_response__descriptor;
extern const ProtobufCMessageDescriptor delete_home_server_request__descriptor;
extern const ProtobufCMessageDescriptor delete_home_server_response__descriptor;
extern const ProtobufCMessageDescriptor get_citizen_info_server_request__descriptor;
extern const ProtobufCMessageDescriptor get_citizen_info_server_response__descriptor;
extern const ProtobufCMessageDescriptor set_citizen_server_request__descriptor;
extern const ProtobufCMessageDescriptor set_citizen_server_response__descriptor;
extern const ProtobufCMessageDescriptor set_gps_for_home_server_request__descriptor;
extern const ProtobufCMessageDescriptor set_gps_for_home_server_response__descriptor;
extern const ProtobufCMessageDescriptor get_home_info_server_request__descriptor;
extern const ProtobufCMessageDescriptor get_home_info_server_response__descriptor;
extern const ProtobufCMessageDescriptor get_homes_by_phone_server_request__descriptor;
extern const ProtobufCMessageDescriptor get_homes_by_phone_server_response__descriptor;
extern const ProtobufCMessageDescriptor upload_home_background_server_request__descriptor;
extern const ProtobufCMessageDescriptor upload_home_background_server_response__descriptor;
extern const ProtobufCMessageDescriptor get_rooms_server_request__descriptor;
extern const ProtobufCMessageDescriptor get_rooms_server_response__descriptor;
extern const ProtobufCMessageDescriptor add_room_server_request__descriptor;
extern const ProtobufCMessageDescriptor add_room_server_response__descriptor;
extern const ProtobufCMessageDescriptor delete_room_server_request__descriptor;
extern const ProtobufCMessageDescriptor delete_room_server_response__descriptor;
extern const ProtobufCMessageDescriptor update_room_server_request__descriptor;
extern const ProtobufCMessageDescriptor update_room_server_response__descriptor;
extern const ProtobufCMessageDescriptor upload_room_background_server_request__descriptor;
extern const ProtobufCMessageDescriptor upload_room_background_server_response__descriptor;
extern const ProtobufCMessageDescriptor get_devices_server_request__descriptor;
extern const ProtobufCMessageDescriptor get_devices_server_response__descriptor;
extern const ProtobufCMessageDescriptor get_device_server_request__descriptor;
extern const ProtobufCMessageDescriptor get_device_server_response__descriptor;
extern const ProtobufCMessageDescriptor add_devices_server_request__descriptor;
extern const ProtobufCMessageDescriptor add_devices_server_response__descriptor;
extern const ProtobufCMessageDescriptor update_device_server_request__descriptor;
extern const ProtobufCMessageDescriptor update_device_server_response__descriptor;
extern const ProtobufCMessageDescriptor delete_device_server_request__descriptor;
extern const ProtobufCMessageDescriptor delete_device_server_response__descriptor;
extern const ProtobufCMessageDescriptor get_firmware_latest_device_server_request__descriptor;
extern const ProtobufCMessageDescriptor get_firmware_latest_device_server_response__descriptor;
extern const ProtobufCMessageDescriptor download_firmware_device_server_request__descriptor;
extern const ProtobufCMessageDescriptor download_firmware_device_server_response__descriptor;
extern const ProtobufCMessageDescriptor force_update_firmware_device_server_request__descriptor;
extern const ProtobufCMessageDescriptor force_update_firmware_device_server_response__descriptor;
extern const ProtobufCMessageDescriptor register_device_server_request__descriptor;
extern const ProtobufCMessageDescriptor register_device_server_response__descriptor;
extern const ProtobufCMessageDescriptor update_wsendpoint_device_server_request__descriptor;
extern const ProtobufCMessageDescriptor update_wsendpoint_device_server_response__descriptor;
extern const ProtobufCMessageDescriptor force_update_firmware_all_devices_by_phone_server_request__descriptor;
extern const ProtobufCMessageDescriptor force_update_firmware_all_devices_by_phone_server_response__descriptor;
extern const ProtobufCMessageDescriptor list_scene_device_server_request__descriptor;
extern const ProtobufCMessageDescriptor list_scene_device_server_response__descriptor;
extern const ProtobufCMessageDescriptor get_switchers_server_request__descriptor;
extern const ProtobufCMessageDescriptor get_switchers_server_response__descriptor;
extern const ProtobufCMessageDescriptor get_switcher_server_request__descriptor;
extern const ProtobufCMessageDescriptor get_switcher_server_response__descriptor;
extern const ProtobufCMessageDescriptor get_log_switcher_server_request__descriptor;
extern const ProtobufCMessageDescriptor get_log_switcher_server_response__descriptor;
extern const ProtobufCMessageDescriptor get_icon_switchers_server_request__descriptor;
extern const ProtobufCMessageDescriptor get_icon_switchers_server_response__descriptor;
extern const ProtobufCMessageDescriptor update_switcher_server_request__descriptor;
extern const ProtobufCMessageDescriptor update_switcher_server_response__descriptor;
extern const ProtobufCMessageDescriptor switcher_server_request__descriptor;
extern const ProtobufCMessageDescriptor switcher_server_response__descriptor;
extern const ProtobufCMessageDescriptor get_switcher_schedules_server_request__descriptor;
extern const ProtobufCMessageDescriptor get_switcher_schedules_server_response__descriptor;
extern const ProtobufCMessageDescriptor get_switcher_schedule_server_request__descriptor;
extern const ProtobufCMessageDescriptor get_switcher_schedule_server_response__descriptor;
extern const ProtobufCMessageDescriptor get_count_switcher_schedule_server_request__descriptor;
extern const ProtobufCMessageDescriptor get_count_switcher_schedule_server_response__descriptor;
extern const ProtobufCMessageDescriptor add_switcher_schedule_server_request__descriptor;
extern const ProtobufCMessageDescriptor add_switcher_schedule_server_response__descriptor;
extern const ProtobufCMessageDescriptor update_switcher_schedule_server_request__descriptor;
extern const ProtobufCMessageDescriptor update_switcher_schedule_server_response__descriptor;
extern const ProtobufCMessageDescriptor delete_switcher_schedule_server_request__descriptor;
extern const ProtobufCMessageDescriptor delete_switcher_schedule_server_response__descriptor;
extern const ProtobufCMessageDescriptor set_active_switcher_schedule_server_request__descriptor;
extern const ProtobufCMessageDescriptor set_active_switcher_schedule_server_response__descriptor;
extern const ProtobufCMessageDescriptor get_curtain_switcher_server_request__descriptor;
extern const ProtobufCMessageDescriptor get_curtain_switcher_server_response__descriptor;
extern const ProtobufCMessageDescriptor update_curtain_switcher_server_request__descriptor;
extern const ProtobufCMessageDescriptor update_curtain_switcher_server_response__descriptor;
extern const ProtobufCMessageDescriptor get_curtain_switcher_state_server_request__descriptor;
extern const ProtobufCMessageDescriptor get_curtain_switcher_state_server_response__descriptor;
extern const ProtobufCMessageDescriptor curtain_switcher_server_request__descriptor;
extern const ProtobufCMessageDescriptor curtain_switcher_server_response__descriptor;
extern const ProtobufCMessageDescriptor get_curtain_switcher_schedules_server_request__descriptor;
extern const ProtobufCMessageDescriptor get_curtain_switcher_schedules_server_response__descriptor;
extern const ProtobufCMessageDescriptor get_curtain_switcher_schedule_server_request__descriptor;
extern const ProtobufCMessageDescriptor get_curtain_switcher_schedule_server_response__descriptor;
extern const ProtobufCMessageDescriptor get_count_curtain_switcher_schedule_server_request__descriptor;
extern const ProtobufCMessageDescriptor get_count_curtain_switcher_schedule_server_response__descriptor;
extern const ProtobufCMessageDescriptor add_curtain_switcher_schedule_server_request__descriptor;
extern const ProtobufCMessageDescriptor add_curtain_switcher_schedule_server_response__descriptor;
extern const ProtobufCMessageDescriptor update_curtain_switcher_schedule_server_request__descriptor;
extern const ProtobufCMessageDescriptor update_curtain_switcher_schedule_server_response__descriptor;
extern const ProtobufCMessageDescriptor delete_curtain_switcher_schedule_server_request__descriptor;
extern const ProtobufCMessageDescriptor delete_curtain_switcher_schedule_server_response__descriptor;
extern const ProtobufCMessageDescriptor set_active_curtain_switcher_schedule_server_request__descriptor;
extern const ProtobufCMessageDescriptor set_active_curtain_switcher_schedule_server_response__descriptor;
extern const ProtobufCMessageDescriptor get_meter_server_request__descriptor;
extern const ProtobufCMessageDescriptor get_meter_server_response__descriptor;
extern const ProtobufCMessageDescriptor update_meter_server_request__descriptor;
extern const ProtobufCMessageDescriptor update_meter_server_response__descriptor;
extern const ProtobufCMessageDescriptor get_meter_estimates_day_in_month_server_request__descriptor;
extern const ProtobufCMessageDescriptor get_meter_estimates_day_in_month_server_response__descriptor;
extern const ProtobufCMessageDescriptor get_meter_estimates_hour_in_day_server_request__descriptor;
extern const ProtobufCMessageDescriptor get_meter_estimates_hour_in_day_server_response__descriptor;
extern const ProtobufCMessageDescriptor get_meters_by_home_id_server_request__descriptor;
extern const ProtobufCMessageDescriptor get_meters_by_home_id_server_response__descriptor;
extern const ProtobufCMessageDescriptor get_meter_missing_in_day_server_request__descriptor;
extern const ProtobufCMessageDescriptor get_meter_missing_in_day_server_response__descriptor;
extern const ProtobufCMessageDescriptor get_air_conditioner_state_server_request__descriptor;
extern const ProtobufCMessageDescriptor get_air_conditioner_state_server_response__descriptor;
extern const ProtobufCMessageDescriptor air_conditioner_server_request__descriptor;
extern const ProtobufCMessageDescriptor air_conditioner_server_response__descriptor;
extern const ProtobufCMessageDescriptor get_remotes_server_request__descriptor;
extern const ProtobufCMessageDescriptor get_remotes_server_response__descriptor;
extern const ProtobufCMessageDescriptor get_remote_server_request__descriptor;
extern const ProtobufCMessageDescriptor get_remote_server_response__descriptor;
extern const ProtobufCMessageDescriptor get_remote_libraries_server_request__descriptor;
extern const ProtobufCMessageDescriptor get_remote_libraries_server_response__descriptor;
extern const ProtobufCMessageDescriptor get_commands_remote_server_request__descriptor;
extern const ProtobufCMessageDescriptor get_commands_remote_server_response__descriptor;
extern const ProtobufCMessageDescriptor send_command_remote_server_request__descriptor;
extern const ProtobufCMessageDescriptor send_command_remote_server_response__descriptor;
extern const ProtobufCMessageDescriptor learn_command_remote_server_request__descriptor;
extern const ProtobufCMessageDescriptor learn_command_remote_server_response__descriptor;
extern const ProtobufCMessageDescriptor restore_command_remote_server_request__descriptor;
extern const ProtobufCMessageDescriptor restore_command_remote_server_response__descriptor;
extern const ProtobufCMessageDescriptor add_remote_server_request__descriptor;
extern const ProtobufCMessageDescriptor add_remote_server_response__descriptor;
extern const ProtobufCMessageDescriptor update_remote_server_request__descriptor;
extern const ProtobufCMessageDescriptor update_remote_server_response__descriptor;
extern const ProtobufCMessageDescriptor delete_remote_server_request__descriptor;
extern const ProtobufCMessageDescriptor delete_remote_server_response__descriptor;
extern const ProtobufCMessageDescriptor get_remote_schedules_server_request__descriptor;
extern const ProtobufCMessageDescriptor get_remote_schedules_server_response__descriptor;
extern const ProtobufCMessageDescriptor get_count_remote_schedule_server_request__descriptor;
extern const ProtobufCMessageDescriptor get_count_remote_schedule_server_response__descriptor;
extern const ProtobufCMessageDescriptor get_remote_schedule_server_request__descriptor;
extern const ProtobufCMessageDescriptor get_remote_schedule_server_response__descriptor;
extern const ProtobufCMessageDescriptor add_remote_schedule_server_request__descriptor;
extern const ProtobufCMessageDescriptor add_remote_schedule_server_response__descriptor;
extern const ProtobufCMessageDescriptor update_remote_schedule_server_request__descriptor;
extern const ProtobufCMessageDescriptor update_remote_schedule_server_response__descriptor;
extern const ProtobufCMessageDescriptor delete_remote_schedule_server_request__descriptor;
extern const ProtobufCMessageDescriptor delete_remote_schedule_server_response__descriptor;
extern const ProtobufCMessageDescriptor set_active_remote_schedule_server_request__descriptor;
extern const ProtobufCMessageDescriptor set_active_remote_schedule_server_response__descriptor;
extern const ProtobufCMessageDescriptor get_remote_multis_server_request__descriptor;
extern const ProtobufCMessageDescriptor get_remote_multis_server_response__descriptor;
extern const ProtobufCMessageDescriptor add_remote_multi_server_request__descriptor;
extern const ProtobufCMessageDescriptor add_remote_multi_server_response__descriptor;
extern const ProtobufCMessageDescriptor delete_remote_multi_server_request__descriptor;
extern const ProtobufCMessageDescriptor delete_remote_multi_server_response__descriptor;
extern const ProtobufCMessageDescriptor add_remote_multi_library_cmd_server_request__descriptor;
extern const ProtobufCMessageDescriptor add_remote_multi_library_cmd_server_response__descriptor;
extern const ProtobufCMessageDescriptor delete_remote_multi_library_cmd_server_request__descriptor;
extern const ProtobufCMessageDescriptor delete_remote_multi_library_cmd_server_response__descriptor;
extern const ProtobufCMessageDescriptor update_remote_multi_library_cmd_server_request__descriptor;
extern const ProtobufCMessageDescriptor update_remote_multi_library_cmd_server_response__descriptor;
extern const ProtobufCMessageDescriptor update_group_remote_multi_library_cmd_server_request__descriptor;
extern const ProtobufCMessageDescriptor update_group_remote_multi_library_cmd_server_response__descriptor;
extern const ProtobufCMessageDescriptor change_remote_brand_remote_request__descriptor;
extern const ProtobufCMessageDescriptor change_remote_brand_remote_response__descriptor;
extern const ProtobufCMessageDescriptor control_remote_accommand_request__descriptor;
extern const ProtobufCMessageDescriptor control_remote_accommand_response__descriptor;
extern const ProtobufCMessageDescriptor get_scenes_server_request__descriptor;
extern const ProtobufCMessageDescriptor get_scenes_server_response__descriptor;
extern const ProtobufCMessageDescriptor get_scene_server_request__descriptor;
extern const ProtobufCMessageDescriptor get_scene_server_response__descriptor;
extern const ProtobufCMessageDescriptor add_scene_server_request__descriptor;
extern const ProtobufCMessageDescriptor add_scene_server_response__descriptor;
extern const ProtobufCMessageDescriptor update_scene_server_request__descriptor;
extern const ProtobufCMessageDescriptor update_scene_server_response__descriptor;
extern const ProtobufCMessageDescriptor delete_scene_server_request__descriptor;
extern const ProtobufCMessageDescriptor delete_scene_server_response__descriptor;
extern const ProtobufCMessageDescriptor delete_switcher_condition_server_request__descriptor;
extern const ProtobufCMessageDescriptor delete_switcher_condition_server_response__descriptor;
extern const ProtobufCMessageDescriptor delete_scene_action_server_request__descriptor;
extern const ProtobufCMessageDescriptor delete_scene_action_server_response__descriptor;
extern const ProtobufCMessageDescriptor run_scene_server_request__descriptor;
extern const ProtobufCMessageDescriptor run_scene_server_response__descriptor;
extern const ProtobufCMessageDescriptor scene_server_request__descriptor;
extern const ProtobufCMessageDescriptor scene_server_response__descriptor;
extern const ProtobufCMessageDescriptor scene_retry_confirm_server_request__descriptor;
extern const ProtobufCMessageDescriptor scene_retry_confirm_server_response__descriptor;
extern const ProtobufCMessageDescriptor set_scene_status_server_request__descriptor;
extern const ProtobufCMessageDescriptor set_scene_status_server_response__descriptor;
extern const ProtobufCMessageDescriptor test_scene_server_request__descriptor;
extern const ProtobufCMessageDescriptor test_scene_server_response__descriptor;
extern const ProtobufCMessageDescriptor scene_trigger_server_request__descriptor;
extern const ProtobufCMessageDescriptor scene_trigger_server_response__descriptor;
extern const ProtobufCMessageDescriptor get_home_tab_server_request__descriptor;
extern const ProtobufCMessageDescriptor get_home_tab_server_response__descriptor;
extern const ProtobufCMessageDescriptor get_electric_tab_server_request__descriptor;
extern const ProtobufCMessageDescriptor get_electric_tab_server_response__descriptor;
extern const ProtobufCMessageDescriptor get_switcher_tab_server_request__descriptor;
extern const ProtobufCMessageDescriptor get_switcher_tab_server_response__descriptor;
extern const ProtobufCMessageDescriptor switcher_on_changed_server_response__descriptor;
extern const ProtobufCMessageDescriptor curtain_switcher_on_changed_server_response__descriptor;
extern const ProtobufCMessageDescriptor air_conditioner_on_changed_server_response__descriptor;
extern const ProtobufCMessageDescriptor remote_on_changed_server_response__descriptor;
extern const ProtobufCMessageDescriptor meter_on_changed_server_response__descriptor;
extern const ProtobufCMessageDescriptor device_on_changed_device_server_response__descriptor;
extern const ProtobufCMessageDescriptor progress_update_firmware_on_changed_device_server_response__descriptor;
extern const ProtobufCMessageDescriptor download_firmware_on_changed_device_server_response__descriptor;
extern const ProtobufCMessageDescriptor motion_on_changed_server_response__descriptor;
extern const ProtobufCMessageDescriptor scene_on_changed_server_response__descriptor;
extern const ProtobufCMessageDescriptor homekit_on_changed_server_response__descriptor;
extern const ProtobufCMessageDescriptor button_on_changed_server_response__descriptor;
extern const ProtobufCMessageDescriptor group_control_on_changed_server_response__descriptor;
extern const ProtobufCMessageDescriptor led_driver_on_changed_server_response__descriptor;
extern const ProtobufCMessageDescriptor environment_sensor_on_changed_server_response__descriptor;
extern const ProtobufCMessageDescriptor smart_plug_on_changed_server_response__descriptor;
extern const ProtobufCMessageDescriptor curtain_on_changed_server_response__descriptor;
extern const ProtobufCMessageDescriptor echo_server_request__descriptor;
extern const ProtobufCMessageDescriptor echo_server_response__descriptor;
extern const ProtobufCMessageDescriptor motion_server_request__descriptor;
extern const ProtobufCMessageDescriptor motion_server_response__descriptor;
extern const ProtobufCMessageDescriptor get_motion_server_request__descriptor;
extern const ProtobufCMessageDescriptor get_motion_server_response__descriptor;
extern const ProtobufCMessageDescriptor update_motion_server_request__descriptor;
extern const ProtobufCMessageDescriptor update_motion_server_response__descriptor;
extern const ProtobufCMessageDescriptor get_homekit_info_server_request__descriptor;
extern const ProtobufCMessageDescriptor get_homekit_info_server_response__descriptor;
extern const ProtobufCMessageDescriptor update_homekit_server_request__descriptor;
extern const ProtobufCMessageDescriptor update_homekit_server_response__descriptor;
extern const ProtobufCMessageDescriptor set_homekit_mode_server_request__descriptor;
extern const ProtobufCMessageDescriptor set_homekit_mode_server_response__descriptor;
extern const ProtobufCMessageDescriptor get_projects_server_request__descriptor;
extern const ProtobufCMessageDescriptor get_projects_server_response__descriptor;
extern const ProtobufCMessageDescriptor get_buildings_server_request__descriptor;
extern const ProtobufCMessageDescriptor get_buildings_server_response__descriptor;
extern const ProtobufCMessageDescriptor get_floors_server_request__descriptor;
extern const ProtobufCMessageDescriptor get_floors_server_response__descriptor;
extern const ProtobufCMessageDescriptor get_apartments_server_request__descriptor;
extern const ProtobufCMessageDescriptor get_apartments_server_response__descriptor;
extern const ProtobufCMessageDescriptor add_user_home_server_request__descriptor;
extern const ProtobufCMessageDescriptor add_user_home_server_response__descriptor;
extern const ProtobufCMessageDescriptor delete_user_home_server_request__descriptor;
extern const ProtobufCMessageDescriptor delete_user_home_server_response__descriptor;
extern const ProtobufCMessageDescriptor get_unread_server_request__descriptor;
extern const ProtobufCMessageDescriptor get_unread_server_response__descriptor;
extern const ProtobufCMessageDescriptor set_read_server_request__descriptor;
extern const ProtobufCMessageDescriptor set_read_server_response__descriptor;
extern const ProtobufCMessageDescriptor get_backgrounds_server_request__descriptor;
extern const ProtobufCMessageDescriptor get_backgrounds_server_response__descriptor;
extern const ProtobufCMessageDescriptor get_auto_offs_server_request__descriptor;
extern const ProtobufCMessageDescriptor get_auto_offs_server_response__descriptor;
extern const ProtobufCMessageDescriptor get_type_devices_server_request__descriptor;
extern const ProtobufCMessageDescriptor get_type_devices_server_response__descriptor;
extern const ProtobufCMessageDescriptor get_button_info_server_request__descriptor;
extern const ProtobufCMessageDescriptor get_button_info_server_response__descriptor;
extern const ProtobufCMessageDescriptor update_button_server_request__descriptor;
extern const ProtobufCMessageDescriptor update_button_server_response__descriptor;
extern const ProtobufCMessageDescriptor group_control_server_request__descriptor;
extern const ProtobufCMessageDescriptor group_control_server_response__descriptor;
extern const ProtobufCMessageDescriptor get_group_control_info_server_request__descriptor;
extern const ProtobufCMessageDescriptor get_group_control_info_server_response__descriptor;
extern const ProtobufCMessageDescriptor get_controls_server_request__descriptor;
extern const ProtobufCMessageDescriptor get_controls_server_response__descriptor;
extern const ProtobufCMessageDescriptor add_group_control_server_request__descriptor;
extern const ProtobufCMessageDescriptor add_group_control_server_response__descriptor;
extern const ProtobufCMessageDescriptor update_group_control_server_request__descriptor;
extern const ProtobufCMessageDescriptor update_group_control_server_response__descriptor;
extern const ProtobufCMessageDescriptor delete_group_control_server_request__descriptor;
extern const ProtobufCMessageDescriptor delete_group_control_server_response__descriptor;
extern const ProtobufCMessageDescriptor led_driver_server_request__descriptor;
extern const ProtobufCMessageDescriptor led_driver_server_response__descriptor;
extern const ProtobufCMessageDescriptor get_led_driver_server_request__descriptor;
extern const ProtobufCMessageDescriptor get_led_driver_server_response__descriptor;
extern const ProtobufCMessageDescriptor get_led_driver_item_server_request__descriptor;
extern const ProtobufCMessageDescriptor get_led_driver_item_server_response__descriptor;
extern const ProtobufCMessageDescriptor update_led_driver_server_request__descriptor;
extern const ProtobufCMessageDescriptor update_led_driver_server_response__descriptor;
extern const ProtobufCMessageDescriptor update_led_driver_item_server_request__descriptor;
extern const ProtobufCMessageDescriptor update_led_driver_item_server_response__descriptor;
extern const ProtobufCMessageDescriptor touch_panel_change_component_server_request__descriptor;
extern const ProtobufCMessageDescriptor touch_panel_control_switcher_server_request__descriptor;
extern const ProtobufCMessageDescriptor touch_panel_update_switcher_server_request__descriptor;
extern const ProtobufCMessageDescriptor touch_panel_control_curtain_switcher_server_request__descriptor;
extern const ProtobufCMessageDescriptor touch_panel_update_curtain_switcher_server_request__descriptor;
extern const ProtobufCMessageDescriptor touch_panel_update_scene_server_request__descriptor;
extern const ProtobufCMessageDescriptor touch_panel_control_led_driver_server_request__descriptor;
extern const ProtobufCMessageDescriptor touch_panel_update_led_driver_server_request__descriptor;
extern const ProtobufCMessageDescriptor curtain_server_request__descriptor;
extern const ProtobufCMessageDescriptor curtain_server_response__descriptor;
extern const ProtobufCMessageDescriptor auth_server_message__descriptor;
extern const ProtobufCMessageDescriptor user_server_message__descriptor;
extern const ProtobufCMessageDescriptor home_server_message__descriptor;
extern const ProtobufCMessageDescriptor room_server_message__descriptor;
extern const ProtobufCMessageDescriptor device_server_message__descriptor;
extern const ProtobufCMessageDescriptor switcher_server_message__descriptor;
extern const ProtobufCMessageDescriptor curtain_switcher_server_message__descriptor;
extern const ProtobufCMessageDescriptor meter_server_message__descriptor;
extern const ProtobufCMessageDescriptor air_conditioner_server_message__descriptor;
extern const ProtobufCMessageDescriptor remote_server_message__descriptor;
extern const ProtobufCMessageDescriptor scene_server_message__descriptor;
extern const ProtobufCMessageDescriptor general_tab_server_message__descriptor;
extern const ProtobufCMessageDescriptor on_changed_server_message__descriptor;
extern const ProtobufCMessageDescriptor simulator_server_message__descriptor;
extern const ProtobufCMessageDescriptor motion_server_message__descriptor;
extern const ProtobufCMessageDescriptor homekit_server_message__descriptor;
extern const ProtobufCMessageDescriptor project_server_message__descriptor;
extern const ProtobufCMessageDescriptor building_server_message__descriptor;
extern const ProtobufCMessageDescriptor floor_server_message__descriptor;
extern const ProtobufCMessageDescriptor apartment_server_message__descriptor;
extern const ProtobufCMessageDescriptor user_home_server_message__descriptor;
extern const ProtobufCMessageDescriptor inbox_server_message__descriptor;
extern const ProtobufCMessageDescriptor setting_server_message__descriptor;
extern const ProtobufCMessageDescriptor button_server_message__descriptor;
extern const ProtobufCMessageDescriptor group_control_server_message__descriptor;
extern const ProtobufCMessageDescriptor led_driver_server_message__descriptor;
extern const ProtobufCMessageDescriptor touch_panel_server_message__descriptor;
extern const ProtobufCMessageDescriptor curtain_server_message__descriptor;
extern const ProtobufCMessageDescriptor server_message__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_server_2dmessage_2eproto__INCLUDED */
