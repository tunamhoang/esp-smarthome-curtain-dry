/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: client-message.proto */

#ifndef PROTOBUF_C_client_2dmessage_2eproto__INCLUDED
#define PROTOBUF_C_client_2dmessage_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "common-message.pb-c.h"

typedef struct ForceUpdateFirmwareDeviceClientRequest ForceUpdateFirmwareDeviceClientRequest;
typedef struct ForceUpdateFirmwareDeviceClientResponse ForceUpdateFirmwareDeviceClientResponse;
typedef struct UpdateDeviceClientRequest UpdateDeviceClientRequest;
typedef struct UpdateDeviceClientResponse UpdateDeviceClientResponse;
typedef struct UpdateWSEndpointClientRequest UpdateWSEndpointClientRequest;
typedef struct UpdateWSEndpointClientResponse UpdateWSEndpointClientResponse;
typedef struct DeleteDeviceClientRequest DeleteDeviceClientRequest;
typedef struct DeleteDeviceClientResponse DeleteDeviceClientResponse;
typedef struct GetSwitchersClientRequest GetSwitchersClientRequest;
typedef struct GetSwitchersClientResponse GetSwitchersClientResponse;
typedef struct GetSwitcherClientRequest GetSwitcherClientRequest;
typedef struct GetSwitcherClientResponse GetSwitcherClientResponse;
typedef struct GetLogSwitcherClientRequest GetLogSwitcherClientRequest;
typedef struct GetLogSwitcherClientResponse GetLogSwitcherClientResponse;
typedef struct SwitcherClientRequest SwitcherClientRequest;
typedef struct SwitcherClientResponse SwitcherClientResponse;
typedef struct AddSwitcherScheduleClientRequest AddSwitcherScheduleClientRequest;
typedef struct AddSwitcherScheduleClientResponse AddSwitcherScheduleClientResponse;
typedef struct UpdateSwitcherScheduleClientRequest UpdateSwitcherScheduleClientRequest;
typedef struct UpdateSwitcherScheduleClientResponse UpdateSwitcherScheduleClientResponse;
typedef struct DeleteSwitcherScheduleClientRequest DeleteSwitcherScheduleClientRequest;
typedef struct DeleteSwitcherScheduleClientResponse DeleteSwitcherScheduleClientResponse;
typedef struct UpdateSwitcherClientRequest UpdateSwitcherClientRequest;
typedef struct UpdateSwitcherClientResponse UpdateSwitcherClientResponse;
typedef struct UpdateSwitcherState UpdateSwitcherState;
typedef struct CurtainSwitcherClientRequest CurtainSwitcherClientRequest;
typedef struct CurtainSwitcherClientResponse CurtainSwitcherClientResponse;
typedef struct AddCurtainSwitcherScheduleClientRequest AddCurtainSwitcherScheduleClientRequest;
typedef struct AddCurtainSwitcherScheduleClientResponse AddCurtainSwitcherScheduleClientResponse;
typedef struct UpdateCurtainSwitcherScheduleClientRequest UpdateCurtainSwitcherScheduleClientRequest;
typedef struct UpdateCurtainSwitcherScheduleClientResponse UpdateCurtainSwitcherScheduleClientResponse;
typedef struct DeleteCurtainSwitcherScheduleClientRequest DeleteCurtainSwitcherScheduleClientRequest;
typedef struct DeleteCurtainSwitcherScheduleClientResponse DeleteCurtainSwitcherScheduleClientResponse;
typedef struct AirConditionerClientRequest AirConditionerClientRequest;
typedef struct AirConditionerClientResponse AirConditionerClientResponse;
typedef struct GetAirConditionerClientRequest GetAirConditionerClientRequest;
typedef struct GetAirConditionerClientResponse GetAirConditionerClientResponse;
typedef struct AirConditionerAddIndoorsRequest AirConditionerAddIndoorsRequest;
typedef struct AirConditionerAddIndoorsResponse AirConditionerAddIndoorsResponse;
typedef struct AirConditionerRemoveIndoorRequest AirConditionerRemoveIndoorRequest;
typedef struct AirConditionerRemoveIndoorResponse AirConditionerRemoveIndoorResponse;
typedef struct SendCommandRemoteClientRequest SendCommandRemoteClientRequest;
typedef struct SendCommandRemoteClientResponse SendCommandRemoteClientResponse;
typedef struct LearnCommandRemoteClientRequest LearnCommandRemoteClientRequest;
typedef struct LearnCommandRemoteClientResponse LearnCommandRemoteClientResponse;
typedef struct ControlRemoteACCommandClientRequest ControlRemoteACCommandClientRequest;
typedef struct ControlRemoteACCommandClientResponse ControlRemoteACCommandClientResponse;
typedef struct MeterOnChangedClientResponse MeterOnChangedClientResponse;
typedef struct SwitcherOnChangedClientResponse SwitcherOnChangedClientResponse;
typedef struct CurtainSwitcherOnChangedClientResponse CurtainSwitcherOnChangedClientResponse;
typedef struct AirConditionerOnChangedClientResponse AirConditionerOnChangedClientResponse;
typedef struct ProgressUpdateFirmwareOnChangedDeviceClientResponse ProgressUpdateFirmwareOnChangedDeviceClientResponse;
typedef struct DeviceOnChangedDeviceClientResponse DeviceOnChangedDeviceClientResponse;
typedef struct MotionOnChangedClientResponse MotionOnChangedClientResponse;
typedef struct HomekitOnChangedClientResponse HomekitOnChangedClientResponse;
typedef struct ButtonOnChangedClientResponse ButtonOnChangedClientResponse;
typedef struct DebugLoggingResponse DebugLoggingResponse;
typedef struct LedDriverOnChangedClientResponse LedDriverOnChangedClientResponse;
typedef struct EnvironmentOnchangedClientResponse EnvironmentOnchangedClientResponse;
typedef struct SmartPlugOnchangedClientResponse SmartPlugOnchangedClientResponse;
typedef struct CurtainOnChangedClientResponse CurtainOnChangedClientResponse;
typedef struct TouchPanelControlSwitchOnChangedClientResponse TouchPanelControlSwitchOnChangedClientResponse;
typedef struct TouchPanelControlCurtainSwitchOnChangedClientResponse TouchPanelControlCurtainSwitchOnChangedClientResponse;
typedef struct TouchPanelControlSceneOnChangedClientResponse TouchPanelControlSceneOnChangedClientResponse;
typedef struct TouchPanelControlLedDriverOnChangedClientResponse TouchPanelControlLedDriverOnChangedClientResponse;
typedef struct TouchPanelRequestComponentStateOnChangedClientResponse TouchPanelRequestComponentStateOnChangedClientResponse;
typedef struct MotionClientRequest MotionClientRequest;
typedef struct MotionClientResponse MotionClientResponse;
typedef struct UpdateMotionState UpdateMotionState;
typedef struct SceneClientRequest SceneClientRequest;
typedef struct SceneClientResponse SceneClientResponse;
typedef struct LedDriverClientRequest LedDriverClientRequest;
typedef struct LedDriverClientResponse LedDriverClientResponse;
typedef struct SceneGroupClientRequest SceneGroupClientRequest;
typedef struct MeterClientRequest MeterClientRequest;
typedef struct MeterClientResponse MeterClientResponse;
typedef struct MeterClientConfirm MeterClientConfirm;
typedef struct SetHomekitModeClientRequest SetHomekitModeClientRequest;
typedef struct SetHomekitModeClientResponse SetHomekitModeClientResponse;
typedef struct SceneTriggerClientRequest SceneTriggerClientRequest;
typedef struct SceneTriggerClientResponse SceneTriggerClientResponse;
typedef struct CurtainClientRequest CurtainClientRequest;
typedef struct CurtainClientResponse CurtainClientResponse;
typedef struct TouchPanelChangeComponentClientRequest TouchPanelChangeComponentClientRequest;
typedef struct TouchPanelControlSwitcherClientRequest TouchPanelControlSwitcherClientRequest;
typedef struct TouchPanelUpdateSwitcherClientRequest TouchPanelUpdateSwitcherClientRequest;
typedef struct TouchPanelControlCurtainSwitcherClientRequest TouchPanelControlCurtainSwitcherClientRequest;
typedef struct TouchPanelUpdateCurtainSwitcherClientRequest TouchPanelUpdateCurtainSwitcherClientRequest;
typedef struct TouchPanelUpdateSceneClientRequest TouchPanelUpdateSceneClientRequest;
typedef struct TouchPanelControlLedDriverClientRequest TouchPanelControlLedDriverClientRequest;
typedef struct TouchPanelUpdateLedDriverClientRequest TouchPanelUpdateLedDriverClientRequest;
typedef struct DeviceClientMessage DeviceClientMessage;
typedef struct SwitcherClientMessage SwitcherClientMessage;
typedef struct CurtainSwitcherClientMessage CurtainSwitcherClientMessage;
typedef struct AirConditionerClientMessage AirConditionerClientMessage;
typedef struct RemoteClientMessage RemoteClientMessage;
typedef struct OnChangedClientMessage OnChangedClientMessage;
typedef struct MotionClientMessage MotionClientMessage;
typedef struct SceneClientMessage SceneClientMessage;
typedef struct LedDriverClientMessage LedDriverClientMessage;
typedef struct MeterClientMessage MeterClientMessage;
typedef struct HomekitClientMessage HomekitClientMessage;
typedef struct SceneTriggerClientMessage SceneTriggerClientMessage;
typedef struct CurtainClientMessage CurtainClientMessage;
typedef struct TouchPanelClientMessage TouchPanelClientMessage;
typedef struct ClientMessage ClientMessage;


/* --- enums --- */


/* --- messages --- */

/*
 * Nhận được yêu cầu cập nhật Firmware
 */
struct  ForceUpdateFirmwareDeviceClientRequest
{
  ProtobufCMessage base;
  /*
   * hardwareId của thiết bị
   */
  char *hardwareid;
};
#define FORCE_UPDATE_FIRMWARE_DEVICE_CLIENT_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&force_update_firmware_device_client_request__descriptor) \
, (char *)protobuf_c_empty_string }


/*
 * Phản hồi thông tin cập nhật Firmware
 */
struct  ForceUpdateFirmwareDeviceClientResponse
{
  ProtobufCMessage base;
  /*
   * deviceId của thiết bị
   */
  char *deviceid;
  StatusCode *statuscode;
};
#define FORCE_UPDATE_FIRMWARE_DEVICE_CLIENT_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&force_update_firmware_device_client_response__descriptor) \
, (char *)protobuf_c_empty_string, NULL }


/*
 * Nhận được yêu cầu cập nhật thiết bị
 */
struct  UpdateDeviceClientRequest
{
  ProtobufCMessage base;
  /*
   * Update tự động hoặc thủ công
   */
  uint32_t updatemode;
  /*
   * hardwareId của thiết bị
   */
  char *hardwareid;
  /*
   * Độ nhạy của thiết bị
   */
  uint32_t reactivity;
  /*
   * Độ sáng của thiết bị
   */
  uint32_t brightness;
  /*
   * Thời gian chờ để tắt PIR
   */
  uint32_t timedelay;
  /*
   * |0000|0000|0000|0000|0000|0000|0000|0000|,
   */
  uint32_t sceneactivemap;
};
#define UPDATE_DEVICE_CLIENT_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&update_device_client_request__descriptor) \
, 0, (char *)protobuf_c_empty_string, 0, 0, 0, 0 }


/*
 * Phản hồi cập nhật thiết bị
 */
struct  UpdateDeviceClientResponse
{
  ProtobufCMessage base;
  /*
   * deviceId của thiết bị
   */
  char *deviceid;
  StatusCode *statuscode;
};
#define UPDATE_DEVICE_CLIENT_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&update_device_client_response__descriptor) \
, (char *)protobuf_c_empty_string, NULL }


struct  UpdateWSEndpointClientRequest
{
  ProtobufCMessage base;
  char *deviceid;
  char *wsenpoint;
};
#define UPDATE_WSENDPOINT_CLIENT_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&update_wsendpoint_client_request__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  UpdateWSEndpointClientResponse
{
  ProtobufCMessage base;
  StatusCode *statuscode;
};
#define UPDATE_WSENDPOINT_CLIENT_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&update_wsendpoint_client_response__descriptor) \
, NULL }


struct  DeleteDeviceClientRequest
{
  ProtobufCMessage base;
  char *hardwareid;
};
#define DELETE_DEVICE_CLIENT_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&delete_device_client_request__descriptor) \
, (char *)protobuf_c_empty_string }


struct  DeleteDeviceClientResponse
{
  ProtobufCMessage base;
  StatusCode *statuscode;
};
#define DELETE_DEVICE_CLIENT_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&delete_device_client_response__descriptor) \
, NULL }


/*
 * Nhận được yêu cầu gửi danh sách công tắc của 1 thiết bị
 */
struct  GetSwitchersClientRequest
{
  ProtobufCMessage base;
  /*
   * hardwareId của thiết bị
   */
  char *hardwareid;
};
#define GET_SWITCHERS_CLIENT_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_switchers_client_request__descriptor) \
, (char *)protobuf_c_empty_string }


/*
 * Phản hồi danh sách công tắc của 1 thiết bị
 */
struct  GetSwitchersClientResponse
{
  ProtobufCMessage base;
  /*
   * Thông tin về thiết bị
   */
  Switcher *switchers;
  /*
   * deviceId của thiết bị
   */
  char *deviceid;
  StatusCode *statuscode;
};
#define GET_SWITCHERS_CLIENT_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_switchers_client_response__descriptor) \
, NULL, (char *)protobuf_c_empty_string, NULL }


/*
 * Nhận được yêu cầu gửi trạng thái của 1 nút của công tắc
 */
struct  GetSwitcherClientRequest
{
  ProtobufCMessage base;
  /*
   * Công tắc 1,2,3,4
   */
  uint32_t switcher;
  /*
   * hardwareId của thiết bị
   */
  char *hardwareid;
};
#define GET_SWITCHER_CLIENT_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_switcher_client_request__descriptor) \
, 0, (char *)protobuf_c_empty_string }


/*
 * Phản hồi trạng thái của 1 nút của công tắc
 */
struct  GetSwitcherClientResponse
{
  ProtobufCMessage base;
  /*
   * Công tắc 1,2,3,4
   */
  uint32_t switcher;
  /*
   * Trạng thái ON/OFF
   */
  PowerState powerstate;
  /*
   * Thông tin về thiết bị
   */
  Device *device;
  /*
   * Thời gian chuyển trạng thái của công tắc
   */
  DateTime *datetime;
  /*
   * deviceId của thiết bị
   */
  char *deviceid;
  StatusCode *statuscode;
};
#define GET_SWITCHER_CLIENT_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_switcher_client_response__descriptor) \
, 0, POWER_STATE__Off, NULL, NULL, (char *)protobuf_c_empty_string, NULL }


/*
 * Nhận được yêu cầu trả về nhật ký, hành trình thiết bị
 */
struct  GetLogSwitcherClientRequest
{
  ProtobufCMessage base;
  /*
   * Công tắc 1,2,3,4
   */
  uint32_t switcher;
  /*
   * hardwareId của thiết bị
   */
  char *hardwareid;
};
#define GET_LOG_SWITCHER_CLIENT_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_log_switcher_client_request__descriptor) \
, 0, (char *)protobuf_c_empty_string }


/*
 * Phản hồi nhật ký/hành trình thiết bị
 */
struct  GetLogSwitcherClientResponse
{
  ProtobufCMessage base;
  /*
   * Công tắc 1,2,3,4
   */
  uint32_t switcher;
  uint32_t totaltimeonorgin;
  uint32_t totaltimeonyear;
  uint32_t totaltimeonmonth;
  uint32_t timeonlastdate;
  uint32_t timeofflastdate;
  /*
   * deviceId của thiết bị
   */
  char *deviceid;
  StatusCode *statuscode;
};
#define GET_LOG_SWITCHER_CLIENT_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_log_switcher_client_response__descriptor) \
, 0, 0, 0, 0, 0, 0, (char *)protobuf_c_empty_string, NULL }


/*
 * Nhận được yêu cầu thay đổi On/Off thiết bị
 */
struct  SwitcherClientRequest
{
  ProtobufCMessage base;
  /*
   * Chỉ được sử dụng khi dùng topic
   */
  char *deviceid;
  /*
   * Công tắc 1,2,3,4
   */
  uint32_t switcher;
  /*
   * Trạng thái ON/OFF
   */
  PowerState powerstate;
  /*
   * hardwareId của thiết bị
   */
  char *hardwareid;
};
#define SWITCHER_CLIENT_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&switcher_client_request__descriptor) \
, (char *)protobuf_c_empty_string, 0, POWER_STATE__Off, (char *)protobuf_c_empty_string }


/*
 * Phản hồi thay đổi On/Off thiết bị
 */
struct  SwitcherClientResponse
{
  ProtobufCMessage base;
  /*
   * Công tắc 1,2,3,4
   */
  uint32_t switcher;
  /*
   * Trạng thái ON/OFF
   */
  PowerState powerstate;
  /*
   * deviceId
   */
  char *deviceid;
  StatusCode *statuscode;
};
#define SWITCHER_CLIENT_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&switcher_client_response__descriptor) \
, 0, POWER_STATE__Off, (char *)protobuf_c_empty_string, NULL }


/*
 * Nhận được yêu cầu thêm mới 1 lịch của 1 công tắc
 */
struct  AddSwitcherScheduleClientRequest
{
  ProtobufCMessage base;
  SwitcherSchedule *schedule;
  /*
   * hardwareId của thiết bị
   */
  char *hardwareid;
};
#define ADD_SWITCHER_SCHEDULE_CLIENT_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&add_switcher_schedule_client_request__descriptor) \
, NULL, (char *)protobuf_c_empty_string }


/*
 * Phản hồi thêm mới 1 lịch của 1 công tắc
 */
struct  AddSwitcherScheduleClientResponse
{
  ProtobufCMessage base;
  char *switcherscheduleid;
  /*
   * deviceId của thiết bị
   */
  char *deviceid;
  StatusCode *statuscode;
};
#define ADD_SWITCHER_SCHEDULE_CLIENT_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&add_switcher_schedule_client_response__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, NULL }


/*
 * Nhận được yêu cầu update 1 lịch của 1 công tắc
 */
struct  UpdateSwitcherScheduleClientRequest
{
  ProtobufCMessage base;
  SwitcherSchedule *schedule;
  /*
   * hardwareId của thiết bị
   */
  char *hardwareid;
};
#define UPDATE_SWITCHER_SCHEDULE_CLIENT_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&update_switcher_schedule_client_request__descriptor) \
, NULL, (char *)protobuf_c_empty_string }


/*
 * Phản hồi update 1 lịch của 1 công tắc
 */
struct  UpdateSwitcherScheduleClientResponse
{
  ProtobufCMessage base;
  char *switcherscheduleid;
  /*
   * deviceId của thiết bị
   */
  char *deviceid;
  StatusCode *statuscode;
};
#define UPDATE_SWITCHER_SCHEDULE_CLIENT_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&update_switcher_schedule_client_response__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, NULL }


/*
 * Nhận được yêu cầu xóa 1 lịch của 1 công tắc
 */
struct  DeleteSwitcherScheduleClientRequest
{
  ProtobufCMessage base;
  /*
   * Id của switcherScheduleId
   */
  char *switcherscheduleid;
  /*
   * hardwareId của thiết bị
   */
  char *hardwareid;
};
#define DELETE_SWITCHER_SCHEDULE_CLIENT_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&delete_switcher_schedule_client_request__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/*
 * Phản hồi xóa 1 lịch của 1 công tắc
 */
struct  DeleteSwitcherScheduleClientResponse
{
  ProtobufCMessage base;
  char *switcherscheduleid;
  /*
   * deviceId của thiết bị
   */
  char *deviceid;
  StatusCode *statuscode;
};
#define DELETE_SWITCHER_SCHEDULE_CLIENT_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&delete_switcher_schedule_client_response__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, NULL }


/*
 * Nhận được yêu cầu cập nhật 1 nút công tắc
 */
struct  UpdateSwitcherClientRequest
{
  ProtobufCMessage base;
  /*
   * Công tắc 1,2,3,4
   */
  uint32_t switcher;
  /*
   * 0: Off, 1: On, 2: Keep giữ trạng thái cũ
   */
  uint32_t keepstate;
  /*
   * hardwareId của thiết bị
   */
  char *hardwareid;
  /*
   * Tự tắt sau x phút hoạt động.
   */
  uint32_t autooff;
};
#define UPDATE_SWITCHER_CLIENT_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&update_switcher_client_request__descriptor) \
, 0, 0, (char *)protobuf_c_empty_string, 0 }


/*
 * Nhận được yêu cầu cập nhật 1 nút công tắc
 */
struct  UpdateSwitcherClientResponse
{
  ProtobufCMessage base;
  /*
   * deviceId
   */
  char *deviceid;
  /*
   * Công tắc 1,2,3,4
   */
  uint32_t switcher;
  /*
   * 0: Off, 1: On, 2: Keep giữ trạng thái cũ
   */
  uint32_t keepstate;
  /*
   * Tự tắt sau x phút hoạt động.
   */
  uint32_t autooff;
  StatusCode *statuscode;
};
#define UPDATE_SWITCHER_CLIENT_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&update_switcher_client_response__descriptor) \
, (char *)protobuf_c_empty_string, 0, 0, 0, NULL }


struct  UpdateSwitcherState
{
  ProtobufCMessage base;
  /*
   * deviceId
   */
  char *deviceid;
  /*
   * Công tắc 1,2,3,4
   */
  uint32_t switcher;
  /*
   * 0: Off, 1: On, 2: Keep giữ trạng thái cũ
   */
  uint32_t keepstate;
  /*
   * Tự tắt sau x phút hoạt động.
   */
  uint32_t autooff;
  /*
   * Trạng thái ON/OFF
   */
  PowerState powerstate;
};
#define UPDATE_SWITCHER_STATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&update_switcher_state__descriptor) \
, (char *)protobuf_c_empty_string, 0, 0, 0, POWER_STATE__Off }


/*
 * Nhận được lệnh điều khiển rèm cửa
 */
struct  CurtainSwitcherClientRequest
{
  ProtobufCMessage base;
  /*
   * Phần trăm hướng trong
   */
  uint32_t percentin;
  /*
   * Phần trăm hướng ngoài
   */
  uint32_t percentout;
  /*
   * hardwareId của thiết bị
   */
  char *hardwareid;
};
#define CURTAIN_SWITCHER_CLIENT_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&curtain_switcher_client_request__descriptor) \
, 0, 0, (char *)protobuf_c_empty_string }


/*
 * Phản hồi lệnh điều khiển rèm cửa
 */
struct  CurtainSwitcherClientResponse
{
  ProtobufCMessage base;
  /*
   * Phần trăm hướng trong
   */
  uint32_t percentin;
  /*
   * Phần trăm hướng ngoài
   */
  uint32_t percentout;
  /*
   * deviceId của thiết bị
   */
  char *deviceid;
  StatusCode *statuscode;
};
#define CURTAIN_SWITCHER_CLIENT_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&curtain_switcher_client_response__descriptor) \
, 0, 0, (char *)protobuf_c_empty_string, NULL }


/*
 * Nhận được yêu cầu thêm mới 1 lịch của rèm cửa
 */
struct  AddCurtainSwitcherScheduleClientRequest
{
  ProtobufCMessage base;
  CurtainSwitcherSchedule *schedule;
  /*
   * hardwareId của thiết bị
   */
  char *hardwareid;
};
#define ADD_CURTAIN_SWITCHER_SCHEDULE_CLIENT_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&add_curtain_switcher_schedule_client_request__descriptor) \
, NULL, (char *)protobuf_c_empty_string }


/*
 * Phản hồi thêm mới 1 lịch của rèm cửa
 */
struct  AddCurtainSwitcherScheduleClientResponse
{
  ProtobufCMessage base;
  char *curtainswitcherscheduleid;
  /*
   * deviceId của thiết bị
   */
  char *deviceid;
  StatusCode *statuscode;
};
#define ADD_CURTAIN_SWITCHER_SCHEDULE_CLIENT_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&add_curtain_switcher_schedule_client_response__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, NULL }


/*
 * Nhận được yêu cầu update 1 lịch của rèm cửa
 */
struct  UpdateCurtainSwitcherScheduleClientRequest
{
  ProtobufCMessage base;
  CurtainSwitcherSchedule *schedule;
  /*
   * hardwareId của thiết bị
   */
  char *hardwareid;
};
#define UPDATE_CURTAIN_SWITCHER_SCHEDULE_CLIENT_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&update_curtain_switcher_schedule_client_request__descriptor) \
, NULL, (char *)protobuf_c_empty_string }


/*
 * Phản hồi update 1 lịch của rèm cửa
 */
struct  UpdateCurtainSwitcherScheduleClientResponse
{
  ProtobufCMessage base;
  char *curtainswitcherscheduleid;
  /*
   * deviceId của thiết bị
   */
  char *deviceid;
  StatusCode *statuscode;
};
#define UPDATE_CURTAIN_SWITCHER_SCHEDULE_CLIENT_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&update_curtain_switcher_schedule_client_response__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, NULL }


/*
 * Nhận được yêu cầu xóa 1 lịch của rèm cửa
 */
struct  DeleteCurtainSwitcherScheduleClientRequest
{
  ProtobufCMessage base;
  /*
   * Id của curtainSwitcherScheduleId
   */
  char *curtainswitcherscheduleid;
  /*
   * hardwareId của thiết bị
   */
  char *hardwareid;
};
#define DELETE_CURTAIN_SWITCHER_SCHEDULE_CLIENT_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&delete_curtain_switcher_schedule_client_request__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/*
 * Phản hồi xóa 1 lịch của rèm cửa
 */
struct  DeleteCurtainSwitcherScheduleClientResponse
{
  ProtobufCMessage base;
  char *curtainswitcherscheduleid;
  /*
   * deviceId của thiết bị
   */
  char *deviceid;
  StatusCode *statuscode;
};
#define DELETE_CURTAIN_SWITCHER_SCHEDULE_CLIENT_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&delete_curtain_switcher_schedule_client_response__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, NULL }


/*
 * Nhận được yêu cầu điều khiển điều hòa
 */
struct  AirConditionerClientRequest
{
  ProtobufCMessage base;
  /*
   * Dành cho điều hòa điều khiển bằng dây
   */
  AirConditionerState *state;
  /*
   * hardwareId của thiết bị
   */
  char *hardwareid;
  /*
   * Chuỗi mã hóa dành cho điều hòa điều khiển bằng IR
   */
  char *encode;
};
#define AIR_CONDITIONER_CLIENT_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&air_conditioner_client_request__descriptor) \
, NULL, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/*
 * Phản hồi yêu cầu điều khiển điều hòa
 */
struct  AirConditionerClientResponse
{
  ProtobufCMessage base;
  AirConditionerState *state;
  /*
   * deviceId của thiết bị
   */
  char *deviceid;
  StatusCode *statuscode;
};
#define AIR_CONDITIONER_CLIENT_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&air_conditioner_client_response__descriptor) \
, NULL, (char *)protobuf_c_empty_string, NULL }


/*
 * Nhận được yêu cầu gửi trạng thái điều hòa
 */
struct  GetAirConditionerClientRequest
{
  ProtobufCMessage base;
  /*
   * hardwareId của thiết bị
   */
  char *hardwareid;
  /*
   * Id của dàn lạnh, 0 hoặc null nếu máy lạnh chỉ quản lý 1 dàn lạnh
   */
  uint32_t indoorid;
};
#define GET_AIR_CONDITIONER_CLIENT_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_air_conditioner_client_request__descriptor) \
, (char *)protobuf_c_empty_string, 0 }


/*
 * Phản hồi trạng thái điều hòa mới nhất
 */
struct  GetAirConditionerClientResponse
{
  ProtobufCMessage base;
  AirConditionerState *state;
  /*
   * deviceId của thiết bị
   */
  char *deviceid;
  StatusCode *statuscode;
};
#define GET_AIR_CONDITIONER_CLIENT_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&get_air_conditioner_client_response__descriptor) \
, NULL, (char *)protobuf_c_empty_string, NULL }


/*
 * Dùng cho trường hợp điều hòa yêu cầu thêm dàn lạnh
 */
struct  AirConditionerAddIndoorsRequest
{
  ProtobufCMessage base;
  char *deviceid;
  size_t n_indoorid;
  uint32_t *indoorid;
};
#define AIR_CONDITIONER_ADD_INDOORS_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&air_conditioner_add_indoors_request__descriptor) \
, (char *)protobuf_c_empty_string, 0,NULL }


/*
 * Phản hồi yêu cầu thêm dàn lạnh mới của điều hòa
 */
struct  AirConditionerAddIndoorsResponse
{
  ProtobufCMessage base;
  char *hardwareid;
  size_t n_indoorid;
  uint32_t *indoorid;
  StatusCode *statuscode;
};
#define AIR_CONDITIONER_ADD_INDOORS_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&air_conditioner_add_indoors_response__descriptor) \
, (char *)protobuf_c_empty_string, 0,NULL, NULL }


/*
 * Dùng cho trường hợp điều hòa yêu cầu xóa dàn lạnh
 */
struct  AirConditionerRemoveIndoorRequest
{
  ProtobufCMessage base;
  char *deviceid;
  uint32_t indoorid;
};
#define AIR_CONDITIONER_REMOVE_INDOOR_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&air_conditioner_remove_indoor_request__descriptor) \
, (char *)protobuf_c_empty_string, 0 }


/*
 * Phản hồi yêu cầu xóa dàn lạnh của điều hòa
 */
struct  AirConditionerRemoveIndoorResponse
{
  ProtobufCMessage base;
  char *hardwareid;
  StatusCode *statuscode;
};
#define AIR_CONDITIONER_REMOVE_INDOOR_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&air_conditioner_remove_indoor_response__descriptor) \
, (char *)protobuf_c_empty_string, NULL }


/*
 * Nhận được lệnh gửi đến thiết bị
 */
struct  SendCommandRemoteClientRequest
{
  ProtobufCMessage base;
  size_t n_commands;
  uint32_t *commands;
  /*
   * IR or RF
   */
  TypeLearn type;
  /*
   * hardwareId của thiết bị
   */
  char *hardwareid;
};
#define SEND_COMMAND_REMOTE_CLIENT_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&send_command_remote_client_request__descriptor) \
, 0,NULL, TYPE_LEARN__IR, (char *)protobuf_c_empty_string }


/*
 * Phản hồi lệnh gửi đến thiết bị
 */
struct  SendCommandRemoteClientResponse
{
  ProtobufCMessage base;
  /*
   * deviceId của thiết bị
   */
  char *deviceid;
  StatusCode *statuscode;
};
#define SEND_COMMAND_REMOTE_CLIENT_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&send_command_remote_client_response__descriptor) \
, (char *)protobuf_c_empty_string, NULL }


/*
 * Nhận được yêu cầu học lệnh
 */
struct  LearnCommandRemoteClientRequest
{
  ProtobufCMessage base;
  /*
   * Id của remote
   */
  char *remoteid;
  /*
   * Id của lệnh từ thư viện
   */
  char *remotelibrarycmdid;
  /*
   * Id của lệnh từ remote đa năng
   */
  char *remotemutillibrarycmdid;
  /*
   * Thiết lập timout cho client khi học lệnh
   */
  uint32_t timeout;
  /*
   * IR or RF
   */
  TypeLearn type;
  /*
   * hardwareId của thiết bị
   */
  char *hardwareid;
};
#define LEARN_COMMAND_REMOTE_CLIENT_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&learn_command_remote_client_request__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, TYPE_LEARN__IR, (char *)protobuf_c_empty_string }


/*
 * Phản hồi yêu cầu học lệnh
 */
struct  LearnCommandRemoteClientResponse
{
  ProtobufCMessage base;
  /*
   * Id của remote
   */
  char *remoteid;
  /*
   * Id của lệnh từ thư viện
   */
  char *remotelibrarycmdid;
  /*
   * Id của lệnh từ remote đa năng
   */
  char *remotemutillibrarycmdid;
  /*
   * Lệnh học được
   */
  size_t n_commands;
  uint32_t *commands;
  /*
   * IR or RF
   */
  TypeLearn type;
  /*
   * deviceId của thiết bị
   */
  char *deviceid;
  StatusCode *statuscode;
};
#define LEARN_COMMAND_REMOTE_CLIENT_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&learn_command_remote_client_response__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0,NULL, TYPE_LEARN__IR, (char *)protobuf_c_empty_string, NULL }


struct  ControlRemoteACCommandClientRequest
{
  ProtobufCMessage base;
  char *deviceid;
  char *model;
  RemoteACState *remoteacstate;
};
#define CONTROL_REMOTE_ACCOMMAND_CLIENT_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&control_remote_accommand_client_request__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, NULL }


struct  ControlRemoteACCommandClientResponse
{
  ProtobufCMessage base;
  StatusCode *statuscode;
};
#define CONTROL_REMOTE_ACCOMMAND_CLIENT_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&control_remote_accommand_client_response__descriptor) \
, NULL }


/*
 * Phản hồi thông tin thay đổi các chỉ số của thiết bị điện/nước runtime
 */
struct  MeterOnChangedClientResponse
{
  ProtobufCMessage base;
  size_t n_indexs;
  MeterIndex **indexs;
  StatusCode *statuscode;
};
#define METER_ON_CHANGED_CLIENT_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&meter_on_changed_client_response__descriptor) \
, 0,NULL, NULL }


/*
 * Dùng cho trường công tắc chủ động gửi On/Off lên server
 * Phản hồi thông tin thay đổi các chỉ số của thiết bị điện/nước runtime
 */
struct  SwitcherOnChangedClientResponse
{
  ProtobufCMessage base;
  /*
   * Công tắc 1,2,3,4
   */
  uint32_t switcher;
  /*
   * Trạng thái ON/OFF
   */
  PowerState powerstate;
  /*
   * deviceId của thiết bị
   */
  char *deviceid;
  /*
   * Thông tin về thiết bị bắc cầu
   */
  BridgeInfo *bridge;
  StatusCode *statuscode;
};
#define SWITCHER_ON_CHANGED_CLIENT_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&switcher_on_changed_client_response__descriptor) \
, 0, POWER_STATE__Off, (char *)protobuf_c_empty_string, NULL, NULL }


/*
 * Dùng cho trường công tắc rèm cửa chủ động gửi trạng thái lên server
 * Phản hồi thông tin thay đổi trạng thái của điều hòa runtime
 */
struct  CurtainSwitcherOnChangedClientResponse
{
  ProtobufCMessage base;
  /*
   * Phần trăm hướng trong
   */
  uint32_t percentin;
  /*
   * Phần trăm hướng ngoài
   */
  uint32_t percentout;
  /*
   * deviceId của thiết bị
   */
  char *deviceid;
  StatusCode *statuscode;
};
#define CURTAIN_SWITCHER_ON_CHANGED_CLIENT_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&curtain_switcher_on_changed_client_response__descriptor) \
, 0, 0, (char *)protobuf_c_empty_string, NULL }


/*
 * Dùng cho trường điều hòa chủ động gửi trạng thái lên server, runtime
 */
struct  AirConditionerOnChangedClientResponse
{
  ProtobufCMessage base;
  AirConditionerState *state;
  /*
   * deviceId của thiết bị
   */
  char *deviceid;
  StatusCode *statuscode;
};
#define AIR_CONDITIONER_ON_CHANGED_CLIENT_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&air_conditioner_on_changed_client_response__descriptor) \
, NULL, (char *)protobuf_c_empty_string, NULL }


/*
 * Phản hồi thông tin phần trăm cập nhật firmware runtime
 */
struct  ProgressUpdateFirmwareOnChangedDeviceClientResponse
{
  ProtobufCMessage base;
  /*
   * DeviceId cho việc đồng bộ tài khoản nhiều thiết bị
   */
  char *deviceid;
  /*
   * HardwareId thiết bị khi qua Root
   */
  char *hardwareid;
  /*
   * Để thiết bị biết max/len của buffer
   */
  uint32_t pagesize;
  /*
   * Vị trí index hiện tại bắt đầu từ 0
   */
  uint32_t pageindex;
  /*
   * Tổng page
   */
  uint32_t totalpage;
  StatusCode *statuscode;
};
#define PROGRESS_UPDATE_FIRMWARE_ON_CHANGED_DEVICE_CLIENT_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&progress_update_firmware_on_changed_device_client_response__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, 0, 0, NULL }


/*
 * Phản hồi thông tin kết nối của các thiết bị runtime
 */
struct  DeviceOnChangedDeviceClientResponse
{
  ProtobufCMessage base;
  /*
   * DeviceId
   */
  char *deviceid;
  /*
   * Offline/Online/Disconect
   */
  ConnectionState connectionstate;
  StatusCode *statuscode;
};
#define DEVICE_ON_CHANGED_DEVICE_CLIENT_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&device_on_changed_device_client_response__descriptor) \
, (char *)protobuf_c_empty_string, CONNECTION_STATE__Offline, NULL }


struct  MotionOnChangedClientResponse
{
  ProtobufCMessage base;
  /*
   * deviceId của thiết bị
   */
  char *deviceid;
  /*
   * state
   */
  MotionState motionstate;
  /*
   * Thông tin về thiết bị bắc cầu
   */
  BridgeInfo *bridge;
  MotionSensorType motionsensortype;
  float batterycapacity;
  StatusCode *statuscode;
};
#define MOTION_ON_CHANGED_CLIENT_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&motion_on_changed_client_response__descriptor) \
, (char *)protobuf_c_empty_string, MOTION_STATE__MotionNone, NULL, MOTION_SENSOR_TYPE__MotionSensor, 0, NULL }


/*
 * Thiết bị Homekit 
 */
struct  HomekitOnChangedClientResponse
{
  ProtobufCMessage base;
  /*
   * deviceId của thiết bị
   */
  char *deviceid;
  HomekitMode homekitmode;
  StatusCode *statuscode;
};
#define HOMEKIT_ON_CHANGED_CLIENT_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&homekit_on_changed_client_response__descriptor) \
, (char *)protobuf_c_empty_string, HOMEKIT_MODE__HomekitNormalMode, NULL }


/*
 * Thiết bị nút nhấn 
 */
struct  ButtonOnChangedClientResponse
{
  ProtobufCMessage base;
  /*
   * deviceId của thiết bị
   */
  char *deviceid;
  ButtonState buttonstate;
  uint32_t button;
  int32_t battery;
  BridgeInfo *bridge;
  StatusCode *statuscode;
};
#define BUTTON_ON_CHANGED_CLIENT_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&button_on_changed_client_response__descriptor) \
, (char *)protobuf_c_empty_string, BUTTON_STATE__Nothing, 0, 0, NULL, NULL }


struct  DebugLoggingResponse
{
  ProtobufCMessage base;
  char *deviceid;
  char *label;
  char *message;
  StatusCode *statuscode;
};
#define DEBUG_LOGGING_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&debug_logging_response__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, NULL }


struct  LedDriverOnChangedClientResponse
{
  ProtobufCMessage base;
  char *deviceid;
  uint32_t ledindex;
  int32_t brightnesspercent;
  PowerState powerstate;
  uint32_t groupcontrol;
  StatusCode *statuscode;
};
#define LED_DRIVER_ON_CHANGED_CLIENT_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&led_driver_on_changed_client_response__descriptor) \
, (char *)protobuf_c_empty_string, 0, 0, POWER_STATE__Off, 0, NULL }


struct  EnvironmentOnchangedClientResponse
{
  ProtobufCMessage base;
  char *deviceid;
  EnvironmentSensorReport *report;
  float batterycapacity;
  BridgeInfo *bridgeinfo;
  StatusCode *statuscode;
};
#define ENVIRONMENT_ONCHANGED_CLIENT_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&environment_onchanged_client_response__descriptor) \
, (char *)protobuf_c_empty_string, NULL, 0, NULL, NULL }


struct  SmartPlugOnchangedClientResponse
{
  ProtobufCMessage base;
  char *deviceid;
  uint32_t index;
  float amp;
  float power;
  float volt;
  PowerState powerstate;
  StatusCode *statuscode;
};
#define SMART_PLUG_ONCHANGED_CLIENT_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&smart_plug_onchanged_client_response__descriptor) \
, (char *)protobuf_c_empty_string, 0, 0, 0, 0, POWER_STATE__Off, NULL }


/*
 * Dùng cho trường động cơ rèm cửa chủ động gửi trạng thái lên server
 * Phản hồi thông tin thay đổi trạng thái của điều hòa runtime
 */
struct  CurtainOnChangedClientResponse
{
  ProtobufCMessage base;
  /*
   * Phần trăm
   */
  uint32_t percent;
  /*
   * deviceId của thiết bị
   */
  char *deviceid;
  StatusCode *statuscode;
};
#define CURTAIN_ON_CHANGED_CLIENT_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&curtain_on_changed_client_response__descriptor) \
, 0, (char *)protobuf_c_empty_string, NULL }


struct  TouchPanelControlSwitchOnChangedClientResponse
{
  ProtobufCMessage base;
  char *touchpanelid;
  char *switcherid;
  uint32_t switcher;
  PowerState powerstate;
  StatusCode *statuscode;
};
#define TOUCH_PANEL_CONTROL_SWITCH_ON_CHANGED_CLIENT_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&touch_panel_control_switch_on_changed_client_response__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, POWER_STATE__Off, NULL }


struct  TouchPanelControlCurtainSwitchOnChangedClientResponse
{
  ProtobufCMessage base;
  char *touchpanelid;
  char *curtainswitcherid;
  uint32_t percentin;
  uint32_t percentout;
  StatusCode *statuscode;
};
#define TOUCH_PANEL_CONTROL_CURTAIN_SWITCH_ON_CHANGED_CLIENT_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&touch_panel_control_curtain_switch_on_changed_client_response__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, 0, NULL }


struct  TouchPanelControlSceneOnChangedClientResponse
{
  ProtobufCMessage base;
  char *touchpanelid;
  char *sceneid;
  StatusCode *statuscode;
};
#define TOUCH_PANEL_CONTROL_SCENE_ON_CHANGED_CLIENT_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&touch_panel_control_scene_on_changed_client_response__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, NULL }


struct  TouchPanelControlLedDriverOnChangedClientResponse
{
  ProtobufCMessage base;
  char *touchpanelid;
  char *leddriverid;
  PowerState powerstate;
  /*
   * -1 khi không yêu cầu điều khiển
   */
  int32_t brightnesspercent;
  StatusCode *statuscode;
};
#define TOUCH_PANEL_CONTROL_LED_DRIVER_ON_CHANGED_CLIENT_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&touch_panel_control_led_driver_on_changed_client_response__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, POWER_STATE__Off, 0, NULL }


struct  TouchPanelRequestComponentStateOnChangedClientResponse
{
  ProtobufCMessage base;
  char *touchpanelid;
  char *componentid;
  uint32_t index;
  TouchPanelComponentType type;
  StatusCode *statuscode;
};
#define TOUCH_PANEL_REQUEST_COMPONENT_STATE_ON_CHANGED_CLIENT_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&touch_panel_request_component_state_on_changed_client_response__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, TOUCH_PANEL_COMPONENT_TYPE__TouchPanelComponentUnknown, NULL }


/*
 * Nhận được yêu cầu thay đổi trạng thái chuyển động
 */
struct  MotionClientRequest
{
  ProtobufCMessage base;
  /*
   * hardwareId của thiết bị
   */
  char *hardwareid;
  /*
   * state
   */
  MotionState motionstate;
};
#define MOTION_CLIENT_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&motion_client_request__descriptor) \
, (char *)protobuf_c_empty_string, MOTION_STATE__MotionNone }


/*
 * Phản hồi thay đổi trạng thái thiết bị Motion|PIR
 */
struct  MotionClientResponse
{
  ProtobufCMessage base;
  /*
   * deviceId
   */
  char *deviceid;
  /*
   * state
   */
  MotionState motionstate;
  StatusCode *statuscode;
};
#define MOTION_CLIENT_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&motion_client_response__descriptor) \
, (char *)protobuf_c_empty_string, MOTION_STATE__MotionNone, NULL }


struct  UpdateMotionState
{
  ProtobufCMessage base;
  /*
   * deviceId
   */
  char *deviceid;
  /*
   * state
   */
  MotionState motionstate;
};
#define UPDATE_MOTION_STATE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&update_motion_state__descriptor) \
, (char *)protobuf_c_empty_string, MOTION_STATE__MotionNone }


/*
 * Nhận được yêu về cầu kịch bản bắc cầu
 */
struct  SceneClientRequest
{
  ProtobufCMessage base;
  /*
   * sceneId
   */
  char *sceneid;
  /*
   * Thiết bị điều khiển
   */
  DeviceInScene *source;
  /*
   * danh sách các thiết bị được điều khiển
   */
  size_t n_target;
  DeviceInScene **target;
  /*
   * 1: Cùng On/Off, 2: Đảo ngược
   */
  uint32_t type;
  /*
   * 1: Add, 2: Edit, 3: Delete
   */
  uint32_t mode;
  char *hardwareid;
  ActiveTime *activetime;
};
#define SCENE_CLIENT_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&scene_client_request__descriptor) \
, (char *)protobuf_c_empty_string, NULL, 0,NULL, 0, 0, (char *)protobuf_c_empty_string, NULL }


/*
 * Phản hồi về kịch bản bắc cầu
 */
struct  SceneClientResponse
{
  ProtobufCMessage base;
  /*
   * sceneId
   */
  char *sceneid;
  /*
   * switcher
   */
  Switcher *switcher;
  /*
   * 1: Add, 2: Edit, 3: Delete
   */
  uint32_t mode;
  StatusCode *statuscode;
};
#define SCENE_CLIENT_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&scene_client_response__descriptor) \
, (char *)protobuf_c_empty_string, NULL, 0, NULL }


/*
 * Điều khiển từng đèn
 */
struct  LedDriverClientRequest
{
  ProtobufCMessage base;
  char *hardwareid;
  uint32_t ledindex;
  /*
   * -1 khi không yêu cầu điều khiển
   */
  int32_t brightnesspercent;
  PowerState powerstate;
  /*
   * in binary
   */
  uint32_t groupcontrol;
};
#define LED_DRIVER_CLIENT_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&led_driver_client_request__descriptor) \
, (char *)protobuf_c_empty_string, 0, 0, POWER_STATE__Off, 0 }


/*
 * Phản hồi điều khiển từng đèn
 */
struct  LedDriverClientResponse
{
  ProtobufCMessage base;
  char *deviceid;
  int32_t ledindex;
  int32_t brightnesspercent;
  PowerState powerstate;
  /*
   * in binary
   */
  uint32_t groupcontrol;
  StatusCode *statuscode;
};
#define LED_DRIVER_CLIENT_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&led_driver_client_response__descriptor) \
, (char *)protobuf_c_empty_string, 0, 0, POWER_STATE__Off, 0, NULL }


struct  SceneGroupClientRequest
{
  ProtobufCMessage base;
  size_t n_switcherclientrequest;
  SwitcherClientRequest **switcherclientrequest;
  size_t n_leddriverclientrequest;
  LedDriverClientRequest **leddriverclientrequest;
};
#define SCENE_GROUP_CLIENT_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&scene_group_client_request__descriptor) \
, 0,NULL, 0,NULL }


/*
 * Lấy giá trị điện/nước bị mất trong khoảng thời gian
 */
struct  MeterClientRequest
{
  ProtobufCMessage base;
  /*
   * in month
   */
  uint32_t date;
};
#define METER_CLIENT_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&meter_client_request__descriptor) \
, 0 }


/*
 * Phản hồi thông tin thay đổi các chỉ số của thiết bị điện/nước runtime
 */
struct  MeterClientResponse
{
  ProtobufCMessage base;
  uint32_t id;
  char *hardwareid;
  size_t n_indexs;
  MeterIndex **indexs;
  /*
   * Thời gian gửi lên server unixtime
   */
  uint32_t timestamp;
  StatusCode *statuscode;
};
#define METER_CLIENT_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&meter_client_response__descriptor) \
, 0, (char *)protobuf_c_empty_string, 0,NULL, 0, NULL }


struct  MeterClientConfirm
{
  ProtobufCMessage base;
  uint32_t id;
  StatusCode *statuscode;
};
#define METER_CLIENT_CONFIRM__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&meter_client_confirm__descriptor) \
, 0, NULL }


/*
 * Yêu cầu chuyển mode homekit
 */
struct  SetHomekitModeClientRequest
{
  ProtobufCMessage base;
  char *hardwareid;
  HomekitMode homekitmode;
};
#define SET_HOMEKIT_MODE_CLIENT_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&set_homekit_mode_client_request__descriptor) \
, (char *)protobuf_c_empty_string, HOMEKIT_MODE__HomekitNormalMode }


/*
 * Phản hồi yêu cầu chuyển mode homekit
 */
struct  SetHomekitModeClientResponse
{
  ProtobufCMessage base;
  StatusCode *statuscode;
};
#define SET_HOMEKIT_MODE_CLIENT_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&set_homekit_mode_client_response__descriptor) \
, NULL }


/*
 * Nhận được yêu về cầu kịch bản Trigger
 */
struct  SceneTriggerClientRequest
{
  ProtobufCMessage base;
  /*
   * sceneId
   */
  char *sceneid;
  /*
   * Thiết bị điều khiển
   */
  DeviceInScene *source;
  /*
   * danh sách các thiết bị được điều khiển
   */
  size_t n_target;
  DeviceInScene **target;
  /*
   * 1: Add, 2: Edit, 3: Delete
   */
  uint32_t mode;
};
#define SCENE_TRIGGER_CLIENT_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&scene_trigger_client_request__descriptor) \
, (char *)protobuf_c_empty_string, NULL, 0,NULL, 0 }


/*
 * Phản hồi về kịch bản
 */
struct  SceneTriggerClientResponse
{
  ProtobufCMessage base;
  /*
   * sceneId
   */
  char *sceneid;
  StatusCode *statuscode;
};
#define SCENE_TRIGGER_CLIENT_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&scene_trigger_client_response__descriptor) \
, (char *)protobuf_c_empty_string, NULL }


/*
 * Nhận được lệnh điều khiển động cơ rèm cửa
 */
struct  CurtainClientRequest
{
  ProtobufCMessage base;
  /*
   * Phần trăm 
   */
  uint32_t percent;
  /*
   * 1: Close, 2: Stop, 3: Open
   */
  CurtainControlState controlstate;
  /*
   * hardwareId của thiết bị
   */
  char *hardwareid;
};
#define CURTAIN_CLIENT_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&curtain_client_request__descriptor) \
, 0, CURTAIN_CONTROL_STATE__CurtainControlUnknown, (char *)protobuf_c_empty_string }


/*
 * Phản hồi lệnh điều khiển rèm cửa
 */
struct  CurtainClientResponse
{
  ProtobufCMessage base;
  /*
   * Phần trăm
   */
  uint32_t percent;
  /*
   * deviceId của thiết bị
   */
  char *deviceid;
  StatusCode *statuscode;
};
#define CURTAIN_CLIENT_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&curtain_client_response__descriptor) \
, 0, (char *)protobuf_c_empty_string, NULL }


/*
 * Đăng ký thiết bị cho touch Panel
 */
struct  TouchPanelChangeComponentClientRequest
{
  ProtobufCMessage base;
  char *touchpanelid;
  char *componentid;
  uint32_t index;
  TouchPanelComponentType type;
  uint32_t activemap;
  char *name;
  /*
   * 1: Add, 2: Edit, 3: Delete
   */
  uint32_t mode;
};
#define TOUCH_PANEL_CHANGE_COMPONENT_CLIENT_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&touch_panel_change_component_client_request__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, TOUCH_PANEL_COMPONENT_TYPE__TouchPanelComponentUnknown, 0, (char *)protobuf_c_empty_string, 0 }


/*
 * Điều khển Switcher trên Touch Panel
 */
struct  TouchPanelControlSwitcherClientRequest
{
  ProtobufCMessage base;
  char *touchpanelid;
  char *switcherid;
  uint32_t switcher;
  PowerState powerstate;
};
#define TOUCH_PANEL_CONTROL_SWITCHER_CLIENT_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&touch_panel_control_switcher_client_request__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, POWER_STATE__Off }


struct  TouchPanelUpdateSwitcherClientRequest
{
  ProtobufCMessage base;
  char *touchpanelid;
  char *switcherid;
  uint32_t index;
  uint32_t activemap;
  char *name;
  ConnectionState connectionstate;
};
#define TOUCH_PANEL_UPDATE_SWITCHER_CLIENT_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&touch_panel_update_switcher_client_request__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, 0, (char *)protobuf_c_empty_string, CONNECTION_STATE__Offline }


struct  TouchPanelControlCurtainSwitcherClientRequest
{
  ProtobufCMessage base;
  char *touchpanelid;
  char *curtainswitcherid;
  uint32_t percentin;
  uint32_t percentout;
};
#define TOUCH_PANEL_CONTROL_CURTAIN_SWITCHER_CLIENT_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&touch_panel_control_curtain_switcher_client_request__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, 0 }


struct  TouchPanelUpdateCurtainSwitcherClientRequest
{
  ProtobufCMessage base;
  char *touchpanelid;
  char *curtainswitcherid;
  char *name;
  ConnectionState connectionstate;
};
#define TOUCH_PANEL_UPDATE_CURTAIN_SWITCHER_CLIENT_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&touch_panel_update_curtain_switcher_client_request__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, CONNECTION_STATE__Offline }


struct  TouchPanelUpdateSceneClientRequest
{
  ProtobufCMessage base;
  char *touchpanelid;
  char *sceneid;
  char *name;
};
#define TOUCH_PANEL_UPDATE_SCENE_CLIENT_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&touch_panel_update_scene_client_request__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


struct  TouchPanelControlLedDriverClientRequest
{
  ProtobufCMessage base;
  char *touchpanelid;
  char *leddriverid;
  PowerState powerstate;
  int32_t brightnesspercent;
};
#define TOUCH_PANEL_CONTROL_LED_DRIVER_CLIENT_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&touch_panel_control_led_driver_client_request__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, POWER_STATE__Off, 0 }


struct  TouchPanelUpdateLedDriverClientRequest
{
  ProtobufCMessage base;
  char *touchpanelid;
  char *leddriverid;
  char *name;
  ConnectionState connectionstate;
};
#define TOUCH_PANEL_UPDATE_LED_DRIVER_CLIENT_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&touch_panel_update_led_driver_client_request__descriptor) \
, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, CONNECTION_STATE__Offline }


/*
 * Thiết bị kết nối wifi Devices 
 */
struct  DeviceClientMessage
{
  ProtobufCMessage base;
  ForceUpdateFirmwareDeviceClientRequest *forceupdatefirmwaredeviceclientrequest;
  ForceUpdateFirmwareDeviceClientResponse *forceupdatefirmwaredeviceclientresponse;
  UpdateDeviceClientRequest *updatedeviceclientrequest;
  UpdateDeviceClientResponse *updatedeviceclientresponse;
  UpdateWSEndpointClientRequest *updatewsendpointclientrequest;
  UpdateWSEndpointClientResponse *updatewsendpointclientresponse;
  DeleteDeviceClientRequest *deletedeviceclientrequest;
  DeleteDeviceClientResponse *deletedeviceclientresponse;
};
#define DEVICE_CLIENT_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&device_client_message__descriptor) \
, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL }


/*
 * Thiết bị Công tắc 
 */
struct  SwitcherClientMessage
{
  ProtobufCMessage base;
  GetSwitchersClientRequest *getswitchersclientrequest;
  GetSwitchersClientResponse *getswitchersclientresponse;
  GetSwitcherClientRequest *getswitcherclientrequest;
  GetSwitcherClientResponse *getswitcherclientresponse;
  GetLogSwitcherClientRequest *getlogswitcherclientrequest;
  GetLogSwitcherClientResponse *getlogswitcherclientresponse;
  SwitcherClientRequest *switcherclientrequest;
  SwitcherClientResponse *switcherclientresponse;
  AddSwitcherScheduleClientRequest *addswitcherscheduleclientrequest;
  AddSwitcherScheduleClientResponse *addswitcherscheduleclientresponse;
  UpdateSwitcherScheduleClientRequest *updateswitcherscheduleclientrequest;
  UpdateSwitcherScheduleClientResponse *updateswitcherscheduleclientresponse;
  DeleteSwitcherScheduleClientRequest *deleteswitcherscheduleclientrequest;
  DeleteSwitcherScheduleClientResponse *deleteswitcherscheduleclientresponse;
  UpdateSwitcherClientRequest *updateswitcherclientrequest;
  UpdateSwitcherClientResponse *updateswitcherclientresponse;
  UpdateSwitcherState *updateswitcherstate;
};
#define SWITCHER_CLIENT_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&switcher_client_message__descriptor) \
, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL }


/*
 * Thiết bị rèm cửa 
 */
struct  CurtainSwitcherClientMessage
{
  ProtobufCMessage base;
  CurtainSwitcherClientRequest *curtainswitcherclientrequest;
  CurtainSwitcherClientResponse *curtainswitcherclientresponse;
  AddCurtainSwitcherScheduleClientRequest *addcurtainswitcherscheduleclientrequest;
  AddCurtainSwitcherScheduleClientResponse *addcurtainswitcherscheduleclientresponse;
  UpdateCurtainSwitcherScheduleClientRequest *updatecurtainswitcherscheduleclientrequest;
  UpdateCurtainSwitcherScheduleClientResponse *updatecurtainswitcherscheduleclientresponse;
  DeleteCurtainSwitcherScheduleClientRequest *deletecurtainswitcherscheduleclientrequest;
  DeleteCurtainSwitcherScheduleClientResponse *deletecurtainswitcherscheduleclientresponse;
};
#define CURTAIN_SWITCHER_CLIENT_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&curtain_switcher_client_message__descriptor) \
, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL }


/*
 * Điều hòa 
 */
struct  AirConditionerClientMessage
{
  ProtobufCMessage base;
  AirConditionerClientRequest *airconditionerclientrequest;
  AirConditionerClientResponse *airconditionerclientresponse;
  GetAirConditionerClientRequest *getairconditionerclientrequest;
  GetAirConditionerClientResponse *getairconditionerclientresponse;
  AirConditionerAddIndoorsRequest *airconditioneraddindoorsrequest;
  AirConditionerAddIndoorsResponse *airconditioneraddindoorsresponse;
  AirConditionerRemoveIndoorRequest *airconditionerremoveindoorrequest;
  AirConditionerRemoveIndoorResponse *airconditionerremoveindoorresponse;
};
#define AIR_CONDITIONER_CLIENT_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&air_conditioner_client_message__descriptor) \
, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL }


/*
 * Thiết bị Remote 
 */
struct  RemoteClientMessage
{
  ProtobufCMessage base;
  SendCommandRemoteClientRequest *sendcommandremoteclientrequest;
  SendCommandRemoteClientResponse *sendcommandremoteclientresponse;
  LearnCommandRemoteClientRequest *learncommandremoteclientrequest;
  LearnCommandRemoteClientResponse *learncommandremoteclientresponse;
  ControlRemoteACCommandClientRequest *controlremoteaccommandclientrequest;
  ControlRemoteACCommandClientResponse *controlremoteaccommandclientresponse;
};
#define REMOTE_CLIENT_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&remote_client_message__descriptor) \
, NULL, NULL, NULL, NULL, NULL, NULL }


/*
 * Events runtime 
 */
struct  OnChangedClientMessage
{
  ProtobufCMessage base;
  MeterOnChangedClientResponse *meteronchangedclientresponse;
  SwitcherOnChangedClientResponse *switcheronchangedclientresponse;
  CurtainSwitcherOnChangedClientResponse *curtainswitcheronchangedclientresponse;
  AirConditionerOnChangedClientResponse *airconditioneronchangedclientresponse;
  ProgressUpdateFirmwareOnChangedDeviceClientResponse *progressupdatefirmwareonchangeddeviceclientresponse;
  DeviceOnChangedDeviceClientResponse *deviceonchangeddeviceclientresponse;
  MotionOnChangedClientResponse *motiononchangedclientresponse;
  HomekitOnChangedClientResponse *homekitonchangedclientresponse;
  ButtonOnChangedClientResponse *buttononchangedclientresponse;
  /*
   * Kênh log debug của thiết bị.
   */
  DebugLoggingResponse *debugloggingresponse;
  LedDriverOnChangedClientResponse *leddriveronchangedclientresponse;
  EnvironmentOnchangedClientResponse *environmentonchangedclientresponse;
  SmartPlugOnchangedClientResponse *smartplugonchangedclientresponse;
  CurtainOnChangedClientResponse *curtainonchangedclientresponse;
  TouchPanelControlSwitchOnChangedClientResponse *touchpanelcontrolswitchonchangedclientresponse;
  TouchPanelControlCurtainSwitchOnChangedClientResponse *touchpanelcontrolcurtainswitchonchangedclientresponse;
  TouchPanelControlSceneOnChangedClientResponse *touchpanelcontrolsceneonchangedclientresponse;
  TouchPanelControlLedDriverOnChangedClientResponse *touchpanelcontrolleddriveronchangedclientresponse;
  TouchPanelRequestComponentStateOnChangedClientResponse *touchpanelrequestcomponentstateonchangedclientresponse;
};
#define ON_CHANGED_CLIENT_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&on_changed_client_message__descriptor) \
, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL }


/*
 * Thiết bị cảm biến chuyển động 
 */
struct  MotionClientMessage
{
  ProtobufCMessage base;
  MotionClientRequest *motionclientrequest;
  MotionClientResponse *motionclientresponse;
  UpdateMotionState *updatemotionstate;
};
#define MOTION_CLIENT_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&motion_client_message__descriptor) \
, NULL, NULL, NULL }


/*
 * Kịch bản 
 */
struct  SceneClientMessage
{
  ProtobufCMessage base;
  SceneClientRequest *sceneclientrequest;
  SceneClientResponse *sceneclientresponse;
  SceneGroupClientRequest *scenegroupclientrequest;
};
#define SCENE_CLIENT_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&scene_client_message__descriptor) \
, NULL, NULL, NULL }


/*
 * Led Driver 
 */
struct  LedDriverClientMessage
{
  ProtobufCMessage base;
  LedDriverClientRequest *leddriverclientrequest;
  LedDriverClientResponse *leddriverclientresponse;
};
#define LED_DRIVER_CLIENT_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&led_driver_client_message__descriptor) \
, NULL, NULL }


/*
 * Thiết bị đọc đồng hồ điện nước 
 */
struct  MeterClientMessage
{
  ProtobufCMessage base;
  MeterClientRequest *meterclientrequest;
  MeterClientResponse *meterclientresponse;
  MeterClientConfirm *meterclientconfirm;
};
#define METER_CLIENT_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&meter_client_message__descriptor) \
, NULL, NULL, NULL }


struct  HomekitClientMessage
{
  ProtobufCMessage base;
  SetHomekitModeClientRequest *sethomekitmodeclientrequest;
  SetHomekitModeClientResponse *sethomekitmodeclientresponse;
};
#define HOMEKIT_CLIENT_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&homekit_client_message__descriptor) \
, NULL, NULL }


/*
 * Kịch bản điều khiển Trigger 
 */
struct  SceneTriggerClientMessage
{
  ProtobufCMessage base;
  SceneTriggerClientRequest *scenetriggerclientrequest;
  SceneTriggerClientResponse *scenetriggerclientresponse;
};
#define SCENE_TRIGGER_CLIENT_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&scene_trigger_client_message__descriptor) \
, NULL, NULL }


/*
 * Thiết bị động cơ rèm cửa 
 */
struct  CurtainClientMessage
{
  ProtobufCMessage base;
  CurtainClientRequest *curtainclientrequest;
  CurtainClientResponse *curtainclientresponse;
};
#define CURTAIN_CLIENT_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&curtain_client_message__descriptor) \
, NULL, NULL }


/*
 * Thiết bị Touch Panel 
 */
struct  TouchPanelClientMessage
{
  ProtobufCMessage base;
  TouchPanelChangeComponentClientRequest *touchpanelchangecomponentclientrequest;
  TouchPanelControlSwitcherClientRequest *touchpanelcontrolswitcherclientrequest;
  TouchPanelUpdateSwitcherClientRequest *touchpanelupdateswitcherclientrequest;
  TouchPanelControlCurtainSwitcherClientRequest *touchpanelcontrolcurtainswitcherclientrequest;
  TouchPanelUpdateCurtainSwitcherClientRequest *touchpanelupdatecurtainswitcherclientrequest;
  TouchPanelUpdateSceneClientRequest *touchpanelupdatesceneclientrequest;
  TouchPanelControlLedDriverClientRequest *touchpanelcontrolleddriverclientrequest;
  TouchPanelUpdateLedDriverClientRequest *touchpanelupdateleddriverclientrequest;
};
#define TOUCH_PANEL_CLIENT_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&touch_panel_client_message__descriptor) \
, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL }


/*
 * Client Message 
 */
struct  ClientMessage
{
  ProtobufCMessage base;
  /*
   * Thiết bị kết nối wifi Devices 
   */
  DeviceClientMessage *deviceclientmessage;
  /*
   * Thiết bị Công tắc 
   */
  SwitcherClientMessage *switcherclientmessage;
  /*
   * Thiết bị rèm cửa 
   */
  CurtainSwitcherClientMessage *curtainswitcherclientmessage;
  /*
   * Điều hòa 
   */
  AirConditionerClientMessage *airconditionerclientmessage;
  /*
   * Thiết bị Remote 
   */
  RemoteClientMessage *remoteclientmessage;
  /*
   * Events runtime 
   */
  OnChangedClientMessage *onchangedclientmessage;
  /*
   * Thiết bị Motion 
   */
  MotionClientMessage *motionclientmessage;
  /*
   * Kịch bản 
   */
  SceneClientMessage *sceneclientmessage;
  /*
   * Led driver 
   */
  LedDriverClientMessage *leddriverclientmessage;
  /*
   * Thiết bị đọc đồng hồ điện nước 
   */
  MeterClientMessage *meterclientmessage;
  /*
   * Thiết bị homekit gateway 
   */
  HomekitClientMessage *homekitclientmessage;
  /*
   * Thiết bị điều khiển 
   */
  SceneTriggerClientMessage *scenetriggerclientmessage;
  /*
   * Thiết bị động cơ rèm cửa 
   */
  CurtainClientMessage *curtainclientmessage;
  /*
   * Thiết bị Touch Panel 
   */
  TouchPanelClientMessage *touchpanelclientmessage;
};
#define CLIENT_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&client_message__descriptor) \
, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL }


/* ForceUpdateFirmwareDeviceClientRequest methods */
void   force_update_firmware_device_client_request__init
                     (ForceUpdateFirmwareDeviceClientRequest         *message);
size_t force_update_firmware_device_client_request__get_packed_size
                     (const ForceUpdateFirmwareDeviceClientRequest   *message);
size_t force_update_firmware_device_client_request__pack
                     (const ForceUpdateFirmwareDeviceClientRequest   *message,
                      uint8_t             *out);
size_t force_update_firmware_device_client_request__pack_to_buffer
                     (const ForceUpdateFirmwareDeviceClientRequest   *message,
                      ProtobufCBuffer     *buffer);
ForceUpdateFirmwareDeviceClientRequest *
       force_update_firmware_device_client_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   force_update_firmware_device_client_request__free_unpacked
                     (ForceUpdateFirmwareDeviceClientRequest *message,
                      ProtobufCAllocator *allocator);
/* ForceUpdateFirmwareDeviceClientResponse methods */
void   force_update_firmware_device_client_response__init
                     (ForceUpdateFirmwareDeviceClientResponse         *message);
size_t force_update_firmware_device_client_response__get_packed_size
                     (const ForceUpdateFirmwareDeviceClientResponse   *message);
size_t force_update_firmware_device_client_response__pack
                     (const ForceUpdateFirmwareDeviceClientResponse   *message,
                      uint8_t             *out);
size_t force_update_firmware_device_client_response__pack_to_buffer
                     (const ForceUpdateFirmwareDeviceClientResponse   *message,
                      ProtobufCBuffer     *buffer);
ForceUpdateFirmwareDeviceClientResponse *
       force_update_firmware_device_client_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   force_update_firmware_device_client_response__free_unpacked
                     (ForceUpdateFirmwareDeviceClientResponse *message,
                      ProtobufCAllocator *allocator);
/* UpdateDeviceClientRequest methods */
void   update_device_client_request__init
                     (UpdateDeviceClientRequest         *message);
size_t update_device_client_request__get_packed_size
                     (const UpdateDeviceClientRequest   *message);
size_t update_device_client_request__pack
                     (const UpdateDeviceClientRequest   *message,
                      uint8_t             *out);
size_t update_device_client_request__pack_to_buffer
                     (const UpdateDeviceClientRequest   *message,
                      ProtobufCBuffer     *buffer);
UpdateDeviceClientRequest *
       update_device_client_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   update_device_client_request__free_unpacked
                     (UpdateDeviceClientRequest *message,
                      ProtobufCAllocator *allocator);
/* UpdateDeviceClientResponse methods */
void   update_device_client_response__init
                     (UpdateDeviceClientResponse         *message);
size_t update_device_client_response__get_packed_size
                     (const UpdateDeviceClientResponse   *message);
size_t update_device_client_response__pack
                     (const UpdateDeviceClientResponse   *message,
                      uint8_t             *out);
size_t update_device_client_response__pack_to_buffer
                     (const UpdateDeviceClientResponse   *message,
                      ProtobufCBuffer     *buffer);
UpdateDeviceClientResponse *
       update_device_client_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   update_device_client_response__free_unpacked
                     (UpdateDeviceClientResponse *message,
                      ProtobufCAllocator *allocator);
/* UpdateWSEndpointClientRequest methods */
void   update_wsendpoint_client_request__init
                     (UpdateWSEndpointClientRequest         *message);
size_t update_wsendpoint_client_request__get_packed_size
                     (const UpdateWSEndpointClientRequest   *message);
size_t update_wsendpoint_client_request__pack
                     (const UpdateWSEndpointClientRequest   *message,
                      uint8_t             *out);
size_t update_wsendpoint_client_request__pack_to_buffer
                     (const UpdateWSEndpointClientRequest   *message,
                      ProtobufCBuffer     *buffer);
UpdateWSEndpointClientRequest *
       update_wsendpoint_client_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   update_wsendpoint_client_request__free_unpacked
                     (UpdateWSEndpointClientRequest *message,
                      ProtobufCAllocator *allocator);
/* UpdateWSEndpointClientResponse methods */
void   update_wsendpoint_client_response__init
                     (UpdateWSEndpointClientResponse         *message);
size_t update_wsendpoint_client_response__get_packed_size
                     (const UpdateWSEndpointClientResponse   *message);
size_t update_wsendpoint_client_response__pack
                     (const UpdateWSEndpointClientResponse   *message,
                      uint8_t             *out);
size_t update_wsendpoint_client_response__pack_to_buffer
                     (const UpdateWSEndpointClientResponse   *message,
                      ProtobufCBuffer     *buffer);
UpdateWSEndpointClientResponse *
       update_wsendpoint_client_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   update_wsendpoint_client_response__free_unpacked
                     (UpdateWSEndpointClientResponse *message,
                      ProtobufCAllocator *allocator);
/* DeleteDeviceClientRequest methods */
void   delete_device_client_request__init
                     (DeleteDeviceClientRequest         *message);
size_t delete_device_client_request__get_packed_size
                     (const DeleteDeviceClientRequest   *message);
size_t delete_device_client_request__pack
                     (const DeleteDeviceClientRequest   *message,
                      uint8_t             *out);
size_t delete_device_client_request__pack_to_buffer
                     (const DeleteDeviceClientRequest   *message,
                      ProtobufCBuffer     *buffer);
DeleteDeviceClientRequest *
       delete_device_client_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   delete_device_client_request__free_unpacked
                     (DeleteDeviceClientRequest *message,
                      ProtobufCAllocator *allocator);
/* DeleteDeviceClientResponse methods */
void   delete_device_client_response__init
                     (DeleteDeviceClientResponse         *message);
size_t delete_device_client_response__get_packed_size
                     (const DeleteDeviceClientResponse   *message);
size_t delete_device_client_response__pack
                     (const DeleteDeviceClientResponse   *message,
                      uint8_t             *out);
size_t delete_device_client_response__pack_to_buffer
                     (const DeleteDeviceClientResponse   *message,
                      ProtobufCBuffer     *buffer);
DeleteDeviceClientResponse *
       delete_device_client_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   delete_device_client_response__free_unpacked
                     (DeleteDeviceClientResponse *message,
                      ProtobufCAllocator *allocator);
/* GetSwitchersClientRequest methods */
void   get_switchers_client_request__init
                     (GetSwitchersClientRequest         *message);
size_t get_switchers_client_request__get_packed_size
                     (const GetSwitchersClientRequest   *message);
size_t get_switchers_client_request__pack
                     (const GetSwitchersClientRequest   *message,
                      uint8_t             *out);
size_t get_switchers_client_request__pack_to_buffer
                     (const GetSwitchersClientRequest   *message,
                      ProtobufCBuffer     *buffer);
GetSwitchersClientRequest *
       get_switchers_client_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_switchers_client_request__free_unpacked
                     (GetSwitchersClientRequest *message,
                      ProtobufCAllocator *allocator);
/* GetSwitchersClientResponse methods */
void   get_switchers_client_response__init
                     (GetSwitchersClientResponse         *message);
size_t get_switchers_client_response__get_packed_size
                     (const GetSwitchersClientResponse   *message);
size_t get_switchers_client_response__pack
                     (const GetSwitchersClientResponse   *message,
                      uint8_t             *out);
size_t get_switchers_client_response__pack_to_buffer
                     (const GetSwitchersClientResponse   *message,
                      ProtobufCBuffer     *buffer);
GetSwitchersClientResponse *
       get_switchers_client_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_switchers_client_response__free_unpacked
                     (GetSwitchersClientResponse *message,
                      ProtobufCAllocator *allocator);
/* GetSwitcherClientRequest methods */
void   get_switcher_client_request__init
                     (GetSwitcherClientRequest         *message);
size_t get_switcher_client_request__get_packed_size
                     (const GetSwitcherClientRequest   *message);
size_t get_switcher_client_request__pack
                     (const GetSwitcherClientRequest   *message,
                      uint8_t             *out);
size_t get_switcher_client_request__pack_to_buffer
                     (const GetSwitcherClientRequest   *message,
                      ProtobufCBuffer     *buffer);
GetSwitcherClientRequest *
       get_switcher_client_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_switcher_client_request__free_unpacked
                     (GetSwitcherClientRequest *message,
                      ProtobufCAllocator *allocator);
/* GetSwitcherClientResponse methods */
void   get_switcher_client_response__init
                     (GetSwitcherClientResponse         *message);
size_t get_switcher_client_response__get_packed_size
                     (const GetSwitcherClientResponse   *message);
size_t get_switcher_client_response__pack
                     (const GetSwitcherClientResponse   *message,
                      uint8_t             *out);
size_t get_switcher_client_response__pack_to_buffer
                     (const GetSwitcherClientResponse   *message,
                      ProtobufCBuffer     *buffer);
GetSwitcherClientResponse *
       get_switcher_client_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_switcher_client_response__free_unpacked
                     (GetSwitcherClientResponse *message,
                      ProtobufCAllocator *allocator);
/* GetLogSwitcherClientRequest methods */
void   get_log_switcher_client_request__init
                     (GetLogSwitcherClientRequest         *message);
size_t get_log_switcher_client_request__get_packed_size
                     (const GetLogSwitcherClientRequest   *message);
size_t get_log_switcher_client_request__pack
                     (const GetLogSwitcherClientRequest   *message,
                      uint8_t             *out);
size_t get_log_switcher_client_request__pack_to_buffer
                     (const GetLogSwitcherClientRequest   *message,
                      ProtobufCBuffer     *buffer);
GetLogSwitcherClientRequest *
       get_log_switcher_client_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_log_switcher_client_request__free_unpacked
                     (GetLogSwitcherClientRequest *message,
                      ProtobufCAllocator *allocator);
/* GetLogSwitcherClientResponse methods */
void   get_log_switcher_client_response__init
                     (GetLogSwitcherClientResponse         *message);
size_t get_log_switcher_client_response__get_packed_size
                     (const GetLogSwitcherClientResponse   *message);
size_t get_log_switcher_client_response__pack
                     (const GetLogSwitcherClientResponse   *message,
                      uint8_t             *out);
size_t get_log_switcher_client_response__pack_to_buffer
                     (const GetLogSwitcherClientResponse   *message,
                      ProtobufCBuffer     *buffer);
GetLogSwitcherClientResponse *
       get_log_switcher_client_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_log_switcher_client_response__free_unpacked
                     (GetLogSwitcherClientResponse *message,
                      ProtobufCAllocator *allocator);
/* SwitcherClientRequest methods */
void   switcher_client_request__init
                     (SwitcherClientRequest         *message);
size_t switcher_client_request__get_packed_size
                     (const SwitcherClientRequest   *message);
size_t switcher_client_request__pack
                     (const SwitcherClientRequest   *message,
                      uint8_t             *out);
size_t switcher_client_request__pack_to_buffer
                     (const SwitcherClientRequest   *message,
                      ProtobufCBuffer     *buffer);
SwitcherClientRequest *
       switcher_client_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   switcher_client_request__free_unpacked
                     (SwitcherClientRequest *message,
                      ProtobufCAllocator *allocator);
/* SwitcherClientResponse methods */
void   switcher_client_response__init
                     (SwitcherClientResponse         *message);
size_t switcher_client_response__get_packed_size
                     (const SwitcherClientResponse   *message);
size_t switcher_client_response__pack
                     (const SwitcherClientResponse   *message,
                      uint8_t             *out);
size_t switcher_client_response__pack_to_buffer
                     (const SwitcherClientResponse   *message,
                      ProtobufCBuffer     *buffer);
SwitcherClientResponse *
       switcher_client_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   switcher_client_response__free_unpacked
                     (SwitcherClientResponse *message,
                      ProtobufCAllocator *allocator);
/* AddSwitcherScheduleClientRequest methods */
void   add_switcher_schedule_client_request__init
                     (AddSwitcherScheduleClientRequest         *message);
size_t add_switcher_schedule_client_request__get_packed_size
                     (const AddSwitcherScheduleClientRequest   *message);
size_t add_switcher_schedule_client_request__pack
                     (const AddSwitcherScheduleClientRequest   *message,
                      uint8_t             *out);
size_t add_switcher_schedule_client_request__pack_to_buffer
                     (const AddSwitcherScheduleClientRequest   *message,
                      ProtobufCBuffer     *buffer);
AddSwitcherScheduleClientRequest *
       add_switcher_schedule_client_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   add_switcher_schedule_client_request__free_unpacked
                     (AddSwitcherScheduleClientRequest *message,
                      ProtobufCAllocator *allocator);
/* AddSwitcherScheduleClientResponse methods */
void   add_switcher_schedule_client_response__init
                     (AddSwitcherScheduleClientResponse         *message);
size_t add_switcher_schedule_client_response__get_packed_size
                     (const AddSwitcherScheduleClientResponse   *message);
size_t add_switcher_schedule_client_response__pack
                     (const AddSwitcherScheduleClientResponse   *message,
                      uint8_t             *out);
size_t add_switcher_schedule_client_response__pack_to_buffer
                     (const AddSwitcherScheduleClientResponse   *message,
                      ProtobufCBuffer     *buffer);
AddSwitcherScheduleClientResponse *
       add_switcher_schedule_client_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   add_switcher_schedule_client_response__free_unpacked
                     (AddSwitcherScheduleClientResponse *message,
                      ProtobufCAllocator *allocator);
/* UpdateSwitcherScheduleClientRequest methods */
void   update_switcher_schedule_client_request__init
                     (UpdateSwitcherScheduleClientRequest         *message);
size_t update_switcher_schedule_client_request__get_packed_size
                     (const UpdateSwitcherScheduleClientRequest   *message);
size_t update_switcher_schedule_client_request__pack
                     (const UpdateSwitcherScheduleClientRequest   *message,
                      uint8_t             *out);
size_t update_switcher_schedule_client_request__pack_to_buffer
                     (const UpdateSwitcherScheduleClientRequest   *message,
                      ProtobufCBuffer     *buffer);
UpdateSwitcherScheduleClientRequest *
       update_switcher_schedule_client_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   update_switcher_schedule_client_request__free_unpacked
                     (UpdateSwitcherScheduleClientRequest *message,
                      ProtobufCAllocator *allocator);
/* UpdateSwitcherScheduleClientResponse methods */
void   update_switcher_schedule_client_response__init
                     (UpdateSwitcherScheduleClientResponse         *message);
size_t update_switcher_schedule_client_response__get_packed_size
                     (const UpdateSwitcherScheduleClientResponse   *message);
size_t update_switcher_schedule_client_response__pack
                     (const UpdateSwitcherScheduleClientResponse   *message,
                      uint8_t             *out);
size_t update_switcher_schedule_client_response__pack_to_buffer
                     (const UpdateSwitcherScheduleClientResponse   *message,
                      ProtobufCBuffer     *buffer);
UpdateSwitcherScheduleClientResponse *
       update_switcher_schedule_client_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   update_switcher_schedule_client_response__free_unpacked
                     (UpdateSwitcherScheduleClientResponse *message,
                      ProtobufCAllocator *allocator);
/* DeleteSwitcherScheduleClientRequest methods */
void   delete_switcher_schedule_client_request__init
                     (DeleteSwitcherScheduleClientRequest         *message);
size_t delete_switcher_schedule_client_request__get_packed_size
                     (const DeleteSwitcherScheduleClientRequest   *message);
size_t delete_switcher_schedule_client_request__pack
                     (const DeleteSwitcherScheduleClientRequest   *message,
                      uint8_t             *out);
size_t delete_switcher_schedule_client_request__pack_to_buffer
                     (const DeleteSwitcherScheduleClientRequest   *message,
                      ProtobufCBuffer     *buffer);
DeleteSwitcherScheduleClientRequest *
       delete_switcher_schedule_client_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   delete_switcher_schedule_client_request__free_unpacked
                     (DeleteSwitcherScheduleClientRequest *message,
                      ProtobufCAllocator *allocator);
/* DeleteSwitcherScheduleClientResponse methods */
void   delete_switcher_schedule_client_response__init
                     (DeleteSwitcherScheduleClientResponse         *message);
size_t delete_switcher_schedule_client_response__get_packed_size
                     (const DeleteSwitcherScheduleClientResponse   *message);
size_t delete_switcher_schedule_client_response__pack
                     (const DeleteSwitcherScheduleClientResponse   *message,
                      uint8_t             *out);
size_t delete_switcher_schedule_client_response__pack_to_buffer
                     (const DeleteSwitcherScheduleClientResponse   *message,
                      ProtobufCBuffer     *buffer);
DeleteSwitcherScheduleClientResponse *
       delete_switcher_schedule_client_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   delete_switcher_schedule_client_response__free_unpacked
                     (DeleteSwitcherScheduleClientResponse *message,
                      ProtobufCAllocator *allocator);
/* UpdateSwitcherClientRequest methods */
void   update_switcher_client_request__init
                     (UpdateSwitcherClientRequest         *message);
size_t update_switcher_client_request__get_packed_size
                     (const UpdateSwitcherClientRequest   *message);
size_t update_switcher_client_request__pack
                     (const UpdateSwitcherClientRequest   *message,
                      uint8_t             *out);
size_t update_switcher_client_request__pack_to_buffer
                     (const UpdateSwitcherClientRequest   *message,
                      ProtobufCBuffer     *buffer);
UpdateSwitcherClientRequest *
       update_switcher_client_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   update_switcher_client_request__free_unpacked
                     (UpdateSwitcherClientRequest *message,
                      ProtobufCAllocator *allocator);
/* UpdateSwitcherClientResponse methods */
void   update_switcher_client_response__init
                     (UpdateSwitcherClientResponse         *message);
size_t update_switcher_client_response__get_packed_size
                     (const UpdateSwitcherClientResponse   *message);
size_t update_switcher_client_response__pack
                     (const UpdateSwitcherClientResponse   *message,
                      uint8_t             *out);
size_t update_switcher_client_response__pack_to_buffer
                     (const UpdateSwitcherClientResponse   *message,
                      ProtobufCBuffer     *buffer);
UpdateSwitcherClientResponse *
       update_switcher_client_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   update_switcher_client_response__free_unpacked
                     (UpdateSwitcherClientResponse *message,
                      ProtobufCAllocator *allocator);
/* UpdateSwitcherState methods */
void   update_switcher_state__init
                     (UpdateSwitcherState         *message);
size_t update_switcher_state__get_packed_size
                     (const UpdateSwitcherState   *message);
size_t update_switcher_state__pack
                     (const UpdateSwitcherState   *message,
                      uint8_t             *out);
size_t update_switcher_state__pack_to_buffer
                     (const UpdateSwitcherState   *message,
                      ProtobufCBuffer     *buffer);
UpdateSwitcherState *
       update_switcher_state__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   update_switcher_state__free_unpacked
                     (UpdateSwitcherState *message,
                      ProtobufCAllocator *allocator);
/* CurtainSwitcherClientRequest methods */
void   curtain_switcher_client_request__init
                     (CurtainSwitcherClientRequest         *message);
size_t curtain_switcher_client_request__get_packed_size
                     (const CurtainSwitcherClientRequest   *message);
size_t curtain_switcher_client_request__pack
                     (const CurtainSwitcherClientRequest   *message,
                      uint8_t             *out);
size_t curtain_switcher_client_request__pack_to_buffer
                     (const CurtainSwitcherClientRequest   *message,
                      ProtobufCBuffer     *buffer);
CurtainSwitcherClientRequest *
       curtain_switcher_client_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   curtain_switcher_client_request__free_unpacked
                     (CurtainSwitcherClientRequest *message,
                      ProtobufCAllocator *allocator);
/* CurtainSwitcherClientResponse methods */
void   curtain_switcher_client_response__init
                     (CurtainSwitcherClientResponse         *message);
size_t curtain_switcher_client_response__get_packed_size
                     (const CurtainSwitcherClientResponse   *message);
size_t curtain_switcher_client_response__pack
                     (const CurtainSwitcherClientResponse   *message,
                      uint8_t             *out);
size_t curtain_switcher_client_response__pack_to_buffer
                     (const CurtainSwitcherClientResponse   *message,
                      ProtobufCBuffer     *buffer);
CurtainSwitcherClientResponse *
       curtain_switcher_client_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   curtain_switcher_client_response__free_unpacked
                     (CurtainSwitcherClientResponse *message,
                      ProtobufCAllocator *allocator);
/* AddCurtainSwitcherScheduleClientRequest methods */
void   add_curtain_switcher_schedule_client_request__init
                     (AddCurtainSwitcherScheduleClientRequest         *message);
size_t add_curtain_switcher_schedule_client_request__get_packed_size
                     (const AddCurtainSwitcherScheduleClientRequest   *message);
size_t add_curtain_switcher_schedule_client_request__pack
                     (const AddCurtainSwitcherScheduleClientRequest   *message,
                      uint8_t             *out);
size_t add_curtain_switcher_schedule_client_request__pack_to_buffer
                     (const AddCurtainSwitcherScheduleClientRequest   *message,
                      ProtobufCBuffer     *buffer);
AddCurtainSwitcherScheduleClientRequest *
       add_curtain_switcher_schedule_client_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   add_curtain_switcher_schedule_client_request__free_unpacked
                     (AddCurtainSwitcherScheduleClientRequest *message,
                      ProtobufCAllocator *allocator);
/* AddCurtainSwitcherScheduleClientResponse methods */
void   add_curtain_switcher_schedule_client_response__init
                     (AddCurtainSwitcherScheduleClientResponse         *message);
size_t add_curtain_switcher_schedule_client_response__get_packed_size
                     (const AddCurtainSwitcherScheduleClientResponse   *message);
size_t add_curtain_switcher_schedule_client_response__pack
                     (const AddCurtainSwitcherScheduleClientResponse   *message,
                      uint8_t             *out);
size_t add_curtain_switcher_schedule_client_response__pack_to_buffer
                     (const AddCurtainSwitcherScheduleClientResponse   *message,
                      ProtobufCBuffer     *buffer);
AddCurtainSwitcherScheduleClientResponse *
       add_curtain_switcher_schedule_client_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   add_curtain_switcher_schedule_client_response__free_unpacked
                     (AddCurtainSwitcherScheduleClientResponse *message,
                      ProtobufCAllocator *allocator);
/* UpdateCurtainSwitcherScheduleClientRequest methods */
void   update_curtain_switcher_schedule_client_request__init
                     (UpdateCurtainSwitcherScheduleClientRequest         *message);
size_t update_curtain_switcher_schedule_client_request__get_packed_size
                     (const UpdateCurtainSwitcherScheduleClientRequest   *message);
size_t update_curtain_switcher_schedule_client_request__pack
                     (const UpdateCurtainSwitcherScheduleClientRequest   *message,
                      uint8_t             *out);
size_t update_curtain_switcher_schedule_client_request__pack_to_buffer
                     (const UpdateCurtainSwitcherScheduleClientRequest   *message,
                      ProtobufCBuffer     *buffer);
UpdateCurtainSwitcherScheduleClientRequest *
       update_curtain_switcher_schedule_client_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   update_curtain_switcher_schedule_client_request__free_unpacked
                     (UpdateCurtainSwitcherScheduleClientRequest *message,
                      ProtobufCAllocator *allocator);
/* UpdateCurtainSwitcherScheduleClientResponse methods */
void   update_curtain_switcher_schedule_client_response__init
                     (UpdateCurtainSwitcherScheduleClientResponse         *message);
size_t update_curtain_switcher_schedule_client_response__get_packed_size
                     (const UpdateCurtainSwitcherScheduleClientResponse   *message);
size_t update_curtain_switcher_schedule_client_response__pack
                     (const UpdateCurtainSwitcherScheduleClientResponse   *message,
                      uint8_t             *out);
size_t update_curtain_switcher_schedule_client_response__pack_to_buffer
                     (const UpdateCurtainSwitcherScheduleClientResponse   *message,
                      ProtobufCBuffer     *buffer);
UpdateCurtainSwitcherScheduleClientResponse *
       update_curtain_switcher_schedule_client_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   update_curtain_switcher_schedule_client_response__free_unpacked
                     (UpdateCurtainSwitcherScheduleClientResponse *message,
                      ProtobufCAllocator *allocator);
/* DeleteCurtainSwitcherScheduleClientRequest methods */
void   delete_curtain_switcher_schedule_client_request__init
                     (DeleteCurtainSwitcherScheduleClientRequest         *message);
size_t delete_curtain_switcher_schedule_client_request__get_packed_size
                     (const DeleteCurtainSwitcherScheduleClientRequest   *message);
size_t delete_curtain_switcher_schedule_client_request__pack
                     (const DeleteCurtainSwitcherScheduleClientRequest   *message,
                      uint8_t             *out);
size_t delete_curtain_switcher_schedule_client_request__pack_to_buffer
                     (const DeleteCurtainSwitcherScheduleClientRequest   *message,
                      ProtobufCBuffer     *buffer);
DeleteCurtainSwitcherScheduleClientRequest *
       delete_curtain_switcher_schedule_client_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   delete_curtain_switcher_schedule_client_request__free_unpacked
                     (DeleteCurtainSwitcherScheduleClientRequest *message,
                      ProtobufCAllocator *allocator);
/* DeleteCurtainSwitcherScheduleClientResponse methods */
void   delete_curtain_switcher_schedule_client_response__init
                     (DeleteCurtainSwitcherScheduleClientResponse         *message);
size_t delete_curtain_switcher_schedule_client_response__get_packed_size
                     (const DeleteCurtainSwitcherScheduleClientResponse   *message);
size_t delete_curtain_switcher_schedule_client_response__pack
                     (const DeleteCurtainSwitcherScheduleClientResponse   *message,
                      uint8_t             *out);
size_t delete_curtain_switcher_schedule_client_response__pack_to_buffer
                     (const DeleteCurtainSwitcherScheduleClientResponse   *message,
                      ProtobufCBuffer     *buffer);
DeleteCurtainSwitcherScheduleClientResponse *
       delete_curtain_switcher_schedule_client_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   delete_curtain_switcher_schedule_client_response__free_unpacked
                     (DeleteCurtainSwitcherScheduleClientResponse *message,
                      ProtobufCAllocator *allocator);
/* AirConditionerClientRequest methods */
void   air_conditioner_client_request__init
                     (AirConditionerClientRequest         *message);
size_t air_conditioner_client_request__get_packed_size
                     (const AirConditionerClientRequest   *message);
size_t air_conditioner_client_request__pack
                     (const AirConditionerClientRequest   *message,
                      uint8_t             *out);
size_t air_conditioner_client_request__pack_to_buffer
                     (const AirConditionerClientRequest   *message,
                      ProtobufCBuffer     *buffer);
AirConditionerClientRequest *
       air_conditioner_client_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   air_conditioner_client_request__free_unpacked
                     (AirConditionerClientRequest *message,
                      ProtobufCAllocator *allocator);
/* AirConditionerClientResponse methods */
void   air_conditioner_client_response__init
                     (AirConditionerClientResponse         *message);
size_t air_conditioner_client_response__get_packed_size
                     (const AirConditionerClientResponse   *message);
size_t air_conditioner_client_response__pack
                     (const AirConditionerClientResponse   *message,
                      uint8_t             *out);
size_t air_conditioner_client_response__pack_to_buffer
                     (const AirConditionerClientResponse   *message,
                      ProtobufCBuffer     *buffer);
AirConditionerClientResponse *
       air_conditioner_client_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   air_conditioner_client_response__free_unpacked
                     (AirConditionerClientResponse *message,
                      ProtobufCAllocator *allocator);
/* GetAirConditionerClientRequest methods */
void   get_air_conditioner_client_request__init
                     (GetAirConditionerClientRequest         *message);
size_t get_air_conditioner_client_request__get_packed_size
                     (const GetAirConditionerClientRequest   *message);
size_t get_air_conditioner_client_request__pack
                     (const GetAirConditionerClientRequest   *message,
                      uint8_t             *out);
size_t get_air_conditioner_client_request__pack_to_buffer
                     (const GetAirConditionerClientRequest   *message,
                      ProtobufCBuffer     *buffer);
GetAirConditionerClientRequest *
       get_air_conditioner_client_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_air_conditioner_client_request__free_unpacked
                     (GetAirConditionerClientRequest *message,
                      ProtobufCAllocator *allocator);
/* GetAirConditionerClientResponse methods */
void   get_air_conditioner_client_response__init
                     (GetAirConditionerClientResponse         *message);
size_t get_air_conditioner_client_response__get_packed_size
                     (const GetAirConditionerClientResponse   *message);
size_t get_air_conditioner_client_response__pack
                     (const GetAirConditionerClientResponse   *message,
                      uint8_t             *out);
size_t get_air_conditioner_client_response__pack_to_buffer
                     (const GetAirConditionerClientResponse   *message,
                      ProtobufCBuffer     *buffer);
GetAirConditionerClientResponse *
       get_air_conditioner_client_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   get_air_conditioner_client_response__free_unpacked
                     (GetAirConditionerClientResponse *message,
                      ProtobufCAllocator *allocator);
/* AirConditionerAddIndoorsRequest methods */
void   air_conditioner_add_indoors_request__init
                     (AirConditionerAddIndoorsRequest         *message);
size_t air_conditioner_add_indoors_request__get_packed_size
                     (const AirConditionerAddIndoorsRequest   *message);
size_t air_conditioner_add_indoors_request__pack
                     (const AirConditionerAddIndoorsRequest   *message,
                      uint8_t             *out);
size_t air_conditioner_add_indoors_request__pack_to_buffer
                     (const AirConditionerAddIndoorsRequest   *message,
                      ProtobufCBuffer     *buffer);
AirConditionerAddIndoorsRequest *
       air_conditioner_add_indoors_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   air_conditioner_add_indoors_request__free_unpacked
                     (AirConditionerAddIndoorsRequest *message,
                      ProtobufCAllocator *allocator);
/* AirConditionerAddIndoorsResponse methods */
void   air_conditioner_add_indoors_response__init
                     (AirConditionerAddIndoorsResponse         *message);
size_t air_conditioner_add_indoors_response__get_packed_size
                     (const AirConditionerAddIndoorsResponse   *message);
size_t air_conditioner_add_indoors_response__pack
                     (const AirConditionerAddIndoorsResponse   *message,
                      uint8_t             *out);
size_t air_conditioner_add_indoors_response__pack_to_buffer
                     (const AirConditionerAddIndoorsResponse   *message,
                      ProtobufCBuffer     *buffer);
AirConditionerAddIndoorsResponse *
       air_conditioner_add_indoors_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   air_conditioner_add_indoors_response__free_unpacked
                     (AirConditionerAddIndoorsResponse *message,
                      ProtobufCAllocator *allocator);
/* AirConditionerRemoveIndoorRequest methods */
void   air_conditioner_remove_indoor_request__init
                     (AirConditionerRemoveIndoorRequest         *message);
size_t air_conditioner_remove_indoor_request__get_packed_size
                     (const AirConditionerRemoveIndoorRequest   *message);
size_t air_conditioner_remove_indoor_request__pack
                     (const AirConditionerRemoveIndoorRequest   *message,
                      uint8_t             *out);
size_t air_conditioner_remove_indoor_request__pack_to_buffer
                     (const AirConditionerRemoveIndoorRequest   *message,
                      ProtobufCBuffer     *buffer);
AirConditionerRemoveIndoorRequest *
       air_conditioner_remove_indoor_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   air_conditioner_remove_indoor_request__free_unpacked
                     (AirConditionerRemoveIndoorRequest *message,
                      ProtobufCAllocator *allocator);
/* AirConditionerRemoveIndoorResponse methods */
void   air_conditioner_remove_indoor_response__init
                     (AirConditionerRemoveIndoorResponse         *message);
size_t air_conditioner_remove_indoor_response__get_packed_size
                     (const AirConditionerRemoveIndoorResponse   *message);
size_t air_conditioner_remove_indoor_response__pack
                     (const AirConditionerRemoveIndoorResponse   *message,
                      uint8_t             *out);
size_t air_conditioner_remove_indoor_response__pack_to_buffer
                     (const AirConditionerRemoveIndoorResponse   *message,
                      ProtobufCBuffer     *buffer);
AirConditionerRemoveIndoorResponse *
       air_conditioner_remove_indoor_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   air_conditioner_remove_indoor_response__free_unpacked
                     (AirConditionerRemoveIndoorResponse *message,
                      ProtobufCAllocator *allocator);
/* SendCommandRemoteClientRequest methods */
void   send_command_remote_client_request__init
                     (SendCommandRemoteClientRequest         *message);
size_t send_command_remote_client_request__get_packed_size
                     (const SendCommandRemoteClientRequest   *message);
size_t send_command_remote_client_request__pack
                     (const SendCommandRemoteClientRequest   *message,
                      uint8_t             *out);
size_t send_command_remote_client_request__pack_to_buffer
                     (const SendCommandRemoteClientRequest   *message,
                      ProtobufCBuffer     *buffer);
SendCommandRemoteClientRequest *
       send_command_remote_client_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   send_command_remote_client_request__free_unpacked
                     (SendCommandRemoteClientRequest *message,
                      ProtobufCAllocator *allocator);
/* SendCommandRemoteClientResponse methods */
void   send_command_remote_client_response__init
                     (SendCommandRemoteClientResponse         *message);
size_t send_command_remote_client_response__get_packed_size
                     (const SendCommandRemoteClientResponse   *message);
size_t send_command_remote_client_response__pack
                     (const SendCommandRemoteClientResponse   *message,
                      uint8_t             *out);
size_t send_command_remote_client_response__pack_to_buffer
                     (const SendCommandRemoteClientResponse   *message,
                      ProtobufCBuffer     *buffer);
SendCommandRemoteClientResponse *
       send_command_remote_client_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   send_command_remote_client_response__free_unpacked
                     (SendCommandRemoteClientResponse *message,
                      ProtobufCAllocator *allocator);
/* LearnCommandRemoteClientRequest methods */
void   learn_command_remote_client_request__init
                     (LearnCommandRemoteClientRequest         *message);
size_t learn_command_remote_client_request__get_packed_size
                     (const LearnCommandRemoteClientRequest   *message);
size_t learn_command_remote_client_request__pack
                     (const LearnCommandRemoteClientRequest   *message,
                      uint8_t             *out);
size_t learn_command_remote_client_request__pack_to_buffer
                     (const LearnCommandRemoteClientRequest   *message,
                      ProtobufCBuffer     *buffer);
LearnCommandRemoteClientRequest *
       learn_command_remote_client_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   learn_command_remote_client_request__free_unpacked
                     (LearnCommandRemoteClientRequest *message,
                      ProtobufCAllocator *allocator);
/* LearnCommandRemoteClientResponse methods */
void   learn_command_remote_client_response__init
                     (LearnCommandRemoteClientResponse         *message);
size_t learn_command_remote_client_response__get_packed_size
                     (const LearnCommandRemoteClientResponse   *message);
size_t learn_command_remote_client_response__pack
                     (const LearnCommandRemoteClientResponse   *message,
                      uint8_t             *out);
size_t learn_command_remote_client_response__pack_to_buffer
                     (const LearnCommandRemoteClientResponse   *message,
                      ProtobufCBuffer     *buffer);
LearnCommandRemoteClientResponse *
       learn_command_remote_client_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   learn_command_remote_client_response__free_unpacked
                     (LearnCommandRemoteClientResponse *message,
                      ProtobufCAllocator *allocator);
/* ControlRemoteACCommandClientRequest methods */
void   control_remote_accommand_client_request__init
                     (ControlRemoteACCommandClientRequest         *message);
size_t control_remote_accommand_client_request__get_packed_size
                     (const ControlRemoteACCommandClientRequest   *message);
size_t control_remote_accommand_client_request__pack
                     (const ControlRemoteACCommandClientRequest   *message,
                      uint8_t             *out);
size_t control_remote_accommand_client_request__pack_to_buffer
                     (const ControlRemoteACCommandClientRequest   *message,
                      ProtobufCBuffer     *buffer);
ControlRemoteACCommandClientRequest *
       control_remote_accommand_client_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   control_remote_accommand_client_request__free_unpacked
                     (ControlRemoteACCommandClientRequest *message,
                      ProtobufCAllocator *allocator);
/* ControlRemoteACCommandClientResponse methods */
void   control_remote_accommand_client_response__init
                     (ControlRemoteACCommandClientResponse         *message);
size_t control_remote_accommand_client_response__get_packed_size
                     (const ControlRemoteACCommandClientResponse   *message);
size_t control_remote_accommand_client_response__pack
                     (const ControlRemoteACCommandClientResponse   *message,
                      uint8_t             *out);
size_t control_remote_accommand_client_response__pack_to_buffer
                     (const ControlRemoteACCommandClientResponse   *message,
                      ProtobufCBuffer     *buffer);
ControlRemoteACCommandClientResponse *
       control_remote_accommand_client_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   control_remote_accommand_client_response__free_unpacked
                     (ControlRemoteACCommandClientResponse *message,
                      ProtobufCAllocator *allocator);
/* MeterOnChangedClientResponse methods */
void   meter_on_changed_client_response__init
                     (MeterOnChangedClientResponse         *message);
size_t meter_on_changed_client_response__get_packed_size
                     (const MeterOnChangedClientResponse   *message);
size_t meter_on_changed_client_response__pack
                     (const MeterOnChangedClientResponse   *message,
                      uint8_t             *out);
size_t meter_on_changed_client_response__pack_to_buffer
                     (const MeterOnChangedClientResponse   *message,
                      ProtobufCBuffer     *buffer);
MeterOnChangedClientResponse *
       meter_on_changed_client_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   meter_on_changed_client_response__free_unpacked
                     (MeterOnChangedClientResponse *message,
                      ProtobufCAllocator *allocator);
/* SwitcherOnChangedClientResponse methods */
void   switcher_on_changed_client_response__init
                     (SwitcherOnChangedClientResponse         *message);
size_t switcher_on_changed_client_response__get_packed_size
                     (const SwitcherOnChangedClientResponse   *message);
size_t switcher_on_changed_client_response__pack
                     (const SwitcherOnChangedClientResponse   *message,
                      uint8_t             *out);
size_t switcher_on_changed_client_response__pack_to_buffer
                     (const SwitcherOnChangedClientResponse   *message,
                      ProtobufCBuffer     *buffer);
SwitcherOnChangedClientResponse *
       switcher_on_changed_client_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   switcher_on_changed_client_response__free_unpacked
                     (SwitcherOnChangedClientResponse *message,
                      ProtobufCAllocator *allocator);
/* CurtainSwitcherOnChangedClientResponse methods */
void   curtain_switcher_on_changed_client_response__init
                     (CurtainSwitcherOnChangedClientResponse         *message);
size_t curtain_switcher_on_changed_client_response__get_packed_size
                     (const CurtainSwitcherOnChangedClientResponse   *message);
size_t curtain_switcher_on_changed_client_response__pack
                     (const CurtainSwitcherOnChangedClientResponse   *message,
                      uint8_t             *out);
size_t curtain_switcher_on_changed_client_response__pack_to_buffer
                     (const CurtainSwitcherOnChangedClientResponse   *message,
                      ProtobufCBuffer     *buffer);
CurtainSwitcherOnChangedClientResponse *
       curtain_switcher_on_changed_client_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   curtain_switcher_on_changed_client_response__free_unpacked
                     (CurtainSwitcherOnChangedClientResponse *message,
                      ProtobufCAllocator *allocator);
/* AirConditionerOnChangedClientResponse methods */
void   air_conditioner_on_changed_client_response__init
                     (AirConditionerOnChangedClientResponse         *message);
size_t air_conditioner_on_changed_client_response__get_packed_size
                     (const AirConditionerOnChangedClientResponse   *message);
size_t air_conditioner_on_changed_client_response__pack
                     (const AirConditionerOnChangedClientResponse   *message,
                      uint8_t             *out);
size_t air_conditioner_on_changed_client_response__pack_to_buffer
                     (const AirConditionerOnChangedClientResponse   *message,
                      ProtobufCBuffer     *buffer);
AirConditionerOnChangedClientResponse *
       air_conditioner_on_changed_client_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   air_conditioner_on_changed_client_response__free_unpacked
                     (AirConditionerOnChangedClientResponse *message,
                      ProtobufCAllocator *allocator);
/* ProgressUpdateFirmwareOnChangedDeviceClientResponse methods */
void   progress_update_firmware_on_changed_device_client_response__init
                     (ProgressUpdateFirmwareOnChangedDeviceClientResponse         *message);
size_t progress_update_firmware_on_changed_device_client_response__get_packed_size
                     (const ProgressUpdateFirmwareOnChangedDeviceClientResponse   *message);
size_t progress_update_firmware_on_changed_device_client_response__pack
                     (const ProgressUpdateFirmwareOnChangedDeviceClientResponse   *message,
                      uint8_t             *out);
size_t progress_update_firmware_on_changed_device_client_response__pack_to_buffer
                     (const ProgressUpdateFirmwareOnChangedDeviceClientResponse   *message,
                      ProtobufCBuffer     *buffer);
ProgressUpdateFirmwareOnChangedDeviceClientResponse *
       progress_update_firmware_on_changed_device_client_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   progress_update_firmware_on_changed_device_client_response__free_unpacked
                     (ProgressUpdateFirmwareOnChangedDeviceClientResponse *message,
                      ProtobufCAllocator *allocator);
/* DeviceOnChangedDeviceClientResponse methods */
void   device_on_changed_device_client_response__init
                     (DeviceOnChangedDeviceClientResponse         *message);
size_t device_on_changed_device_client_response__get_packed_size
                     (const DeviceOnChangedDeviceClientResponse   *message);
size_t device_on_changed_device_client_response__pack
                     (const DeviceOnChangedDeviceClientResponse   *message,
                      uint8_t             *out);
size_t device_on_changed_device_client_response__pack_to_buffer
                     (const DeviceOnChangedDeviceClientResponse   *message,
                      ProtobufCBuffer     *buffer);
DeviceOnChangedDeviceClientResponse *
       device_on_changed_device_client_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   device_on_changed_device_client_response__free_unpacked
                     (DeviceOnChangedDeviceClientResponse *message,
                      ProtobufCAllocator *allocator);
/* MotionOnChangedClientResponse methods */
void   motion_on_changed_client_response__init
                     (MotionOnChangedClientResponse         *message);
size_t motion_on_changed_client_response__get_packed_size
                     (const MotionOnChangedClientResponse   *message);
size_t motion_on_changed_client_response__pack
                     (const MotionOnChangedClientResponse   *message,
                      uint8_t             *out);
size_t motion_on_changed_client_response__pack_to_buffer
                     (const MotionOnChangedClientResponse   *message,
                      ProtobufCBuffer     *buffer);
MotionOnChangedClientResponse *
       motion_on_changed_client_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   motion_on_changed_client_response__free_unpacked
                     (MotionOnChangedClientResponse *message,
                      ProtobufCAllocator *allocator);
/* HomekitOnChangedClientResponse methods */
void   homekit_on_changed_client_response__init
                     (HomekitOnChangedClientResponse         *message);
size_t homekit_on_changed_client_response__get_packed_size
                     (const HomekitOnChangedClientResponse   *message);
size_t homekit_on_changed_client_response__pack
                     (const HomekitOnChangedClientResponse   *message,
                      uint8_t             *out);
size_t homekit_on_changed_client_response__pack_to_buffer
                     (const HomekitOnChangedClientResponse   *message,
                      ProtobufCBuffer     *buffer);
HomekitOnChangedClientResponse *
       homekit_on_changed_client_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   homekit_on_changed_client_response__free_unpacked
                     (HomekitOnChangedClientResponse *message,
                      ProtobufCAllocator *allocator);
/* ButtonOnChangedClientResponse methods */
void   button_on_changed_client_response__init
                     (ButtonOnChangedClientResponse         *message);
size_t button_on_changed_client_response__get_packed_size
                     (const ButtonOnChangedClientResponse   *message);
size_t button_on_changed_client_response__pack
                     (const ButtonOnChangedClientResponse   *message,
                      uint8_t             *out);
size_t button_on_changed_client_response__pack_to_buffer
                     (const ButtonOnChangedClientResponse   *message,
                      ProtobufCBuffer     *buffer);
ButtonOnChangedClientResponse *
       button_on_changed_client_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   button_on_changed_client_response__free_unpacked
                     (ButtonOnChangedClientResponse *message,
                      ProtobufCAllocator *allocator);
/* DebugLoggingResponse methods */
void   debug_logging_response__init
                     (DebugLoggingResponse         *message);
size_t debug_logging_response__get_packed_size
                     (const DebugLoggingResponse   *message);
size_t debug_logging_response__pack
                     (const DebugLoggingResponse   *message,
                      uint8_t             *out);
size_t debug_logging_response__pack_to_buffer
                     (const DebugLoggingResponse   *message,
                      ProtobufCBuffer     *buffer);
DebugLoggingResponse *
       debug_logging_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   debug_logging_response__free_unpacked
                     (DebugLoggingResponse *message,
                      ProtobufCAllocator *allocator);
/* LedDriverOnChangedClientResponse methods */
void   led_driver_on_changed_client_response__init
                     (LedDriverOnChangedClientResponse         *message);
size_t led_driver_on_changed_client_response__get_packed_size
                     (const LedDriverOnChangedClientResponse   *message);
size_t led_driver_on_changed_client_response__pack
                     (const LedDriverOnChangedClientResponse   *message,
                      uint8_t             *out);
size_t led_driver_on_changed_client_response__pack_to_buffer
                     (const LedDriverOnChangedClientResponse   *message,
                      ProtobufCBuffer     *buffer);
LedDriverOnChangedClientResponse *
       led_driver_on_changed_client_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   led_driver_on_changed_client_response__free_unpacked
                     (LedDriverOnChangedClientResponse *message,
                      ProtobufCAllocator *allocator);
/* EnvironmentOnchangedClientResponse methods */
void   environment_onchanged_client_response__init
                     (EnvironmentOnchangedClientResponse         *message);
size_t environment_onchanged_client_response__get_packed_size
                     (const EnvironmentOnchangedClientResponse   *message);
size_t environment_onchanged_client_response__pack
                     (const EnvironmentOnchangedClientResponse   *message,
                      uint8_t             *out);
size_t environment_onchanged_client_response__pack_to_buffer
                     (const EnvironmentOnchangedClientResponse   *message,
                      ProtobufCBuffer     *buffer);
EnvironmentOnchangedClientResponse *
       environment_onchanged_client_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   environment_onchanged_client_response__free_unpacked
                     (EnvironmentOnchangedClientResponse *message,
                      ProtobufCAllocator *allocator);
/* SmartPlugOnchangedClientResponse methods */
void   smart_plug_onchanged_client_response__init
                     (SmartPlugOnchangedClientResponse         *message);
size_t smart_plug_onchanged_client_response__get_packed_size
                     (const SmartPlugOnchangedClientResponse   *message);
size_t smart_plug_onchanged_client_response__pack
                     (const SmartPlugOnchangedClientResponse   *message,
                      uint8_t             *out);
size_t smart_plug_onchanged_client_response__pack_to_buffer
                     (const SmartPlugOnchangedClientResponse   *message,
                      ProtobufCBuffer     *buffer);
SmartPlugOnchangedClientResponse *
       smart_plug_onchanged_client_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   smart_plug_onchanged_client_response__free_unpacked
                     (SmartPlugOnchangedClientResponse *message,
                      ProtobufCAllocator *allocator);
/* CurtainOnChangedClientResponse methods */
void   curtain_on_changed_client_response__init
                     (CurtainOnChangedClientResponse         *message);
size_t curtain_on_changed_client_response__get_packed_size
                     (const CurtainOnChangedClientResponse   *message);
size_t curtain_on_changed_client_response__pack
                     (const CurtainOnChangedClientResponse   *message,
                      uint8_t             *out);
size_t curtain_on_changed_client_response__pack_to_buffer
                     (const CurtainOnChangedClientResponse   *message,
                      ProtobufCBuffer     *buffer);
CurtainOnChangedClientResponse *
       curtain_on_changed_client_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   curtain_on_changed_client_response__free_unpacked
                     (CurtainOnChangedClientResponse *message,
                      ProtobufCAllocator *allocator);
/* TouchPanelControlSwitchOnChangedClientResponse methods */
void   touch_panel_control_switch_on_changed_client_response__init
                     (TouchPanelControlSwitchOnChangedClientResponse         *message);
size_t touch_panel_control_switch_on_changed_client_response__get_packed_size
                     (const TouchPanelControlSwitchOnChangedClientResponse   *message);
size_t touch_panel_control_switch_on_changed_client_response__pack
                     (const TouchPanelControlSwitchOnChangedClientResponse   *message,
                      uint8_t             *out);
size_t touch_panel_control_switch_on_changed_client_response__pack_to_buffer
                     (const TouchPanelControlSwitchOnChangedClientResponse   *message,
                      ProtobufCBuffer     *buffer);
TouchPanelControlSwitchOnChangedClientResponse *
       touch_panel_control_switch_on_changed_client_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   touch_panel_control_switch_on_changed_client_response__free_unpacked
                     (TouchPanelControlSwitchOnChangedClientResponse *message,
                      ProtobufCAllocator *allocator);
/* TouchPanelControlCurtainSwitchOnChangedClientResponse methods */
void   touch_panel_control_curtain_switch_on_changed_client_response__init
                     (TouchPanelControlCurtainSwitchOnChangedClientResponse         *message);
size_t touch_panel_control_curtain_switch_on_changed_client_response__get_packed_size
                     (const TouchPanelControlCurtainSwitchOnChangedClientResponse   *message);
size_t touch_panel_control_curtain_switch_on_changed_client_response__pack
                     (const TouchPanelControlCurtainSwitchOnChangedClientResponse   *message,
                      uint8_t             *out);
size_t touch_panel_control_curtain_switch_on_changed_client_response__pack_to_buffer
                     (const TouchPanelControlCurtainSwitchOnChangedClientResponse   *message,
                      ProtobufCBuffer     *buffer);
TouchPanelControlCurtainSwitchOnChangedClientResponse *
       touch_panel_control_curtain_switch_on_changed_client_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   touch_panel_control_curtain_switch_on_changed_client_response__free_unpacked
                     (TouchPanelControlCurtainSwitchOnChangedClientResponse *message,
                      ProtobufCAllocator *allocator);
/* TouchPanelControlSceneOnChangedClientResponse methods */
void   touch_panel_control_scene_on_changed_client_response__init
                     (TouchPanelControlSceneOnChangedClientResponse         *message);
size_t touch_panel_control_scene_on_changed_client_response__get_packed_size
                     (const TouchPanelControlSceneOnChangedClientResponse   *message);
size_t touch_panel_control_scene_on_changed_client_response__pack
                     (const TouchPanelControlSceneOnChangedClientResponse   *message,
                      uint8_t             *out);
size_t touch_panel_control_scene_on_changed_client_response__pack_to_buffer
                     (const TouchPanelControlSceneOnChangedClientResponse   *message,
                      ProtobufCBuffer     *buffer);
TouchPanelControlSceneOnChangedClientResponse *
       touch_panel_control_scene_on_changed_client_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   touch_panel_control_scene_on_changed_client_response__free_unpacked
                     (TouchPanelControlSceneOnChangedClientResponse *message,
                      ProtobufCAllocator *allocator);
/* TouchPanelControlLedDriverOnChangedClientResponse methods */
void   touch_panel_control_led_driver_on_changed_client_response__init
                     (TouchPanelControlLedDriverOnChangedClientResponse         *message);
size_t touch_panel_control_led_driver_on_changed_client_response__get_packed_size
                     (const TouchPanelControlLedDriverOnChangedClientResponse   *message);
size_t touch_panel_control_led_driver_on_changed_client_response__pack
                     (const TouchPanelControlLedDriverOnChangedClientResponse   *message,
                      uint8_t             *out);
size_t touch_panel_control_led_driver_on_changed_client_response__pack_to_buffer
                     (const TouchPanelControlLedDriverOnChangedClientResponse   *message,
                      ProtobufCBuffer     *buffer);
TouchPanelControlLedDriverOnChangedClientResponse *
       touch_panel_control_led_driver_on_changed_client_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   touch_panel_control_led_driver_on_changed_client_response__free_unpacked
                     (TouchPanelControlLedDriverOnChangedClientResponse *message,
                      ProtobufCAllocator *allocator);
/* TouchPanelRequestComponentStateOnChangedClientResponse methods */
void   touch_panel_request_component_state_on_changed_client_response__init
                     (TouchPanelRequestComponentStateOnChangedClientResponse         *message);
size_t touch_panel_request_component_state_on_changed_client_response__get_packed_size
                     (const TouchPanelRequestComponentStateOnChangedClientResponse   *message);
size_t touch_panel_request_component_state_on_changed_client_response__pack
                     (const TouchPanelRequestComponentStateOnChangedClientResponse   *message,
                      uint8_t             *out);
size_t touch_panel_request_component_state_on_changed_client_response__pack_to_buffer
                     (const TouchPanelRequestComponentStateOnChangedClientResponse   *message,
                      ProtobufCBuffer     *buffer);
TouchPanelRequestComponentStateOnChangedClientResponse *
       touch_panel_request_component_state_on_changed_client_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   touch_panel_request_component_state_on_changed_client_response__free_unpacked
                     (TouchPanelRequestComponentStateOnChangedClientResponse *message,
                      ProtobufCAllocator *allocator);
/* MotionClientRequest methods */
void   motion_client_request__init
                     (MotionClientRequest         *message);
size_t motion_client_request__get_packed_size
                     (const MotionClientRequest   *message);
size_t motion_client_request__pack
                     (const MotionClientRequest   *message,
                      uint8_t             *out);
size_t motion_client_request__pack_to_buffer
                     (const MotionClientRequest   *message,
                      ProtobufCBuffer     *buffer);
MotionClientRequest *
       motion_client_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   motion_client_request__free_unpacked
                     (MotionClientRequest *message,
                      ProtobufCAllocator *allocator);
/* MotionClientResponse methods */
void   motion_client_response__init
                     (MotionClientResponse         *message);
size_t motion_client_response__get_packed_size
                     (const MotionClientResponse   *message);
size_t motion_client_response__pack
                     (const MotionClientResponse   *message,
                      uint8_t             *out);
size_t motion_client_response__pack_to_buffer
                     (const MotionClientResponse   *message,
                      ProtobufCBuffer     *buffer);
MotionClientResponse *
       motion_client_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   motion_client_response__free_unpacked
                     (MotionClientResponse *message,
                      ProtobufCAllocator *allocator);
/* UpdateMotionState methods */
void   update_motion_state__init
                     (UpdateMotionState         *message);
size_t update_motion_state__get_packed_size
                     (const UpdateMotionState   *message);
size_t update_motion_state__pack
                     (const UpdateMotionState   *message,
                      uint8_t             *out);
size_t update_motion_state__pack_to_buffer
                     (const UpdateMotionState   *message,
                      ProtobufCBuffer     *buffer);
UpdateMotionState *
       update_motion_state__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   update_motion_state__free_unpacked
                     (UpdateMotionState *message,
                      ProtobufCAllocator *allocator);
/* SceneClientRequest methods */
void   scene_client_request__init
                     (SceneClientRequest         *message);
size_t scene_client_request__get_packed_size
                     (const SceneClientRequest   *message);
size_t scene_client_request__pack
                     (const SceneClientRequest   *message,
                      uint8_t             *out);
size_t scene_client_request__pack_to_buffer
                     (const SceneClientRequest   *message,
                      ProtobufCBuffer     *buffer);
SceneClientRequest *
       scene_client_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   scene_client_request__free_unpacked
                     (SceneClientRequest *message,
                      ProtobufCAllocator *allocator);
/* SceneClientResponse methods */
void   scene_client_response__init
                     (SceneClientResponse         *message);
size_t scene_client_response__get_packed_size
                     (const SceneClientResponse   *message);
size_t scene_client_response__pack
                     (const SceneClientResponse   *message,
                      uint8_t             *out);
size_t scene_client_response__pack_to_buffer
                     (const SceneClientResponse   *message,
                      ProtobufCBuffer     *buffer);
SceneClientResponse *
       scene_client_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   scene_client_response__free_unpacked
                     (SceneClientResponse *message,
                      ProtobufCAllocator *allocator);
/* LedDriverClientRequest methods */
void   led_driver_client_request__init
                     (LedDriverClientRequest         *message);
size_t led_driver_client_request__get_packed_size
                     (const LedDriverClientRequest   *message);
size_t led_driver_client_request__pack
                     (const LedDriverClientRequest   *message,
                      uint8_t             *out);
size_t led_driver_client_request__pack_to_buffer
                     (const LedDriverClientRequest   *message,
                      ProtobufCBuffer     *buffer);
LedDriverClientRequest *
       led_driver_client_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   led_driver_client_request__free_unpacked
                     (LedDriverClientRequest *message,
                      ProtobufCAllocator *allocator);
/* LedDriverClientResponse methods */
void   led_driver_client_response__init
                     (LedDriverClientResponse         *message);
size_t led_driver_client_response__get_packed_size
                     (const LedDriverClientResponse   *message);
size_t led_driver_client_response__pack
                     (const LedDriverClientResponse   *message,
                      uint8_t             *out);
size_t led_driver_client_response__pack_to_buffer
                     (const LedDriverClientResponse   *message,
                      ProtobufCBuffer     *buffer);
LedDriverClientResponse *
       led_driver_client_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   led_driver_client_response__free_unpacked
                     (LedDriverClientResponse *message,
                      ProtobufCAllocator *allocator);
/* SceneGroupClientRequest methods */
void   scene_group_client_request__init
                     (SceneGroupClientRequest         *message);
size_t scene_group_client_request__get_packed_size
                     (const SceneGroupClientRequest   *message);
size_t scene_group_client_request__pack
                     (const SceneGroupClientRequest   *message,
                      uint8_t             *out);
size_t scene_group_client_request__pack_to_buffer
                     (const SceneGroupClientRequest   *message,
                      ProtobufCBuffer     *buffer);
SceneGroupClientRequest *
       scene_group_client_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   scene_group_client_request__free_unpacked
                     (SceneGroupClientRequest *message,
                      ProtobufCAllocator *allocator);
/* MeterClientRequest methods */
void   meter_client_request__init
                     (MeterClientRequest         *message);
size_t meter_client_request__get_packed_size
                     (const MeterClientRequest   *message);
size_t meter_client_request__pack
                     (const MeterClientRequest   *message,
                      uint8_t             *out);
size_t meter_client_request__pack_to_buffer
                     (const MeterClientRequest   *message,
                      ProtobufCBuffer     *buffer);
MeterClientRequest *
       meter_client_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   meter_client_request__free_unpacked
                     (MeterClientRequest *message,
                      ProtobufCAllocator *allocator);
/* MeterClientResponse methods */
void   meter_client_response__init
                     (MeterClientResponse         *message);
size_t meter_client_response__get_packed_size
                     (const MeterClientResponse   *message);
size_t meter_client_response__pack
                     (const MeterClientResponse   *message,
                      uint8_t             *out);
size_t meter_client_response__pack_to_buffer
                     (const MeterClientResponse   *message,
                      ProtobufCBuffer     *buffer);
MeterClientResponse *
       meter_client_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   meter_client_response__free_unpacked
                     (MeterClientResponse *message,
                      ProtobufCAllocator *allocator);
/* MeterClientConfirm methods */
void   meter_client_confirm__init
                     (MeterClientConfirm         *message);
size_t meter_client_confirm__get_packed_size
                     (const MeterClientConfirm   *message);
size_t meter_client_confirm__pack
                     (const MeterClientConfirm   *message,
                      uint8_t             *out);
size_t meter_client_confirm__pack_to_buffer
                     (const MeterClientConfirm   *message,
                      ProtobufCBuffer     *buffer);
MeterClientConfirm *
       meter_client_confirm__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   meter_client_confirm__free_unpacked
                     (MeterClientConfirm *message,
                      ProtobufCAllocator *allocator);
/* SetHomekitModeClientRequest methods */
void   set_homekit_mode_client_request__init
                     (SetHomekitModeClientRequest         *message);
size_t set_homekit_mode_client_request__get_packed_size
                     (const SetHomekitModeClientRequest   *message);
size_t set_homekit_mode_client_request__pack
                     (const SetHomekitModeClientRequest   *message,
                      uint8_t             *out);
size_t set_homekit_mode_client_request__pack_to_buffer
                     (const SetHomekitModeClientRequest   *message,
                      ProtobufCBuffer     *buffer);
SetHomekitModeClientRequest *
       set_homekit_mode_client_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   set_homekit_mode_client_request__free_unpacked
                     (SetHomekitModeClientRequest *message,
                      ProtobufCAllocator *allocator);
/* SetHomekitModeClientResponse methods */
void   set_homekit_mode_client_response__init
                     (SetHomekitModeClientResponse         *message);
size_t set_homekit_mode_client_response__get_packed_size
                     (const SetHomekitModeClientResponse   *message);
size_t set_homekit_mode_client_response__pack
                     (const SetHomekitModeClientResponse   *message,
                      uint8_t             *out);
size_t set_homekit_mode_client_response__pack_to_buffer
                     (const SetHomekitModeClientResponse   *message,
                      ProtobufCBuffer     *buffer);
SetHomekitModeClientResponse *
       set_homekit_mode_client_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   set_homekit_mode_client_response__free_unpacked
                     (SetHomekitModeClientResponse *message,
                      ProtobufCAllocator *allocator);
/* SceneTriggerClientRequest methods */
void   scene_trigger_client_request__init
                     (SceneTriggerClientRequest         *message);
size_t scene_trigger_client_request__get_packed_size
                     (const SceneTriggerClientRequest   *message);
size_t scene_trigger_client_request__pack
                     (const SceneTriggerClientRequest   *message,
                      uint8_t             *out);
size_t scene_trigger_client_request__pack_to_buffer
                     (const SceneTriggerClientRequest   *message,
                      ProtobufCBuffer     *buffer);
SceneTriggerClientRequest *
       scene_trigger_client_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   scene_trigger_client_request__free_unpacked
                     (SceneTriggerClientRequest *message,
                      ProtobufCAllocator *allocator);
/* SceneTriggerClientResponse methods */
void   scene_trigger_client_response__init
                     (SceneTriggerClientResponse         *message);
size_t scene_trigger_client_response__get_packed_size
                     (const SceneTriggerClientResponse   *message);
size_t scene_trigger_client_response__pack
                     (const SceneTriggerClientResponse   *message,
                      uint8_t             *out);
size_t scene_trigger_client_response__pack_to_buffer
                     (const SceneTriggerClientResponse   *message,
                      ProtobufCBuffer     *buffer);
SceneTriggerClientResponse *
       scene_trigger_client_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   scene_trigger_client_response__free_unpacked
                     (SceneTriggerClientResponse *message,
                      ProtobufCAllocator *allocator);
/* CurtainClientRequest methods */
void   curtain_client_request__init
                     (CurtainClientRequest         *message);
size_t curtain_client_request__get_packed_size
                     (const CurtainClientRequest   *message);
size_t curtain_client_request__pack
                     (const CurtainClientRequest   *message,
                      uint8_t             *out);
size_t curtain_client_request__pack_to_buffer
                     (const CurtainClientRequest   *message,
                      ProtobufCBuffer     *buffer);
CurtainClientRequest *
       curtain_client_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   curtain_client_request__free_unpacked
                     (CurtainClientRequest *message,
                      ProtobufCAllocator *allocator);
/* CurtainClientResponse methods */
void   curtain_client_response__init
                     (CurtainClientResponse         *message);
size_t curtain_client_response__get_packed_size
                     (const CurtainClientResponse   *message);
size_t curtain_client_response__pack
                     (const CurtainClientResponse   *message,
                      uint8_t             *out);
size_t curtain_client_response__pack_to_buffer
                     (const CurtainClientResponse   *message,
                      ProtobufCBuffer     *buffer);
CurtainClientResponse *
       curtain_client_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   curtain_client_response__free_unpacked
                     (CurtainClientResponse *message,
                      ProtobufCAllocator *allocator);
/* TouchPanelChangeComponentClientRequest methods */
void   touch_panel_change_component_client_request__init
                     (TouchPanelChangeComponentClientRequest         *message);
size_t touch_panel_change_component_client_request__get_packed_size
                     (const TouchPanelChangeComponentClientRequest   *message);
size_t touch_panel_change_component_client_request__pack
                     (const TouchPanelChangeComponentClientRequest   *message,
                      uint8_t             *out);
size_t touch_panel_change_component_client_request__pack_to_buffer
                     (const TouchPanelChangeComponentClientRequest   *message,
                      ProtobufCBuffer     *buffer);
TouchPanelChangeComponentClientRequest *
       touch_panel_change_component_client_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   touch_panel_change_component_client_request__free_unpacked
                     (TouchPanelChangeComponentClientRequest *message,
                      ProtobufCAllocator *allocator);
/* TouchPanelControlSwitcherClientRequest methods */
void   touch_panel_control_switcher_client_request__init
                     (TouchPanelControlSwitcherClientRequest         *message);
size_t touch_panel_control_switcher_client_request__get_packed_size
                     (const TouchPanelControlSwitcherClientRequest   *message);
size_t touch_panel_control_switcher_client_request__pack
                     (const TouchPanelControlSwitcherClientRequest   *message,
                      uint8_t             *out);
size_t touch_panel_control_switcher_client_request__pack_to_buffer
                     (const TouchPanelControlSwitcherClientRequest   *message,
                      ProtobufCBuffer     *buffer);
TouchPanelControlSwitcherClientRequest *
       touch_panel_control_switcher_client_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   touch_panel_control_switcher_client_request__free_unpacked
                     (TouchPanelControlSwitcherClientRequest *message,
                      ProtobufCAllocator *allocator);
/* TouchPanelUpdateSwitcherClientRequest methods */
void   touch_panel_update_switcher_client_request__init
                     (TouchPanelUpdateSwitcherClientRequest         *message);
size_t touch_panel_update_switcher_client_request__get_packed_size
                     (const TouchPanelUpdateSwitcherClientRequest   *message);
size_t touch_panel_update_switcher_client_request__pack
                     (const TouchPanelUpdateSwitcherClientRequest   *message,
                      uint8_t             *out);
size_t touch_panel_update_switcher_client_request__pack_to_buffer
                     (const TouchPanelUpdateSwitcherClientRequest   *message,
                      ProtobufCBuffer     *buffer);
TouchPanelUpdateSwitcherClientRequest *
       touch_panel_update_switcher_client_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   touch_panel_update_switcher_client_request__free_unpacked
                     (TouchPanelUpdateSwitcherClientRequest *message,
                      ProtobufCAllocator *allocator);
/* TouchPanelControlCurtainSwitcherClientRequest methods */
void   touch_panel_control_curtain_switcher_client_request__init
                     (TouchPanelControlCurtainSwitcherClientRequest         *message);
size_t touch_panel_control_curtain_switcher_client_request__get_packed_size
                     (const TouchPanelControlCurtainSwitcherClientRequest   *message);
size_t touch_panel_control_curtain_switcher_client_request__pack
                     (const TouchPanelControlCurtainSwitcherClientRequest   *message,
                      uint8_t             *out);
size_t touch_panel_control_curtain_switcher_client_request__pack_to_buffer
                     (const TouchPanelControlCurtainSwitcherClientRequest   *message,
                      ProtobufCBuffer     *buffer);
TouchPanelControlCurtainSwitcherClientRequest *
       touch_panel_control_curtain_switcher_client_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   touch_panel_control_curtain_switcher_client_request__free_unpacked
                     (TouchPanelControlCurtainSwitcherClientRequest *message,
                      ProtobufCAllocator *allocator);
/* TouchPanelUpdateCurtainSwitcherClientRequest methods */
void   touch_panel_update_curtain_switcher_client_request__init
                     (TouchPanelUpdateCurtainSwitcherClientRequest         *message);
size_t touch_panel_update_curtain_switcher_client_request__get_packed_size
                     (const TouchPanelUpdateCurtainSwitcherClientRequest   *message);
size_t touch_panel_update_curtain_switcher_client_request__pack
                     (const TouchPanelUpdateCurtainSwitcherClientRequest   *message,
                      uint8_t             *out);
size_t touch_panel_update_curtain_switcher_client_request__pack_to_buffer
                     (const TouchPanelUpdateCurtainSwitcherClientRequest   *message,
                      ProtobufCBuffer     *buffer);
TouchPanelUpdateCurtainSwitcherClientRequest *
       touch_panel_update_curtain_switcher_client_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   touch_panel_update_curtain_switcher_client_request__free_unpacked
                     (TouchPanelUpdateCurtainSwitcherClientRequest *message,
                      ProtobufCAllocator *allocator);
/* TouchPanelUpdateSceneClientRequest methods */
void   touch_panel_update_scene_client_request__init
                     (TouchPanelUpdateSceneClientRequest         *message);
size_t touch_panel_update_scene_client_request__get_packed_size
                     (const TouchPanelUpdateSceneClientRequest   *message);
size_t touch_panel_update_scene_client_request__pack
                     (const TouchPanelUpdateSceneClientRequest   *message,
                      uint8_t             *out);
size_t touch_panel_update_scene_client_request__pack_to_buffer
                     (const TouchPanelUpdateSceneClientRequest   *message,
                      ProtobufCBuffer     *buffer);
TouchPanelUpdateSceneClientRequest *
       touch_panel_update_scene_client_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   touch_panel_update_scene_client_request__free_unpacked
                     (TouchPanelUpdateSceneClientRequest *message,
                      ProtobufCAllocator *allocator);
/* TouchPanelControlLedDriverClientRequest methods */
void   touch_panel_control_led_driver_client_request__init
                     (TouchPanelControlLedDriverClientRequest         *message);
size_t touch_panel_control_led_driver_client_request__get_packed_size
                     (const TouchPanelControlLedDriverClientRequest   *message);
size_t touch_panel_control_led_driver_client_request__pack
                     (const TouchPanelControlLedDriverClientRequest   *message,
                      uint8_t             *out);
size_t touch_panel_control_led_driver_client_request__pack_to_buffer
                     (const TouchPanelControlLedDriverClientRequest   *message,
                      ProtobufCBuffer     *buffer);
TouchPanelControlLedDriverClientRequest *
       touch_panel_control_led_driver_client_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   touch_panel_control_led_driver_client_request__free_unpacked
                     (TouchPanelControlLedDriverClientRequest *message,
                      ProtobufCAllocator *allocator);
/* TouchPanelUpdateLedDriverClientRequest methods */
void   touch_panel_update_led_driver_client_request__init
                     (TouchPanelUpdateLedDriverClientRequest         *message);
size_t touch_panel_update_led_driver_client_request__get_packed_size
                     (const TouchPanelUpdateLedDriverClientRequest   *message);
size_t touch_panel_update_led_driver_client_request__pack
                     (const TouchPanelUpdateLedDriverClientRequest   *message,
                      uint8_t             *out);
size_t touch_panel_update_led_driver_client_request__pack_to_buffer
                     (const TouchPanelUpdateLedDriverClientRequest   *message,
                      ProtobufCBuffer     *buffer);
TouchPanelUpdateLedDriverClientRequest *
       touch_panel_update_led_driver_client_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   touch_panel_update_led_driver_client_request__free_unpacked
                     (TouchPanelUpdateLedDriverClientRequest *message,
                      ProtobufCAllocator *allocator);
/* DeviceClientMessage methods */
void   device_client_message__init
                     (DeviceClientMessage         *message);
size_t device_client_message__get_packed_size
                     (const DeviceClientMessage   *message);
size_t device_client_message__pack
                     (const DeviceClientMessage   *message,
                      uint8_t             *out);
size_t device_client_message__pack_to_buffer
                     (const DeviceClientMessage   *message,
                      ProtobufCBuffer     *buffer);
DeviceClientMessage *
       device_client_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   device_client_message__free_unpacked
                     (DeviceClientMessage *message,
                      ProtobufCAllocator *allocator);
/* SwitcherClientMessage methods */
void   switcher_client_message__init
                     (SwitcherClientMessage         *message);
size_t switcher_client_message__get_packed_size
                     (const SwitcherClientMessage   *message);
size_t switcher_client_message__pack
                     (const SwitcherClientMessage   *message,
                      uint8_t             *out);
size_t switcher_client_message__pack_to_buffer
                     (const SwitcherClientMessage   *message,
                      ProtobufCBuffer     *buffer);
SwitcherClientMessage *
       switcher_client_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   switcher_client_message__free_unpacked
                     (SwitcherClientMessage *message,
                      ProtobufCAllocator *allocator);
/* CurtainSwitcherClientMessage methods */
void   curtain_switcher_client_message__init
                     (CurtainSwitcherClientMessage         *message);
size_t curtain_switcher_client_message__get_packed_size
                     (const CurtainSwitcherClientMessage   *message);
size_t curtain_switcher_client_message__pack
                     (const CurtainSwitcherClientMessage   *message,
                      uint8_t             *out);
size_t curtain_switcher_client_message__pack_to_buffer
                     (const CurtainSwitcherClientMessage   *message,
                      ProtobufCBuffer     *buffer);
CurtainSwitcherClientMessage *
       curtain_switcher_client_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   curtain_switcher_client_message__free_unpacked
                     (CurtainSwitcherClientMessage *message,
                      ProtobufCAllocator *allocator);
/* AirConditionerClientMessage methods */
void   air_conditioner_client_message__init
                     (AirConditionerClientMessage         *message);
size_t air_conditioner_client_message__get_packed_size
                     (const AirConditionerClientMessage   *message);
size_t air_conditioner_client_message__pack
                     (const AirConditionerClientMessage   *message,
                      uint8_t             *out);
size_t air_conditioner_client_message__pack_to_buffer
                     (const AirConditionerClientMessage   *message,
                      ProtobufCBuffer     *buffer);
AirConditionerClientMessage *
       air_conditioner_client_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   air_conditioner_client_message__free_unpacked
                     (AirConditionerClientMessage *message,
                      ProtobufCAllocator *allocator);
/* RemoteClientMessage methods */
void   remote_client_message__init
                     (RemoteClientMessage         *message);
size_t remote_client_message__get_packed_size
                     (const RemoteClientMessage   *message);
size_t remote_client_message__pack
                     (const RemoteClientMessage   *message,
                      uint8_t             *out);
size_t remote_client_message__pack_to_buffer
                     (const RemoteClientMessage   *message,
                      ProtobufCBuffer     *buffer);
RemoteClientMessage *
       remote_client_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   remote_client_message__free_unpacked
                     (RemoteClientMessage *message,
                      ProtobufCAllocator *allocator);
/* OnChangedClientMessage methods */
void   on_changed_client_message__init
                     (OnChangedClientMessage         *message);
size_t on_changed_client_message__get_packed_size
                     (const OnChangedClientMessage   *message);
size_t on_changed_client_message__pack
                     (const OnChangedClientMessage   *message,
                      uint8_t             *out);
size_t on_changed_client_message__pack_to_buffer
                     (const OnChangedClientMessage   *message,
                      ProtobufCBuffer     *buffer);
OnChangedClientMessage *
       on_changed_client_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   on_changed_client_message__free_unpacked
                     (OnChangedClientMessage *message,
                      ProtobufCAllocator *allocator);
/* MotionClientMessage methods */
void   motion_client_message__init
                     (MotionClientMessage         *message);
size_t motion_client_message__get_packed_size
                     (const MotionClientMessage   *message);
size_t motion_client_message__pack
                     (const MotionClientMessage   *message,
                      uint8_t             *out);
size_t motion_client_message__pack_to_buffer
                     (const MotionClientMessage   *message,
                      ProtobufCBuffer     *buffer);
MotionClientMessage *
       motion_client_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   motion_client_message__free_unpacked
                     (MotionClientMessage *message,
                      ProtobufCAllocator *allocator);
/* SceneClientMessage methods */
void   scene_client_message__init
                     (SceneClientMessage         *message);
size_t scene_client_message__get_packed_size
                     (const SceneClientMessage   *message);
size_t scene_client_message__pack
                     (const SceneClientMessage   *message,
                      uint8_t             *out);
size_t scene_client_message__pack_to_buffer
                     (const SceneClientMessage   *message,
                      ProtobufCBuffer     *buffer);
SceneClientMessage *
       scene_client_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   scene_client_message__free_unpacked
                     (SceneClientMessage *message,
                      ProtobufCAllocator *allocator);
/* LedDriverClientMessage methods */
void   led_driver_client_message__init
                     (LedDriverClientMessage         *message);
size_t led_driver_client_message__get_packed_size
                     (const LedDriverClientMessage   *message);
size_t led_driver_client_message__pack
                     (const LedDriverClientMessage   *message,
                      uint8_t             *out);
size_t led_driver_client_message__pack_to_buffer
                     (const LedDriverClientMessage   *message,
                      ProtobufCBuffer     *buffer);
LedDriverClientMessage *
       led_driver_client_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   led_driver_client_message__free_unpacked
                     (LedDriverClientMessage *message,
                      ProtobufCAllocator *allocator);
/* MeterClientMessage methods */
void   meter_client_message__init
                     (MeterClientMessage         *message);
size_t meter_client_message__get_packed_size
                     (const MeterClientMessage   *message);
size_t meter_client_message__pack
                     (const MeterClientMessage   *message,
                      uint8_t             *out);
size_t meter_client_message__pack_to_buffer
                     (const MeterClientMessage   *message,
                      ProtobufCBuffer     *buffer);
MeterClientMessage *
       meter_client_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   meter_client_message__free_unpacked
                     (MeterClientMessage *message,
                      ProtobufCAllocator *allocator);
/* HomekitClientMessage methods */
void   homekit_client_message__init
                     (HomekitClientMessage         *message);
size_t homekit_client_message__get_packed_size
                     (const HomekitClientMessage   *message);
size_t homekit_client_message__pack
                     (const HomekitClientMessage   *message,
                      uint8_t             *out);
size_t homekit_client_message__pack_to_buffer
                     (const HomekitClientMessage   *message,
                      ProtobufCBuffer     *buffer);
HomekitClientMessage *
       homekit_client_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   homekit_client_message__free_unpacked
                     (HomekitClientMessage *message,
                      ProtobufCAllocator *allocator);
/* SceneTriggerClientMessage methods */
void   scene_trigger_client_message__init
                     (SceneTriggerClientMessage         *message);
size_t scene_trigger_client_message__get_packed_size
                     (const SceneTriggerClientMessage   *message);
size_t scene_trigger_client_message__pack
                     (const SceneTriggerClientMessage   *message,
                      uint8_t             *out);
size_t scene_trigger_client_message__pack_to_buffer
                     (const SceneTriggerClientMessage   *message,
                      ProtobufCBuffer     *buffer);
SceneTriggerClientMessage *
       scene_trigger_client_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   scene_trigger_client_message__free_unpacked
                     (SceneTriggerClientMessage *message,
                      ProtobufCAllocator *allocator);
/* CurtainClientMessage methods */
void   curtain_client_message__init
                     (CurtainClientMessage         *message);
size_t curtain_client_message__get_packed_size
                     (const CurtainClientMessage   *message);
size_t curtain_client_message__pack
                     (const CurtainClientMessage   *message,
                      uint8_t             *out);
size_t curtain_client_message__pack_to_buffer
                     (const CurtainClientMessage   *message,
                      ProtobufCBuffer     *buffer);
CurtainClientMessage *
       curtain_client_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   curtain_client_message__free_unpacked
                     (CurtainClientMessage *message,
                      ProtobufCAllocator *allocator);
/* TouchPanelClientMessage methods */
void   touch_panel_client_message__init
                     (TouchPanelClientMessage         *message);
size_t touch_panel_client_message__get_packed_size
                     (const TouchPanelClientMessage   *message);
size_t touch_panel_client_message__pack
                     (const TouchPanelClientMessage   *message,
                      uint8_t             *out);
size_t touch_panel_client_message__pack_to_buffer
                     (const TouchPanelClientMessage   *message,
                      ProtobufCBuffer     *buffer);
TouchPanelClientMessage *
       touch_panel_client_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   touch_panel_client_message__free_unpacked
                     (TouchPanelClientMessage *message,
                      ProtobufCAllocator *allocator);
/* ClientMessage methods */
void   client_message__init
                     (ClientMessage         *message);
size_t client_message__get_packed_size
                     (const ClientMessage   *message);
size_t client_message__pack
                     (const ClientMessage   *message,
                      uint8_t             *out);
size_t client_message__pack_to_buffer
                     (const ClientMessage   *message,
                      ProtobufCBuffer     *buffer);
ClientMessage *
       client_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   client_message__free_unpacked
                     (ClientMessage *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*ForceUpdateFirmwareDeviceClientRequest_Closure)
                 (const ForceUpdateFirmwareDeviceClientRequest *message,
                  void *closure_data);
typedef void (*ForceUpdateFirmwareDeviceClientResponse_Closure)
                 (const ForceUpdateFirmwareDeviceClientResponse *message,
                  void *closure_data);
typedef void (*UpdateDeviceClientRequest_Closure)
                 (const UpdateDeviceClientRequest *message,
                  void *closure_data);
typedef void (*UpdateDeviceClientResponse_Closure)
                 (const UpdateDeviceClientResponse *message,
                  void *closure_data);
typedef void (*UpdateWSEndpointClientRequest_Closure)
                 (const UpdateWSEndpointClientRequest *message,
                  void *closure_data);
typedef void (*UpdateWSEndpointClientResponse_Closure)
                 (const UpdateWSEndpointClientResponse *message,
                  void *closure_data);
typedef void (*DeleteDeviceClientRequest_Closure)
                 (const DeleteDeviceClientRequest *message,
                  void *closure_data);
typedef void (*DeleteDeviceClientResponse_Closure)
                 (const DeleteDeviceClientResponse *message,
                  void *closure_data);
typedef void (*GetSwitchersClientRequest_Closure)
                 (const GetSwitchersClientRequest *message,
                  void *closure_data);
typedef void (*GetSwitchersClientResponse_Closure)
                 (const GetSwitchersClientResponse *message,
                  void *closure_data);
typedef void (*GetSwitcherClientRequest_Closure)
                 (const GetSwitcherClientRequest *message,
                  void *closure_data);
typedef void (*GetSwitcherClientResponse_Closure)
                 (const GetSwitcherClientResponse *message,
                  void *closure_data);
typedef void (*GetLogSwitcherClientRequest_Closure)
                 (const GetLogSwitcherClientRequest *message,
                  void *closure_data);
typedef void (*GetLogSwitcherClientResponse_Closure)
                 (const GetLogSwitcherClientResponse *message,
                  void *closure_data);
typedef void (*SwitcherClientRequest_Closure)
                 (const SwitcherClientRequest *message,
                  void *closure_data);
typedef void (*SwitcherClientResponse_Closure)
                 (const SwitcherClientResponse *message,
                  void *closure_data);
typedef void (*AddSwitcherScheduleClientRequest_Closure)
                 (const AddSwitcherScheduleClientRequest *message,
                  void *closure_data);
typedef void (*AddSwitcherScheduleClientResponse_Closure)
                 (const AddSwitcherScheduleClientResponse *message,
                  void *closure_data);
typedef void (*UpdateSwitcherScheduleClientRequest_Closure)
                 (const UpdateSwitcherScheduleClientRequest *message,
                  void *closure_data);
typedef void (*UpdateSwitcherScheduleClientResponse_Closure)
                 (const UpdateSwitcherScheduleClientResponse *message,
                  void *closure_data);
typedef void (*DeleteSwitcherScheduleClientRequest_Closure)
                 (const DeleteSwitcherScheduleClientRequest *message,
                  void *closure_data);
typedef void (*DeleteSwitcherScheduleClientResponse_Closure)
                 (const DeleteSwitcherScheduleClientResponse *message,
                  void *closure_data);
typedef void (*UpdateSwitcherClientRequest_Closure)
                 (const UpdateSwitcherClientRequest *message,
                  void *closure_data);
typedef void (*UpdateSwitcherClientResponse_Closure)
                 (const UpdateSwitcherClientResponse *message,
                  void *closure_data);
typedef void (*UpdateSwitcherState_Closure)
                 (const UpdateSwitcherState *message,
                  void *closure_data);
typedef void (*CurtainSwitcherClientRequest_Closure)
                 (const CurtainSwitcherClientRequest *message,
                  void *closure_data);
typedef void (*CurtainSwitcherClientResponse_Closure)
                 (const CurtainSwitcherClientResponse *message,
                  void *closure_data);
typedef void (*AddCurtainSwitcherScheduleClientRequest_Closure)
                 (const AddCurtainSwitcherScheduleClientRequest *message,
                  void *closure_data);
typedef void (*AddCurtainSwitcherScheduleClientResponse_Closure)
                 (const AddCurtainSwitcherScheduleClientResponse *message,
                  void *closure_data);
typedef void (*UpdateCurtainSwitcherScheduleClientRequest_Closure)
                 (const UpdateCurtainSwitcherScheduleClientRequest *message,
                  void *closure_data);
typedef void (*UpdateCurtainSwitcherScheduleClientResponse_Closure)
                 (const UpdateCurtainSwitcherScheduleClientResponse *message,
                  void *closure_data);
typedef void (*DeleteCurtainSwitcherScheduleClientRequest_Closure)
                 (const DeleteCurtainSwitcherScheduleClientRequest *message,
                  void *closure_data);
typedef void (*DeleteCurtainSwitcherScheduleClientResponse_Closure)
                 (const DeleteCurtainSwitcherScheduleClientResponse *message,
                  void *closure_data);
typedef void (*AirConditionerClientRequest_Closure)
                 (const AirConditionerClientRequest *message,
                  void *closure_data);
typedef void (*AirConditionerClientResponse_Closure)
                 (const AirConditionerClientResponse *message,
                  void *closure_data);
typedef void (*GetAirConditionerClientRequest_Closure)
                 (const GetAirConditionerClientRequest *message,
                  void *closure_data);
typedef void (*GetAirConditionerClientResponse_Closure)
                 (const GetAirConditionerClientResponse *message,
                  void *closure_data);
typedef void (*AirConditionerAddIndoorsRequest_Closure)
                 (const AirConditionerAddIndoorsRequest *message,
                  void *closure_data);
typedef void (*AirConditionerAddIndoorsResponse_Closure)
                 (const AirConditionerAddIndoorsResponse *message,
                  void *closure_data);
typedef void (*AirConditionerRemoveIndoorRequest_Closure)
                 (const AirConditionerRemoveIndoorRequest *message,
                  void *closure_data);
typedef void (*AirConditionerRemoveIndoorResponse_Closure)
                 (const AirConditionerRemoveIndoorResponse *message,
                  void *closure_data);
typedef void (*SendCommandRemoteClientRequest_Closure)
                 (const SendCommandRemoteClientRequest *message,
                  void *closure_data);
typedef void (*SendCommandRemoteClientResponse_Closure)
                 (const SendCommandRemoteClientResponse *message,
                  void *closure_data);
typedef void (*LearnCommandRemoteClientRequest_Closure)
                 (const LearnCommandRemoteClientRequest *message,
                  void *closure_data);
typedef void (*LearnCommandRemoteClientResponse_Closure)
                 (const LearnCommandRemoteClientResponse *message,
                  void *closure_data);
typedef void (*ControlRemoteACCommandClientRequest_Closure)
                 (const ControlRemoteACCommandClientRequest *message,
                  void *closure_data);
typedef void (*ControlRemoteACCommandClientResponse_Closure)
                 (const ControlRemoteACCommandClientResponse *message,
                  void *closure_data);
typedef void (*MeterOnChangedClientResponse_Closure)
                 (const MeterOnChangedClientResponse *message,
                  void *closure_data);
typedef void (*SwitcherOnChangedClientResponse_Closure)
                 (const SwitcherOnChangedClientResponse *message,
                  void *closure_data);
typedef void (*CurtainSwitcherOnChangedClientResponse_Closure)
                 (const CurtainSwitcherOnChangedClientResponse *message,
                  void *closure_data);
typedef void (*AirConditionerOnChangedClientResponse_Closure)
                 (const AirConditionerOnChangedClientResponse *message,
                  void *closure_data);
typedef void (*ProgressUpdateFirmwareOnChangedDeviceClientResponse_Closure)
                 (const ProgressUpdateFirmwareOnChangedDeviceClientResponse *message,
                  void *closure_data);
typedef void (*DeviceOnChangedDeviceClientResponse_Closure)
                 (const DeviceOnChangedDeviceClientResponse *message,
                  void *closure_data);
typedef void (*MotionOnChangedClientResponse_Closure)
                 (const MotionOnChangedClientResponse *message,
                  void *closure_data);
typedef void (*HomekitOnChangedClientResponse_Closure)
                 (const HomekitOnChangedClientResponse *message,
                  void *closure_data);
typedef void (*ButtonOnChangedClientResponse_Closure)
                 (const ButtonOnChangedClientResponse *message,
                  void *closure_data);
typedef void (*DebugLoggingResponse_Closure)
                 (const DebugLoggingResponse *message,
                  void *closure_data);
typedef void (*LedDriverOnChangedClientResponse_Closure)
                 (const LedDriverOnChangedClientResponse *message,
                  void *closure_data);
typedef void (*EnvironmentOnchangedClientResponse_Closure)
                 (const EnvironmentOnchangedClientResponse *message,
                  void *closure_data);
typedef void (*SmartPlugOnchangedClientResponse_Closure)
                 (const SmartPlugOnchangedClientResponse *message,
                  void *closure_data);
typedef void (*CurtainOnChangedClientResponse_Closure)
                 (const CurtainOnChangedClientResponse *message,
                  void *closure_data);
typedef void (*TouchPanelControlSwitchOnChangedClientResponse_Closure)
                 (const TouchPanelControlSwitchOnChangedClientResponse *message,
                  void *closure_data);
typedef void (*TouchPanelControlCurtainSwitchOnChangedClientResponse_Closure)
                 (const TouchPanelControlCurtainSwitchOnChangedClientResponse *message,
                  void *closure_data);
typedef void (*TouchPanelControlSceneOnChangedClientResponse_Closure)
                 (const TouchPanelControlSceneOnChangedClientResponse *message,
                  void *closure_data);
typedef void (*TouchPanelControlLedDriverOnChangedClientResponse_Closure)
                 (const TouchPanelControlLedDriverOnChangedClientResponse *message,
                  void *closure_data);
typedef void (*TouchPanelRequestComponentStateOnChangedClientResponse_Closure)
                 (const TouchPanelRequestComponentStateOnChangedClientResponse *message,
                  void *closure_data);
typedef void (*MotionClientRequest_Closure)
                 (const MotionClientRequest *message,
                  void *closure_data);
typedef void (*MotionClientResponse_Closure)
                 (const MotionClientResponse *message,
                  void *closure_data);
typedef void (*UpdateMotionState_Closure)
                 (const UpdateMotionState *message,
                  void *closure_data);
typedef void (*SceneClientRequest_Closure)
                 (const SceneClientRequest *message,
                  void *closure_data);
typedef void (*SceneClientResponse_Closure)
                 (const SceneClientResponse *message,
                  void *closure_data);
typedef void (*LedDriverClientRequest_Closure)
                 (const LedDriverClientRequest *message,
                  void *closure_data);
typedef void (*LedDriverClientResponse_Closure)
                 (const LedDriverClientResponse *message,
                  void *closure_data);
typedef void (*SceneGroupClientRequest_Closure)
                 (const SceneGroupClientRequest *message,
                  void *closure_data);
typedef void (*MeterClientRequest_Closure)
                 (const MeterClientRequest *message,
                  void *closure_data);
typedef void (*MeterClientResponse_Closure)
                 (const MeterClientResponse *message,
                  void *closure_data);
typedef void (*MeterClientConfirm_Closure)
                 (const MeterClientConfirm *message,
                  void *closure_data);
typedef void (*SetHomekitModeClientRequest_Closure)
                 (const SetHomekitModeClientRequest *message,
                  void *closure_data);
typedef void (*SetHomekitModeClientResponse_Closure)
                 (const SetHomekitModeClientResponse *message,
                  void *closure_data);
typedef void (*SceneTriggerClientRequest_Closure)
                 (const SceneTriggerClientRequest *message,
                  void *closure_data);
typedef void (*SceneTriggerClientResponse_Closure)
                 (const SceneTriggerClientResponse *message,
                  void *closure_data);
typedef void (*CurtainClientRequest_Closure)
                 (const CurtainClientRequest *message,
                  void *closure_data);
typedef void (*CurtainClientResponse_Closure)
                 (const CurtainClientResponse *message,
                  void *closure_data);
typedef void (*TouchPanelChangeComponentClientRequest_Closure)
                 (const TouchPanelChangeComponentClientRequest *message,
                  void *closure_data);
typedef void (*TouchPanelControlSwitcherClientRequest_Closure)
                 (const TouchPanelControlSwitcherClientRequest *message,
                  void *closure_data);
typedef void (*TouchPanelUpdateSwitcherClientRequest_Closure)
                 (const TouchPanelUpdateSwitcherClientRequest *message,
                  void *closure_data);
typedef void (*TouchPanelControlCurtainSwitcherClientRequest_Closure)
                 (const TouchPanelControlCurtainSwitcherClientRequest *message,
                  void *closure_data);
typedef void (*TouchPanelUpdateCurtainSwitcherClientRequest_Closure)
                 (const TouchPanelUpdateCurtainSwitcherClientRequest *message,
                  void *closure_data);
typedef void (*TouchPanelUpdateSceneClientRequest_Closure)
                 (const TouchPanelUpdateSceneClientRequest *message,
                  void *closure_data);
typedef void (*TouchPanelControlLedDriverClientRequest_Closure)
                 (const TouchPanelControlLedDriverClientRequest *message,
                  void *closure_data);
typedef void (*TouchPanelUpdateLedDriverClientRequest_Closure)
                 (const TouchPanelUpdateLedDriverClientRequest *message,
                  void *closure_data);
typedef void (*DeviceClientMessage_Closure)
                 (const DeviceClientMessage *message,
                  void *closure_data);
typedef void (*SwitcherClientMessage_Closure)
                 (const SwitcherClientMessage *message,
                  void *closure_data);
typedef void (*CurtainSwitcherClientMessage_Closure)
                 (const CurtainSwitcherClientMessage *message,
                  void *closure_data);
typedef void (*AirConditionerClientMessage_Closure)
                 (const AirConditionerClientMessage *message,
                  void *closure_data);
typedef void (*RemoteClientMessage_Closure)
                 (const RemoteClientMessage *message,
                  void *closure_data);
typedef void (*OnChangedClientMessage_Closure)
                 (const OnChangedClientMessage *message,
                  void *closure_data);
typedef void (*MotionClientMessage_Closure)
                 (const MotionClientMessage *message,
                  void *closure_data);
typedef void (*SceneClientMessage_Closure)
                 (const SceneClientMessage *message,
                  void *closure_data);
typedef void (*LedDriverClientMessage_Closure)
                 (const LedDriverClientMessage *message,
                  void *closure_data);
typedef void (*MeterClientMessage_Closure)
                 (const MeterClientMessage *message,
                  void *closure_data);
typedef void (*HomekitClientMessage_Closure)
                 (const HomekitClientMessage *message,
                  void *closure_data);
typedef void (*SceneTriggerClientMessage_Closure)
                 (const SceneTriggerClientMessage *message,
                  void *closure_data);
typedef void (*CurtainClientMessage_Closure)
                 (const CurtainClientMessage *message,
                  void *closure_data);
typedef void (*TouchPanelClientMessage_Closure)
                 (const TouchPanelClientMessage *message,
                  void *closure_data);
typedef void (*ClientMessage_Closure)
                 (const ClientMessage *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor force_update_firmware_device_client_request__descriptor;
extern const ProtobufCMessageDescriptor force_update_firmware_device_client_response__descriptor;
extern const ProtobufCMessageDescriptor update_device_client_request__descriptor;
extern const ProtobufCMessageDescriptor update_device_client_response__descriptor;
extern const ProtobufCMessageDescriptor update_wsendpoint_client_request__descriptor;
extern const ProtobufCMessageDescriptor update_wsendpoint_client_response__descriptor;
extern const ProtobufCMessageDescriptor delete_device_client_request__descriptor;
extern const ProtobufCMessageDescriptor delete_device_client_response__descriptor;
extern const ProtobufCMessageDescriptor get_switchers_client_request__descriptor;
extern const ProtobufCMessageDescriptor get_switchers_client_response__descriptor;
extern const ProtobufCMessageDescriptor get_switcher_client_request__descriptor;
extern const ProtobufCMessageDescriptor get_switcher_client_response__descriptor;
extern const ProtobufCMessageDescriptor get_log_switcher_client_request__descriptor;
extern const ProtobufCMessageDescriptor get_log_switcher_client_response__descriptor;
extern const ProtobufCMessageDescriptor switcher_client_request__descriptor;
extern const ProtobufCMessageDescriptor switcher_client_response__descriptor;
extern const ProtobufCMessageDescriptor add_switcher_schedule_client_request__descriptor;
extern const ProtobufCMessageDescriptor add_switcher_schedule_client_response__descriptor;
extern const ProtobufCMessageDescriptor update_switcher_schedule_client_request__descriptor;
extern const ProtobufCMessageDescriptor update_switcher_schedule_client_response__descriptor;
extern const ProtobufCMessageDescriptor delete_switcher_schedule_client_request__descriptor;
extern const ProtobufCMessageDescriptor delete_switcher_schedule_client_response__descriptor;
extern const ProtobufCMessageDescriptor update_switcher_client_request__descriptor;
extern const ProtobufCMessageDescriptor update_switcher_client_response__descriptor;
extern const ProtobufCMessageDescriptor update_switcher_state__descriptor;
extern const ProtobufCMessageDescriptor curtain_switcher_client_request__descriptor;
extern const ProtobufCMessageDescriptor curtain_switcher_client_response__descriptor;
extern const ProtobufCMessageDescriptor add_curtain_switcher_schedule_client_request__descriptor;
extern const ProtobufCMessageDescriptor add_curtain_switcher_schedule_client_response__descriptor;
extern const ProtobufCMessageDescriptor update_curtain_switcher_schedule_client_request__descriptor;
extern const ProtobufCMessageDescriptor update_curtain_switcher_schedule_client_response__descriptor;
extern const ProtobufCMessageDescriptor delete_curtain_switcher_schedule_client_request__descriptor;
extern const ProtobufCMessageDescriptor delete_curtain_switcher_schedule_client_response__descriptor;
extern const ProtobufCMessageDescriptor air_conditioner_client_request__descriptor;
extern const ProtobufCMessageDescriptor air_conditioner_client_response__descriptor;
extern const ProtobufCMessageDescriptor get_air_conditioner_client_request__descriptor;
extern const ProtobufCMessageDescriptor get_air_conditioner_client_response__descriptor;
extern const ProtobufCMessageDescriptor air_conditioner_add_indoors_request__descriptor;
extern const ProtobufCMessageDescriptor air_conditioner_add_indoors_response__descriptor;
extern const ProtobufCMessageDescriptor air_conditioner_remove_indoor_request__descriptor;
extern const ProtobufCMessageDescriptor air_conditioner_remove_indoor_response__descriptor;
extern const ProtobufCMessageDescriptor send_command_remote_client_request__descriptor;
extern const ProtobufCMessageDescriptor send_command_remote_client_response__descriptor;
extern const ProtobufCMessageDescriptor learn_command_remote_client_request__descriptor;
extern const ProtobufCMessageDescriptor learn_command_remote_client_response__descriptor;
extern const ProtobufCMessageDescriptor control_remote_accommand_client_request__descriptor;
extern const ProtobufCMessageDescriptor control_remote_accommand_client_response__descriptor;
extern const ProtobufCMessageDescriptor meter_on_changed_client_response__descriptor;
extern const ProtobufCMessageDescriptor switcher_on_changed_client_response__descriptor;
extern const ProtobufCMessageDescriptor curtain_switcher_on_changed_client_response__descriptor;
extern const ProtobufCMessageDescriptor air_conditioner_on_changed_client_response__descriptor;
extern const ProtobufCMessageDescriptor progress_update_firmware_on_changed_device_client_response__descriptor;
extern const ProtobufCMessageDescriptor device_on_changed_device_client_response__descriptor;
extern const ProtobufCMessageDescriptor motion_on_changed_client_response__descriptor;
extern const ProtobufCMessageDescriptor homekit_on_changed_client_response__descriptor;
extern const ProtobufCMessageDescriptor button_on_changed_client_response__descriptor;
extern const ProtobufCMessageDescriptor debug_logging_response__descriptor;
extern const ProtobufCMessageDescriptor led_driver_on_changed_client_response__descriptor;
extern const ProtobufCMessageDescriptor environment_onchanged_client_response__descriptor;
extern const ProtobufCMessageDescriptor smart_plug_onchanged_client_response__descriptor;
extern const ProtobufCMessageDescriptor curtain_on_changed_client_response__descriptor;
extern const ProtobufCMessageDescriptor touch_panel_control_switch_on_changed_client_response__descriptor;
extern const ProtobufCMessageDescriptor touch_panel_control_curtain_switch_on_changed_client_response__descriptor;
extern const ProtobufCMessageDescriptor touch_panel_control_scene_on_changed_client_response__descriptor;
extern const ProtobufCMessageDescriptor touch_panel_control_led_driver_on_changed_client_response__descriptor;
extern const ProtobufCMessageDescriptor touch_panel_request_component_state_on_changed_client_response__descriptor;
extern const ProtobufCMessageDescriptor motion_client_request__descriptor;
extern const ProtobufCMessageDescriptor motion_client_response__descriptor;
extern const ProtobufCMessageDescriptor update_motion_state__descriptor;
extern const ProtobufCMessageDescriptor scene_client_request__descriptor;
extern const ProtobufCMessageDescriptor scene_client_response__descriptor;
extern const ProtobufCMessageDescriptor led_driver_client_request__descriptor;
extern const ProtobufCMessageDescriptor led_driver_client_response__descriptor;
extern const ProtobufCMessageDescriptor scene_group_client_request__descriptor;
extern const ProtobufCMessageDescriptor meter_client_request__descriptor;
extern const ProtobufCMessageDescriptor meter_client_response__descriptor;
extern const ProtobufCMessageDescriptor meter_client_confirm__descriptor;
extern const ProtobufCMessageDescriptor set_homekit_mode_client_request__descriptor;
extern const ProtobufCMessageDescriptor set_homekit_mode_client_response__descriptor;
extern const ProtobufCMessageDescriptor scene_trigger_client_request__descriptor;
extern const ProtobufCMessageDescriptor scene_trigger_client_response__descriptor;
extern const ProtobufCMessageDescriptor curtain_client_request__descriptor;
extern const ProtobufCMessageDescriptor curtain_client_response__descriptor;
extern const ProtobufCMessageDescriptor touch_panel_change_component_client_request__descriptor;
extern const ProtobufCMessageDescriptor touch_panel_control_switcher_client_request__descriptor;
extern const ProtobufCMessageDescriptor touch_panel_update_switcher_client_request__descriptor;
extern const ProtobufCMessageDescriptor touch_panel_control_curtain_switcher_client_request__descriptor;
extern const ProtobufCMessageDescriptor touch_panel_update_curtain_switcher_client_request__descriptor;
extern const ProtobufCMessageDescriptor touch_panel_update_scene_client_request__descriptor;
extern const ProtobufCMessageDescriptor touch_panel_control_led_driver_client_request__descriptor;
extern const ProtobufCMessageDescriptor touch_panel_update_led_driver_client_request__descriptor;
extern const ProtobufCMessageDescriptor device_client_message__descriptor;
extern const ProtobufCMessageDescriptor switcher_client_message__descriptor;
extern const ProtobufCMessageDescriptor curtain_switcher_client_message__descriptor;
extern const ProtobufCMessageDescriptor air_conditioner_client_message__descriptor;
extern const ProtobufCMessageDescriptor remote_client_message__descriptor;
extern const ProtobufCMessageDescriptor on_changed_client_message__descriptor;
extern const ProtobufCMessageDescriptor motion_client_message__descriptor;
extern const ProtobufCMessageDescriptor scene_client_message__descriptor;
extern const ProtobufCMessageDescriptor led_driver_client_message__descriptor;
extern const ProtobufCMessageDescriptor meter_client_message__descriptor;
extern const ProtobufCMessageDescriptor homekit_client_message__descriptor;
extern const ProtobufCMessageDescriptor scene_trigger_client_message__descriptor;
extern const ProtobufCMessageDescriptor curtain_client_message__descriptor;
extern const ProtobufCMessageDescriptor touch_panel_client_message__descriptor;
extern const ProtobufCMessageDescriptor client_message__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_client_2dmessage_2eproto__INCLUDED */
