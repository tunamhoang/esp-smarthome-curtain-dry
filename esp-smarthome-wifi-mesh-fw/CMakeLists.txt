cmake_minimum_required(VERSION 3.5)

# set(ENV{IDF_PATH} "${CMAKE_CURRENT_LIST_DIR}/esp-idf")

# file(READ "${CMAKE_SOURCE_DIR}/sdkconfig" SDKCONFIG_CONTENT)
# string(REGEX MATCH "CONFIG_DEVICE_TYPE_THERMOSTAT=y" MATCH_THERMOSTAT "${SDKCONFIG_CONTENT}")
# if(MATCH_THERMOSTAT)
#     set(BUILD_NAME "tuya-thermostat")
#     set(BUILD_VER_NAME "THERMOSTAT_VER")
# else()
#     string(REGEX MATCH "CONFIG_DEVICE_TYPE_TOUCH=y" MATCH_TOUCH "${SDKCONFIG_CONTENT}")
#     if(MATCH_TOUCH)
#         set(BUILD_NAME "tuya-touch")
#         set(BUILD_VER_NAME "TOUCH_VER")
#     else()
#         string(REGEX MATCH "CONFIG_DEVICE_TYPE_TOUCH_CURTAIN=y" MATCH_TOUCH_CURTAIN "${SDKCONFIG_CONTENT}")
#         if(MATCH_TOUCH_CURTAIN)
#             set(BUILD_NAME "tuya-touch-curtain")
#             set(BUILD_VER_NAME "CURTAIN_VER")
#         else()
#             message(FATAL_ERROR "No valid device type found in sdkconfig.")
#         endif()
#     endif()
# endif()
file(READ "${CMAKE_SOURCE_DIR}/sdkconfig" SDKCONFIG_CONTENT)

# Kiểm tra từng loại thiết bị theo thứ tự ưu tiên
if(SDKCONFIG_CONTENT MATCHES "CONFIG_DEVICE_TYPE_THERMOSTAT=y")
    set(BUILD_NAME "tuya-thermostat")
    set(BUILD_VER_NAME "THERMOSTAT_VER")
elseif(SDKCONFIG_CONTENT MATCHES "CONFIG_DEVICE_TYPE_TOUCH_CURTAIN=y")
    set(BUILD_NAME "tuya-touch-curtain")
    set(BUILD_VER_NAME "CURTAIN_VER")
elseif(SDKCONFIG_CONTENT MATCHES "CONFIG_DEVICE_TYPE_TOUCH_SCENE=y")
    set(BUILD_NAME "tuya-touch-scene")
    set(BUILD_VER_NAME "SCENE_VER")
elseif(SDKCONFIG_CONTENT MATCHES "CONFIG_DEVICE_TYPE_TOUCH=y")
    set(BUILD_NAME "tuya-touch")
    set(BUILD_VER_NAME "TOUCH_VER")
elseif(SDKCONFIG_CONTENT MATCHES "CONFIG_DEVICE_TYPE_REMOTE_GATEWAY=y")
    set(BUILD_NAME "tuya-remote-gateway")
    set(BUILD_VER_NAME "REMOTE_GATEWAY_VER")
elseif(SDKCONFIG_CONTENT MATCHES "CONFIG_DEVICE_TYPE_PIR=y")
    set(BUILD_NAME "tuya-pir")
    set(BUILD_VER_NAME "PIR_VER")
else()
    message(FATAL_ERROR "❌ No valid device type found in sdkconfig.")
endif()

file(READ "${CMAKE_SOURCE_DIR}/version.txt" VERSION_CONTENT)
string(REGEX MATCH "${BUILD_VER_NAME}=[0-9]+\\.[0-9]+\\.[0-9]+" MATCH_VERSION "${VERSION_CONTENT}")
if(MATCH_VERSION)
    string(REPLACE "${BUILD_VER_NAME}=" "" PROJECT_VER "${MATCH_VERSION}")
else()
    set(PROJECT_VER "0.0.0")
endif()

message(STATUS "Build name: ${BUILD_NAME} Project version: ${PROJECT_VER}")

add_compile_definitions(FIRMWARE_VERSION="${PROJECT_VER}")
add_compile_options(-Wno-missing-braces -Wno-error=missing-braces)
add_compile_options(-Wno-unused-variable)
# file(READ ./version.txt VERSION_STRING)
# STRING(REGEX REPLACE "\n" "" VERSION_STRING "${VERSION_STRING}")
# set(BUILD_NAME tuya-smarthome-fw)

# if(NOT DEFINED FIRMWARE_VERSION)
#     set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -DFIRMWARE_VERSION=\"${PROJECT_VER}\"")
#     message("C_FLAGS: " ${CMAKE_C_FLAGS})
# endif()
# set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wno-unused-variable")
# set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wno-missing-braces -Wno-error=missing-braces")
# set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-missing-braces -Wno-error=missing-braces")


if (NOT DEFINED PROJECT_NAME)
    set(PROJECT_NAME "${BUILD_NAME}-v${PROJECT_VER}")
    message(STATUS "Project Name: ${PROJECT_NAME}")
    add_compile_options(-fdiagnostics-color=always)
    include($ENV{IDF_PATH}/tools/cmake/project.cmake)
    project(${PROJECT_NAME})
else()
    message(FATAL_ERROR "This must be a project's main CMakeLists.txt.")
endif()
